import { Entity } from './entity/entity';
import { EntityFactory } from './entity/entity-factory';
import { EntitySystem } from './system/system';
import { EventManager } from './events/event-manager';
import { Renderer } from './renderers/render';
import { PhaserGame } from './phaser-integration/phaser-game';
import { GameDependencies } from './dependencies/game-dependencies';
import { EntityRegistration } from './entity/entity-registration';
export declare class Game {
    spriteManager: any;
    newTime: number;
    constructor(entityFactory: EntityFactory, renderer: Renderer, eventManager: EventManager, gameDependencies: GameDependencies);
    static create(): Game;
    static createCustom(dependencies: GameDependencies): Game;
    private starters;
    private _entities;
    get entities(): Entity[];
    set entities(entities: Entity[]);
    entityFactory: EntityFactory;
    systems: EntitySystem[];
    systemsWithOncePerTurnUpdate: EntitySystem[];
    renderer: Renderer;
    eventManager: EventManager;
    intervalId: number;
    gameDependencies: GameDependencies;
    performance: number;
    frameTime: number;
    targetFps: number;
    counter: number;
    lastTime: number;
    frameTracker: number;
    phaserGame: PhaserGame;
    update(delta: number, framesPassed: number): void;
    step(delta: number): void;
    private loop;
    start(): number;
    stop(): void;
    addStarter(starterFunc: (game: Game) => void): void;
    addEntity(entityName: string): Entity;
    getById(entityId: number): Entity;
    destroy(entity: Entity): void;
    cleanDestroyedEntities(): void;
    addSystem(system: EntitySystem): void;
    registerEntity(entityName: string, EntityClass: EntityRegistration): void;
    registerComponent(EntityClass: any): void;
}
