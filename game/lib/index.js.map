{
  "version": 3,
  "sources": ["external-global-plugin:phaser", "external-global-plugin:pixi.js", "../src/engine/component/component.ts", "../src/engine/component/components/position/position-component.ts", "../src/components/wasd-component.ts", "../src/components/crop-component.ts", "../src/components/projectile-component.ts", "../src/components/fight-component.ts", "../src/components/health-component.ts", "../src/components/neural-fight-component.ts", "../src/components/inventory-component/inventory-item.ts", "../src/components/inventory-component/inventory-item-type.ts", "../src/components/inventory-component/item-registry.ts", "../src/components/inventory-component/inventory-component.ts", "../src/components/place-item/place-item-request.ts", "../src/components/place-item/place-item-component.ts", "../src/components/crop-harvester-component.ts", "../src/components/text-component/text-placement.ts", "../src/components/text-component/text-component.ts", "../src/components/particle-componet.ts", "../src/components/primitive-component.ts", "../src/components/transitions/transition-component.ts", "../src/components/tile-component/sprite-id.ts", "../src/components/tile-component/tile.ts", "../src/components/tile-component/tile-component.ts", "../src/components/clickable-component.ts", "../src/engine/renderers/sprite-animation.ts", "../src/engine/renderers/implementations/html/html-canvas.ts", "../src/engine/renderers/implementations/html/html-rect-sprite.ts", "../src/engine/renderers/implementations/html/html-sprite.ts", "../src/engine/renderers/sprite-manager.ts", "../src/engine/component/components/animation/animation-component.ts", "../src/components/weapon-component.ts", "../src/builders/build-components.ts", "../src/engine/dependencies/game-dependencies.ts", "../src/builders/dependency-builder.ts", "../src/entities/player-entity.ts", "../src/entities/villager-entity.ts", "../src/entities/crop-entity.ts", "../src/entities/first-entity.ts", "../src/entities/projectile-entity.ts", "../src/entities/inventory-item-entity.ts", "../src/entities/particles/particle-entity.ts", "../src/entities/particles/particles-entity.ts", "../src/entities/clickable-entity.ts", "../src/entities/deer-entity.ts", "../src/entities/ui-panel-entity.ts", "../src/entities/weapon-entity.ts", "../src/builders/entity-builder.ts", "../src/builders/sprite-builder.ts", "../src/components/animation-component.ts", "../src/components/dash-component.ts", "../src/components/inventory-component/give-item-event-data.ts", "../src/components/lines-component.ts", "../src/engine/component/component-factory.ts", "../src/engine/component/components/effect/effect-component.ts", "../src/engine/dependencies/generic-cameras.ts", "../src/engine/entity/entity.ts", "../src/engine/entity/entity-factory.ts", "../src/engine/entity/entity-update-args.ts", "../src/engine/events/EventType.ts", "../src/engine/events/game-event.ts", "../src/engine/events/key-events.ts", "../src/engine/events/event-manager.ts", "../src/engine/renderers/implementations/html/html-renderer.ts", "../src/engine/system/system-args.ts", "../src/engine/game.ts", "../src/engine/phaser-integration/main-scene.ts", "../src/engine/phaser-integration/phaser-game.ts", "../src/metadata.ts", "../src/engine/phaser-integration/phaser-sprite-manager.ts", "../src/engine/phaser-integration/phaser-components/phaser-animation-component.ts", "../src/engine/phaser-integration/phaser-components/phaser-position-component.ts", "../src/engine/phaser-integration/phaser-cameras.ts", "../src/engine/phaser-integration/phaser-game-dependencies.ts", "../src/engine/phaser-integration/phaser-dependency-builder.ts", "../src/engine/renderers/render-options.ts", "../src/engine/system/system.ts", "../src/engine/phaser-integration/phaser-systems/phaser-render-system.ts", "../src/engine/phaser-integration/phaser-builder.ts", "../src/engine/pixi-integration/generic-render.ts", "../src/engine/pixi-integration/pixi-components/generic-animation-component.ts", "../src/engine/pixi-integration/pixi-components/generic-position-component.ts", "../src/engine/pixi-integration/pixi-dependencies.ts", "../src/engine/pixi-integration/pixi-game.ts", "../src/engine/pixi-integration/pixi-sprite-manager.ts", "../src/engine/pixi-integration/sprite-dependency/pixi-engine-sprite.ts", "../src/engine/pixi-integration/sprite-dependency/pixie-engine-creator.ts", "../src/engine/pixi-integration/systems/generic-render-system.ts", "../src/engine/pixi-integration/pixi-builder.ts", "../src/entities/lines-entity.ts", "../src/systems/click-system.ts", "../src/systems/collision-system.ts", "../src/systems/crop-system.ts", "../src/systems/health-system.ts", "../src/systems/inventory-system.ts", "../src/systems/map-builder-system.ts", "../src/systems/neural-fight-system.ts", "../src/systems/particle-system.ts", "../src/systems/place-item-system.ts", "../src/systems/position-system.ts", "../src/systems/projectile-system.ts", "../src/systems/wasd-system.ts", "../src/systems/render-system.ts", "../src/game-builders.ts", "../src/systems/fight-system.ts"],
  "sourcesContent": ["module.exports = window.Phaser", "module.exports = window.PIXI", "import { GameDependencies } from \"../dependencies/game-dependencies\";\r\nimport { Entity } from \"../entity/entity\";\r\nimport { EntityUpdateArgs } from \"../entity/entity-update-args\";\r\nimport { Game } from \"../game\";\r\n\r\nexport abstract class Component {\r\n    constructor(componentName:string){\r\n        this.componentName = componentName;\r\n    }\r\n    componentName:string;\r\n    abstract update(entity:Entity, args:EntityUpdateArgs):void;\r\n    static create(game:GameDependencies, entityId:string){\r\n        throw \"Component must implement static create function\";\r\n    };\r\n    static createWithGame(game:Game, entityId:string){\r\n    }\r\n}", "import { Component } from \"../../component\";\r\nimport { Entity } from \"../../../entity/entity\";\r\nimport { EntityUpdateArgs } from \"../../../entity/entity-update-args\";\r\nimport { IPositionComponent } from \"./iposition-component\";\r\n\r\n\r\nexport class PositionComponent extends Component implements IPositionComponent {\r\n    constructor(){\r\n        super(\"position\");\r\n    }\r\n    private _vx:number=0;\r\n    get vx():number{\r\n        return this._vx;\r\n    }\r\n    set vx(vx:number){\r\n        this._vx = vx;\r\n        if(vx == 0){\r\n            if(this.faceY !== 0){\r\n                this.faceX = vx;\r\n            }\r\n        } else {\r\n            this.faceX = vx;\r\n            if(this.faceY !== 0 && this.vy == 0){\r\n                this.faceY = 0;\r\n            }\r\n        }\r\n    }\r\n    private _vy:number=0;\r\n    get vy():number{\r\n        return this._vy;\r\n    }\r\n    set vy(vy:number){\r\n        this._vy = vy;\r\n        if(vy == 0){\r\n            if(this.faceX !== 0){\r\n                this.faceY = vy;\r\n            }\r\n        } else {\r\n            this.faceY = vy;\r\n            if(this.faceX !== 0 && this.vx == 0){\r\n                this.faceX = 0;\r\n            }\r\n        }\r\n    }\r\n    private _rotate:number=0;\r\n    get rotate():number{\r\n        return this._rotate;\r\n    }\r\n    set rotate(radiansToRotate:number){\r\n        this._rotate = radiansToRotate%(2*Math.PI);\r\n    }\r\n    x:number=0;\r\n    y:number=0;\r\n    h: number=0;\r\n    width:number=100;\r\n    height:number=100;\r\n    faceRight:boolean=true;\r\n    faceX:number=0;\r\n    faceY:number=0;\r\n    moved:boolean=false;\r\n    applyOffsets:boolean=true;\r\n\r\n\r\n\r\n    update(entity:Entity, args:EntityUpdateArgs):void{\r\n        const delta = args.delta;\r\n        this.x += this.vx * delta;\r\n        this.y += this.vy * delta;\r\n        this.moved = !(this.vx == 0 && this.vy == 0);\r\n    }\r\n\r\n    static create():PositionComponent{\r\n        return new PositionComponent();\r\n    }\r\n    pivotX:number = .5;\r\n    pivotY:number = 1;\r\n    anchorX:number = .5;\r\n    anchorY:number = 1;\r\n}", "import { Component } from \"../engine/component/component\";\r\n\r\nexport class WasdComponent extends Component {\r\n    constructor(){\r\n        super(\"wasd\");\r\n    }\r\n    speed:number=5;\r\n    dashSpeed: number = 15;\r\n    dashingTime: number = 0;\r\n    maxDashingTime: number = 20;\r\n    dashing: boolean = false;\r\n    dashWidth: number = 0;\r\n    dashHeight: number = 0;\r\n    dashSprite: string = \"\";\r\n    dashSpriteNumber: number = 0;\r\n    sprite:string=\"grey\";\r\n    walkSprite:string=\"greyWalk\";\r\n    startDashing(){\r\n        this.dashing = true;\r\n        this.dashingTime = this.maxDashingTime;\r\n    }\r\n    update(){\r\n    }\r\n    static create(){\r\n        return new WasdComponent();\r\n    }\r\n}", "import { Component } from '../engine/component/component';\r\nexport class CropComponent extends Component {\r\n    constructor(){\r\n        super(\"crop\");\r\n        this.growthLengths = [5,5,5];\r\n        this.growthStage = 0;\r\n        this.cropName = \"turnip\"\r\n        this.setCrop(this.cropName)\r\n    }\r\n    //growth sprites for each stage\r\n    growthSprites:string[];\r\n    //index of current growthSprite in growthSprites\r\n    //also index of growthLength in growth lengths\r\n    growthStage:number;\r\n    growthLengths:number[];\r\n    timeSinceGrowth:number=0;\r\n    cropName:string;\r\n    \r\n    setSprites(sprites:string[]){\r\n        this.growthSprites = sprites;\r\n        this.growthStage = 0;\r\n    }\r\n\r\n    isGrown():boolean{\r\n        return this.growthStage == this.growthSprites.length-1;\r\n    }\r\n\r\n    setCrop(cropName:string){\r\n        var cropLength:number = 300;\r\n        this.growthLengths = [cropLength, cropLength, cropLength];\r\n        switch(cropName){\r\n            case \"turnip\":\r\n                this.growthSprites = [\"turnip0\", \"turnip1\", \"turnip2\"];\r\n                this.growthLengths = [cropLength, cropLength, cropLength];\r\n                break;\r\n            case \"corn\":\r\n                this.growthSprites = [\"corn0\", \"corn1\", \"corn2\"];\r\n                this.growthLengths = [cropLength, cropLength, cropLength];\r\n                break;\r\n            case \"wheat\":\r\n                this.growthSprites = [\"wheat0\", \"wheat1\", \"wheat2\"];\r\n                this.growthLengths = [cropLength, cropLength, cropLength];\r\n                break;\r\n            case \"pumpkin\":\r\n                this.growthSprites = [\"pumpkin0\", \"pumpkin1\", \"pumpkin2\"];\r\n                this.growthLengths = [cropLength, cropLength, cropLength];\r\n                break;\r\n            case \"onion\":\r\n                this.growthSprites = [\"onion0\", \"onion1\", \"onion2\", \"onion3\", \"onion4\", \"onion5\"];\r\n                this.growthLengths = [cropLength, cropLength, cropLength, cropLength, cropLength, cropLength];\r\n                break;\r\n            case \"tomato\":\r\n                this.growthSprites = [\"tomato0\", \"tomato1\", \"tomato2\", \"tomato3\"];\r\n                this.growthLengths = [cropLength, cropLength, cropLength, cropLength];\r\n                break;\r\n        }\r\n        this.growthStage = 0;\r\n        this.cropName = cropName;\r\n    }\r\n\r\n    update(){\r\n        if(this.isGrown()){\r\n            return;\r\n        }\r\n        this.timeSinceGrowth++;\r\n        var gs:number = this.growthStage;\r\n        var gl:number = this.growthLengths[gs];\r\n        if (this.timeSinceGrowth > gl){\r\n            this.growthStage = (this.growthStage+1)%this.growthLengths.length;\r\n            this.timeSinceGrowth = 0;\r\n        }\r\n    };\r\n\r\n    static create():CropComponent{\r\n        return new CropComponent();\r\n    };\r\n}", "import { Component } from \"../engine/component/component\";\r\n\r\nexport class ProjectileComponent extends Component {\r\n    constructor(){\r\n        super(\"projectile\");\r\n    }\r\n    lifeSpan:number=90;\r\n    shooterId:number;\r\n\r\n    update(){\r\n    }\r\n\r\n    static create():ProjectileComponent{\r\n        return new ProjectileComponent();\r\n    }\r\n}", "import { Component } from '../engine/component/component';\r\nimport { Entity } from '../engine/entity/entity';\r\n\r\nexport class FightComponent extends Component{\r\n    constructor(){\r\n        super(\"fight\");\r\n    }\r\n    target:Entity;\r\n    attack:boolean=false;\r\n    maxSpeed:number=5;\r\n    range:number=300;\r\n    reloadTime:number=30;\r\n    reloadTimer:number=30;\r\n\r\n    attackTarget(){\r\n    }\r\n    \r\n    canFire(){\r\n        return this.reloadTime === this.reloadTimer;\r\n    }\r\n\r\n    update(){\r\n        if (this.reloadTimer <= this.reloadTime){\r\n            this.reloadTimer--;\r\n        }\r\n        if(this.reloadTimer <= 0){\r\n            this.reloadTimer = this.reloadTime;\r\n        }\r\n    }\r\n\r\n    static create():FightComponent{\r\n        return new FightComponent();\r\n    }\r\n}", "import { Component } from \"../engine/component/component\";\r\n\r\n\r\nexport class HealthComponent extends Component {\r\n    constructor(){\r\n        super(\"health\");\r\n    }\r\n    health:number=100;\r\n\r\n    update(){}\r\n\r\n    static create():HealthComponent{\r\n        return new HealthComponent();\r\n    }\r\n}", "import { Component } from \"../engine/component/component\";\r\n\r\nexport class NeuralFightComponent extends Component {\r\n    constructor(){\r\n        super(\"neural\");\r\n    }\r\n\r\n    update(){}\r\n\r\n    static create(){\r\n        return new NeuralFightComponent();\r\n    }\r\n}", "import { InventoryItemType } from \"./inventory-item-type\";\r\n\r\nexport class InventoryItem {\r\n    constructor(){}\r\n    itemQuantity:number = 0;\r\n    itemName:string = \"no name\";\r\n    itemDescription:string = \"no description\";\r\n    itemSlot:number = -1;\r\n\r\n    static create(itemType:InventoryItemType):InventoryItem{\r\n        let item = new InventoryItem();\r\n        item.itemName = itemType.itemName;\r\n        item.itemDescription = itemType.itemDescription;\r\n        return item;\r\n    }\r\n}", "export class InventoryItemType {\r\n    constructor(itemName:string, itemDescription:string, itemSpriteName:string){\r\n        InventoryItemType.largestItemId += 1;\r\n        this.itemId = InventoryItemType.largestItemId;\r\n        this.itemName = itemName;\r\n        this.itemDescription = itemDescription;\r\n        this.itemSpriteName = itemSpriteName;\r\n    }\r\n    static largestItemId:number = -1;\r\n    itemId:number = -1;\r\n    itemName:string = \"no name\";\r\n    itemDescription:string = \"no description\";\r\n    itemSpriteName:string;\r\n\r\n    static create(itemName:string, itemSpriteName:string, itemDescription:string)\r\n    :InventoryItemType{\r\n        let newItemType:InventoryItemType;\r\n        newItemType = new InventoryItemType(itemName, itemDescription, itemSpriteName);\r\n        return newItemType;\r\n    }\r\n}", "import { InventoryItemType } from \"./inventory-item-type\";\r\n\r\n\r\nexport class InventoryItemRegistry {\r\n    constructor(){}\r\n    itemTypes:{[key:string]:InventoryItemType}={};\r\n    registerItemType(itemName:string, itemSpriteName:string, description:string){\r\n        let newItemType:InventoryItemType;\r\n        newItemType = new InventoryItemType(itemName, description, itemSpriteName);\r\n        if (itemName in this.itemTypes){\r\n            throw \"error: item type: \" + itemName+ \" already exists\";\r\n        }\r\n        this.itemTypes[itemName] = newItemType;\r\n    }\r\n\r\n    private static singletonRegistry:InventoryItemRegistry;\r\n\r\n    static singletonCreate():InventoryItemRegistry{\r\n        if(this.singletonRegistry)return this.singletonRegistry;\r\n        let itemRegistry:InventoryItemRegistry = new InventoryItemRegistry();\r\n        this.singletonRegistry = itemRegistry;\r\n        this.singletonRegistry.populateItems();\r\n        return this.singletonRegistry;\r\n    }\r\n\r\n    private populateItems():void{\r\n        this.registerItemType(\"wheat\", \"wheat2\", \"its a wheat\");\r\n        this.registerItemType(\"onion\", \"onion5\", \"its an onion\");\r\n        this.registerItemType(\"corn\", \"corn2\", \"its corn\");\r\n        this.registerItemType(\"pumpkin\", \"pumpkin2\", \"its a pumpkin\");\r\n        this.registerItemType(\"turnip\", \"turnip2\", \"its a turnip\");\r\n        this.registerItemType(\"nothing\", \"nothing\", \"nothing\");\r\n    }\r\n}", "import { Component } from \"../../engine/component/component\";\r\nimport { InventoryItem } from \"./inventory-item\";\r\nimport { InventoryItemRegistry } from \"./item-registry\";\r\nimport { Entity } from \"../../engine/entity/entity\";\r\nimport { GiveItemEventData } from \"./give-item-event-data\";\r\nimport { InventoryItemType } from \"./inventory-item-type\";\r\nimport { GameEvent } from \"../../engine/events/game-event\";\r\nimport { EventType } from \"../../engine/events/EventType\";\r\nimport { InventoryItemEntity } from \"../../entities/inventory-item-entity\";\r\nimport { AnimationComponent2 } from \"../animation-component\";\r\nimport { TextComponent } from \"../text-component/text-component\";\r\n\r\nexport class InventoryComponent extends Component {\r\n    constructor(itemRegistry:InventoryItemRegistry){\r\n        super(\"inventory\");\r\n        this.itemRegistry = itemRegistry;\r\n        this.itemSlots = new Array<InventoryItem>(10);\r\n        for(let i:number=0;i<this.itemSlots.length;i++){\r\n            let itemType:InventoryItemType = this.itemRegistry.itemTypes[\"nothing\"];\r\n            this.itemSlots[i] = InventoryItem.create(itemType);\r\n        }\r\n\r\n    }\r\n    private inventory:{[key:string]:InventoryItem} = {};\r\n    private itemSlots:InventoryItem[] = [];\r\n    private selectedItemSlot:number=0;\r\n    private itemRegistry:InventoryItemRegistry;\r\n    inventoryItemEntities:Entity[] = [];//inventory item entities that appear on screen\r\n\r\n    hashInventoryToString():void{\r\n        let inventoryString:string = \"Inventory:\";\r\n        for(let i:number=0;i<this.itemSlots.length;i++){\r\n            let item:InventoryItem;\r\n            item = this.itemSlots[i];\r\n            inventoryString += `\\n${item.itemName}: ${item.itemQuantity}`;\r\n        }\r\n        inventoryString += \"\\n<---------->\";\r\n        console.log(inventoryString);\r\n    }\r\n\r\n    inventoryToString():void{\r\n        let inventoryString:string = \"Inventory:\";\r\n        for(let i:number=0;i<this.itemSlots.length;i++){\r\n            let item:InventoryItem;\r\n            item = this.itemSlots[i];\r\n            inventoryString += `\\n${item.itemName}: ${item.itemQuantity}`;\r\n\r\n        }\r\n        inventoryString += \"\\n<---------->\";\r\n        console.log(inventoryString);\r\n    }\r\n \r\n    selectItemSlot(itemSlotNumber:number) {\r\n        this.selectedItemSlot = itemSlotNumber % this.itemSlots.length;\r\n    }\r\n\r\n    getSelectedItem():InventoryItem{\r\n        return this.itemSlots[this.selectedItemSlot];\r\n    }\r\n\r\n    addItemToHashTable(itemName:string, quantity:number=1):boolean{\r\n        if(! (itemName in this.itemRegistry.itemTypes)){\r\n            console.log(`Warning: itemName ${itemName} is not in the itemRegistry`);\r\n            return false;\r\n        }\r\n        let itemType:InventoryItemType = this.itemRegistry.itemTypes[itemName];\r\n        if(!(itemName in this.inventory)){\r\n            this.inventory[itemName] = InventoryItem.create(itemType);\r\n        }\r\n        this.inventory[itemName].itemQuantity += quantity;\r\n        return true;\r\n    }\r\n\r\n    getItems():InventoryItem[]{\r\n        return this.itemSlots;\r\n    }\r\n\r\n    addItem(itemName:string, quantity:number=1):boolean {\r\n        if(! (itemName in this.itemRegistry.itemTypes)){\r\n            console.log(`Warning: itemName ${itemName} is not in the itemRegistry`);\r\n            return false;\r\n        }\r\n        for(let i:number=0;i<this.itemSlots.length;i++) {\r\n            let itemSlot:InventoryItem = this.itemSlots[i];\r\n            if (itemSlot.itemName == itemName) {\r\n                itemSlot.itemQuantity += quantity;\r\n                return true;\r\n            }\r\n        }\r\n        for(let i:number=0;i<this.itemSlots.length;i++) {\r\n            let itemSlot:InventoryItem = this.itemSlots[i];\r\n            if (itemSlot.itemName == \"nothing\") {\r\n                let itemType:InventoryItemType = this.itemRegistry.itemTypes[itemName]\r\n                this.itemSlots[i] = InventoryItem.create(itemType);\r\n                this.itemSlots[i].itemQuantity = 1;\r\n                return;\r\n            }\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    update(entity:Entity):void{\r\n        for(let i:number=0;i<this.inventoryItemEntities.length;i++){\r\n            let inventoryItemEntity = this.inventoryItemEntities[i];\r\n            let spriteComponent:AnimationComponent2;\r\n            spriteComponent = <AnimationComponent2>inventoryItemEntity.getComponent(\"animation\");\r\n            let item:InventoryItem = this.itemSlots[i];\r\n            let itemType:InventoryItemType = this.itemRegistry.itemTypes[item.itemName];\r\n            spriteComponent.setSprite(itemType.itemSpriteName);\r\n        }\r\n    }\r\n\r\n    private handleEvents(event:GameEvent):void{\r\n    }\r\n\r\n    static create():InventoryComponent{\r\n        let inventory:InventoryComponent;\r\n        inventory = new InventoryComponent(InventoryItemRegistry.singletonCreate());\r\n        return inventory;\r\n    }\r\n}", "import { Entity } from \"../../engine/entity/entity\";\r\n\r\nexport class PlaceItemRequest {\r\n    constructor(entityName:string, coordinates:number[], quantity:number=1,\r\n                successCallback:(entity:Entity)=>void, relative:boolean=true){\r\n        this.entityName = entityName;\r\n        this.coordinates = coordinates;\r\n        this.quantity = quantity;\r\n        this.successCallback = successCallback;\r\n        this.relative = relative;\r\n    }\r\n    entityName:string;\r\n    coordinates:number[];\r\n    quantity:number;\r\n    successCallback: (entity: Entity) => void;\r\n    relative:boolean;\r\n}", "import { Component } from \"../../engine/component/component\";\r\nimport { Entity } from \"../../engine/entity/entity\";\r\nimport { InventoryComponent } from \"../inventory-component/inventory-component\";\r\nimport { PlaceItemRequest } from \"./place-item-request\";\r\n/**\r\n * Allows the user to place items. Items can only be placed on tiles.\r\n * Tiles are squares of side length this.tileSize. Place item requests\r\n * describe what item to place and where to place it.\r\n * PlaceItemSystem will read the requests and do the actual placing\r\n */\r\nexport class PlaceItemComponent extends Component {\r\n    constructor(){\r\n        super(\"placeItem\");\r\n    }\r\n    public placeItemRequests:PlaceItemRequest[]=[];\r\n    placeItem(  entityName:string, coordinates:number[]=[0, 0],\r\n                successCallback:(entity:Entity)=>void, relative:boolean=true):void {\r\n        let placeItemRequest:PlaceItemRequest;\r\n        placeItemRequest = new PlaceItemRequest(entityName, coordinates, 1, successCallback, relative=true);\r\n        this.placeItemRequests.push(placeItemRequest);\r\n    }\r\n    \r\n    update(entity: Entity): void {\r\n        \r\n    }\r\n\r\n    static create():PlaceItemComponent {\r\n        return new PlaceItemComponent();\r\n    }\r\n\r\n}", "import { Component } from \"../engine/component/component\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\n\r\nexport class CropHarvesterComponent extends Component{\r\n    harvesting:boolean = false;\r\n    private harvestTime:number = 0;\r\n    private timeItTakesToHarvest:number = 10;\r\n\r\n    public startHarvest():void {\r\n        this.harvesting = true;\r\n        this.harvestTime = this.timeItTakesToHarvest;\r\n    }\r\n\r\n    update(entity: Entity): void {\r\n        if (this.harvestTime > 0){\r\n            this.harvestTime -= 1;\r\n        } else {\r\n            this.harvesting = false;\r\n        }\r\n    }\r\n\r\n    static create():CropHarvesterComponent{\r\n        return new CropHarvesterComponent(\"cropHarvester\");\r\n    }\r\n}", "export class TextPlacement{\r\n    constructor(textValue:string, offsetX:number, offsetY:number){\r\n        this.textValue = textValue;\r\n        this.offsetX = offsetX;\r\n        this.offsetY = offsetY;\r\n    }\r\n    offsetX:number;\r\n    offsetY:number;\r\n    textValue:string;\r\n}", "import { Component } from \"../../engine/component/component\";\r\nimport { TextPlacement } from \"./text-placement\";\r\n\r\nexport class TextComponent extends Component {\r\n    constructor(){\r\n        super(\"text\");\r\n    }\r\n    textPlacements:TextPlacement[]=[];\r\n    addTextPlacement(text:string, offsetX:number=0, offsetY:number=0){\r\n        this.textPlacements.push(new TextPlacement(text, offsetX, offsetY));\r\n    }\r\n\r\n    setText(value:string, index:number=0){\r\n        if(index >= 0 && index < this.textPlacements.length){\r\n            this.textPlacements[index].textValue = value;\r\n        }\r\n    }\r\n\r\n    update(){}\r\n    static create(){\r\n        return new TextComponent();\r\n    }\r\n}", "import { Component } from \"../engine/component/component\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\nimport { ParticleEntity } from \"../entities/particles/particle-entity\";\r\nimport { PositionComponent } from \"../engine/component/components/position/position-component\";\r\n\r\nexport class ParticleComponent extends Component{\r\n    constructor(){\r\n        super(\"particles\");\r\n    }\r\n    particles: Entity[] = []\r\n    targetParticles: number = 10;\r\n    time: number = 0;\r\n    maxSpeed: number = 50;\r\n    paths = [\r\n        /*(center: PositionComponent, position: PositionComponent) => {\r\n            let dx = center.x - position.x;\r\n            let dy = center.y - position.y;\r\n            if (Math.abs(position.vx) < this.maxSpeed) position.vx += dx/Math.abs(dx) * .1;\r\n            if (Math.abs(position.vy) < this.maxSpeed) position.vy += dy/Math.abs(dy) * .1;\r\n        },*/\r\n        /*(center: PositionComponent, position: PositionComponent) => {\r\n            let dx = center.x - position.x;\r\n            let dy = center.y - position.y;\r\n            if (Math.abs(position.vx) < this.maxSpeed) position.vx += dx/Math.abs(dx) * .2;\r\n            if (dy > 50)position.vy = 1\r\n            if (dy < -50)position.vy = -1\r\n        }*/\r\n        /*(center: PositionComponent, position: PositionComponent) => {\r\n            let dx = center.x - position.x;\r\n            let dy = center.y - position.y;\r\n            position.vx += dx/Math.abs(dx) * .2;\r\n            position.vy += dy/Math.abs(dy) * .2;\r\n            // position.x += 1;\r\n            // center.x += 1;\r\n        }*/\r\n        /*(center:PositionComponent, position: PositionComponent, time: number) => {\r\n            let f = ()=>10 * Math.sin(.05 * time);\r\n            let f2 = ()=>40 * Math.cos(.2 * time);\r\n            position.y = center.y +  10*f();\r\n            position.x = center.x + f2();\r\n        },*/\r\n        /*(center:PositionComponent, position: PositionComponent, time: number) => {\r\n            let f = ()=>Math.sin(.05 * time/3);\r\n            let f2 = ()=>40 * Math.cos(.2 * time/2);\r\n            position.h = -2 + center.h - 2*center.width/3 +  30*f();\r\n            position.x = center.x + f2();\r\n            position.y = center.y - 1\r\n        },\r\n        (center:PositionComponent, position: PositionComponent, time: number) => {\r\n            let f = ()=>Math.sin(.05 * time/3);\r\n            let f2 = ()=>40 * Math.cos(.2 * time/2);\r\n            position.h = -2 + center.h - 2*center.width/3 +  30*f();\r\n            position.x = center.x - f2();\r\n            position.y = center.y + 1\r\n        },*/\r\n        (center:PositionComponent, position: PositionComponent, time: number) => {\r\n            let f = ()=>40 * Math.sin(.2 * time/2);\r\n            let f2 = ()=>40 * Math.cos(.2 * time/2);\r\n            position.h = -2 + center.h - 2*center.width/3 +  f();\r\n            position.x = center.x - f2();\r\n            position.y = center.y + 1\r\n        }\r\n    ]\r\n    addParticle(particle: Entity){\r\n        this.particles.push(particle);\r\n    }\r\n    update(entity: Entity): void {\r\n        for(let i:number=0;i<this.particles.length;i++){\r\n            let particle = this.particles[i];\r\n            let path = this.paths[i%this.paths.length];\r\n            let center = <PositionComponent>entity.getComponent(\"position\");\r\n            let particlePosition = <PositionComponent>particle.getComponent(\"position\");\r\n            path(center, particlePosition, -(this.time + i * 10));\r\n        }\r\n    }\r\n    public static create(): ParticleComponent {\r\n        return new ParticleComponent();\r\n    }\r\n}", "import { Component } from \"../engine/component/component\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\n\r\nexport class PrimitiveComponent extends Component {\r\n    update(entity: Entity): void {\r\n    }\r\n    public static create(): PrimitiveComponent {\r\n        return new PrimitiveComponent(\"primitive\");\r\n    }\r\n}", "import { Component } from \"../../engine/component/component\";\r\nimport { Entity } from \"../../engine/entity/entity\";\r\nimport {AnimationComponent2} from \"../animation-component\";\r\nexport class TransitionComponent extends Component{\r\n    constructor(){\r\n        super(\"transition\");\r\n    }\r\n    time: number=0;\r\n    reference: ImageData = null;\r\n    current: ImageData = null;\r\n    targetAnimationName: string = \"fireball\";\r\n    targetSpriteNumber: number = 0;\r\n    target: ImageData;\r\n    running: boolean = false;\r\n    speed: number = 15;\r\n    update(entity: Entity): void {\r\n        if (!this.running) return;\r\n        let animation = <AnimationComponent2>entity.getComponent(\"animation\", true);\r\n        if (animation == null) return;\r\n        this.reference = animation.getRGBs();\r\n        this.target = animation.getRGBs(this.targetAnimationName, this.targetSpriteNumber, this.reference.width, this.reference.height);\r\n        if (this.targetAnimationName == null){\r\n            let newTarget = new ImageData(this.reference.width, this.reference.height);\r\n            for (let i=0;i<this.target.data.length;i++){\r\n                newTarget.data[i] = 0;\r\n            }\r\n            this.target = newTarget;\r\n        }\r\n        if (this.current == null){\r\n            // check if sprites are loaded length == 4 means it's a place holder of 1 pixel\r\n            if (this.reference.data.length == 4 || this.target.data.length == 4) return;\r\n            this.current = new ImageData(this.reference.width, this.reference.height);\r\n            for(let i=0;i<this.reference.data.length;i++){\r\n                this.current.data[i] = this.reference.data[i];\r\n            }\r\n        }\r\n        let noChanges = true;\r\n        for(let i=0;i<this.reference.data.length;i++){\r\n            let target = this.target.data[i];\r\n            if (this.current.data[i] < target){\r\n                this.current.data[i] += this.speed;\r\n            } else if (this.current.data[i] > target){\r\n                this.current.data[i] -= this.speed;\r\n            }\r\n            let distance = Math.abs(this.current.data[i] - target);\r\n            if (distance < this.speed){\r\n                this.current.data[i] = target;\r\n            } else {\r\n                noChanges = false;\r\n            }\r\n        }\r\n        animation.setFilter(this.current);\r\n        if (noChanges){\r\n            animation.isFiltered = false;\r\n            this.running = false;\r\n        }\r\n    }\r\n    public start(targetAnimationName:string = \"fireball\", targetSpriteNumber:number, resetCurrent:boolean=true):void{\r\n        this.running = true;\r\n        this.time = 300;\r\n        this.targetAnimationName = targetAnimationName;\r\n        if (resetCurrent) this.current = null;\r\n        this.targetSpriteNumber = targetSpriteNumber;\r\n    }\r\n    public static create(): TransitionComponent{\r\n        return new TransitionComponent();\r\n    }\r\n}", "export class SpriteId{\r\n    spriteName: string;\r\n    spriteNumber: number;\r\n    static create(spriteName:string, spriteNumber:number){\r\n        const spriteId = new SpriteId();\r\n        spriteId.spriteName = spriteName;\r\n        spriteId.spriteNumber = spriteNumber;\r\n        return spriteId;\r\n    }\r\n}", "import { SpriteId } from \"./sprite-id\";\r\n\r\nexport class Tile{\r\n    spriteIds:SpriteId[]=[];\r\n    tileX: number;\r\n    tileY: number;\r\n    public static create(spriteName: string, spriteNumber: number, tileX:number, tileY:number): Tile{\r\n        let tile = new Tile();\r\n        tile.spriteIds.push(SpriteId.create(\r\n            spriteName,\r\n            spriteNumber\r\n        ));\r\n        tile.tileX = tileX;\r\n        tile.tileY = tileY;\r\n        return tile;\r\n    }\r\n}", "import { Component } from \"../../engine/component/component\";\r\nimport { Entity } from \"../../engine/entity/entity\";\r\nimport { HtmlCanvas } from \"../../engine/renderers/implementations/html/html-canvas\";\r\nimport { Tile } from \"./tile\";\r\n\r\nexport class TileComponent extends Component{\r\n    constructor(){\r\n        super(\"tile\");\r\n    }\r\n    update(entity: Entity): void {\r\n    }\r\n\r\n    tileWidth: number = 64;\r\n    tiles: Tile[] = [];\r\n    private tilesByCoords:{[key:number]:{[key:number]:Tile}} = {};\r\n    tileSpriteNames: string[] = [\"grass\", \"soil\"]\r\n    addTile(tile:Tile){\r\n        this.tiles.push(tile);\r\n        const yToTile = this.tilesByCoords[tile.tileX];\r\n        if (yToTile == null){\r\n            this.tilesByCoords[tile.tileX] = {}\r\n        }\r\n        this.tilesByCoords[tile.tileX][tile.tileY] = tile;\r\n    }\r\n    public static create(): TileComponent{\r\n        let tc = new TileComponent();\r\n        let spriteName = \"grass\";\r\n        let mapWidth = 200;\r\n        let centerOffset = mapWidth/2-5;\r\n        let xlow = 4;\r\n        let xhigh = xlow + 6\r\n        let ylow = 3;\r\n        let yhigh = ylow + 6;\r\n        for(let i=0;i<mapWidth*mapWidth;i++){\r\n            let x = i%mapWidth-centerOffset;\r\n            let y = Math.floor(i/mapWidth)-centerOffset;\r\n            if (x >= xlow && x <= xhigh && y >= ylow && y <= yhigh) {\r\n                if (x==xlow && y == ylow) tc.addTile(Tile.create(\"soil\", 6, x, y));\r\n                else if (x==xhigh && y == ylow) tc.addTile(Tile.create(\"soil\", 8, x, y));\r\n                else if (x==xlow && y == yhigh) tc.addTile(Tile.create(\"soil\", 12, x, y));\r\n                else if (x==xhigh && y == yhigh) tc.addTile(Tile.create(\"soil\", 14, x, y));\r\n                else if (x==xlow) tc.addTile(Tile.create(\"soil\", 9, x, y));\r\n                else if (x==xhigh) tc.addTile(Tile.create(\"soil\", 11, x, y));\r\n                else if (y==ylow) tc.addTile(Tile.create(\"soil\", 7, x, y));\r\n                else if (y==yhigh) tc.addTile(Tile.create(\"soil\", 13, x, y));\r\n                else\r\n                tc.addTile(Tile.create(\"soil\", 10, x, y));\r\n                continue;\r\n            }\r\n            tc.addTile(Tile.create(spriteName, 14+Math.ceil(Math.random()*3), x, y));\r\n        }\r\n        return tc;\r\n    }\r\n    createBuilder():void{\r\n        let tileSetSpriteNames = [\"grass\", \"soil\"];\r\n    }\r\n\r\n    removeTiles(){\r\n        this.tiles = [];\r\n        this.tilesByCoords = {};\r\n    }\r\n    \r\n    coordToTile(x:number, y:number):Tile[]{\r\n        let tileX = Math.floor((x+.5*this.tileWidth)/this.tileWidth);\r\n        let tileY = Math.ceil(y/this.tileWidth);\r\n        const yToTile = this.tilesByCoords[tileX]\r\n        if (yToTile == null) return [];\r\n        const tile = yToTile[tileY];\r\n        if (tile == null){\r\n            return [];\r\n        }\r\n        return [tile];\r\n    }\r\n    tileCoordToReal(coord:number){\r\n        return coord * this.tileWidth;        \r\n    }\r\n}", "import { Component } from \"../engine/component/component\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\n\r\nexport class ClickableComponent extends Component{\r\n    constructor(){\r\n        super(\"click\");\r\n    }\r\n    update(entity: Entity): void {}\r\n    private callback:(()=>void)[] = [];\r\n    addListener(callback:()=>void) {\r\n        this.callback.push(callback);\r\n    }\r\n    click(){\r\n        this.callback.forEach((callback)=>{\r\n            callback();\r\n        });\r\n    }\r\n    \r\n    static create():ClickableComponent{\r\n        return new ClickableComponent();\r\n    };\r\n}", "export class SpriteAnimation{\r\n    constructor(animationName:string, spriteName:string, spriteNumbers:number[], delay:number){\r\n        this.spriteNumbers = spriteNumbers;\r\n        this.animationName = animationName;\r\n        this.spriteName = spriteName;\r\n        this.delay = delay;\r\n    }\r\n    spriteNumbers:number[];\r\n    animationName:string;\r\n    spriteName:string;\r\n    delay:number;\r\n\r\n    static create(animationName:string, spriteName:string, spriteNumbers:number[], delay:number=1){\r\n        var sa:SpriteAnimation = new SpriteAnimation(\r\n            animationName,\r\n            spriteName,\r\n            spriteNumbers,\r\n            delay\r\n        );\r\n        return sa;\r\n    }\r\n}", "export class HtmlCanvas\r\n{\r\n    constructor(canvas: HTMLCanvasElement)\r\n    {\r\n        this.canvas = canvas;\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n    }\r\n    canvas:HTMLCanvasElement;\r\n    ctx:CanvasRenderingContext2D;\r\n    private static canvas: HtmlCanvas = null;\r\n    public static createSingleton()\r\n    {\r\n        if (canvas != null) return HtmlCanvas.canvas;\r\n        var canvas:HTMLCanvasElement = <HTMLCanvasElement>document.getElementById(\"canvas\");\r\n        if (canvas === null){\r\n            canvas = document.createElement(\"canvas\");\r\n        }\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n        canvas.style.margin = \"0\";\r\n        canvas.style.padding = \"0\";\r\n        canvas.style.overflow = \"hidden\";\r\n        canvas.style.position = \"fixed\";\r\n        canvas.style.top = \"0px\";\r\n        canvas.style.left = \"0px\";\r\n        HtmlCanvas.canvas = new HtmlCanvas(canvas);\r\n        return HtmlCanvas.canvas;\r\n    }\r\n}", "import { Sprite } from \"../../sprite\";\r\nimport { HtmlCanvas } from \"./html-canvas\";\r\n\r\nexport class HtmlRectSprite implements Sprite {\r\n    constructor(spriteImg:HTMLImageElement, widthImgs:number, heightImgs:number, offsetx:number=0, offsety:number=0, frameWidth:number=0, frameHeight:number=0){\r\n        this.sprite = spriteImg;\r\n        this.widthImgs = widthImgs;\r\n        this.heightImgs = heightImgs;\r\n        this.offsetx = offsetx;\r\n        this.offsety = offsety;\r\n        this.frameWidth = frameWidth;\r\n        this.frameHeight = frameHeight;\r\n        this.canvas = HtmlCanvas.createSingleton();\r\n        this.ctx = HtmlCanvas.createSingleton().ctx;\r\n    }\r\n    getRGBs(width:number, height:number, spriteNumber: number): ImageData{\r\n        let fc = this.frameCoords(spriteNumber);\r\n        let canvas = document.createElement('canvas');\r\n        let context = canvas.getContext('2d');\r\n        if (width == null || height == null)\r\n        {\r\n            canvas.width = this.frameWidth;\r\n            canvas.height = this.frameHeight;\r\n        } else {\r\n            canvas.width = width;\r\n            canvas.height = height;\r\n        }\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n        context.drawImage(this.sprite, fc[0], fc[1], this.frameWidth,\r\n                          this.frameHeight, 0, 0, canvas.width, canvas.height);\r\n        let pixelData = context.getImageData(0, 0, canvas.width, canvas.height);\r\n        return pixelData;\r\n    }\r\n    drawImage(spriteNumber: number, x: number, y: number, width: number, height: number): void {\r\n        let fc = this.frameCoords(spriteNumber);\r\n        this.ctx.drawImage(this.sprite, fc[0], fc[1], this.frameWidth,\r\n                          this.frameHeight, x, y, width, height);\r\n    }\r\n    ctx: CanvasRenderingContext2D;\r\n    static spriteDir:string = \"../sprites/\";\r\n    widthImgs:number;\r\n    heightImgs:number;\r\n    frameWidth:number=1;\r\n    frameHeight:number=1;\r\n    sprite:HTMLImageElement;\r\n    canvas: HtmlCanvas;\r\n    loaded: boolean = false;\r\n    offsetx: number;\r\n    offsety: number;\r\n\r\n    private setFrameDimensions(sprite:HtmlRectSprite){\r\n        return function(){\r\n            sprite.frameWidth = sprite.sprite.width/sprite.widthImgs;\r\n            sprite.frameHeight = sprite.sprite.height/sprite.heightImgs;\r\n            sprite.loaded = true;\r\n        }\r\n    }\r\n\r\n    public frameCoords(spriteNum:number){\r\n        // var frameWidth:number = this.sprite.width/this.widthImgs;\r\n        // var frameHeight:number = this.sprite.height/this.heightImgs;\r\n        var frameWidth:number = this.frameWidth;\r\n        var frameHeight:number = this.frameHeight;\r\n        const widthImgs = Math.floor(this.sprite.width/frameWidth);\r\n        var framex:number = spriteNum%widthImgs * frameWidth;\r\n        var framey:number = Math.floor(spriteNum/widthImgs) * frameHeight;\r\n        framex += this.offsetx;\r\n        framey += this.offsety;\r\n        return [framex, framey];\r\n    }\r\n\r\n    public static create(fileName:string, widthImgs:number, heightImgs:number, offsetx:number=0, offsety:number=0){\r\n        var spriteImg:HTMLImageElement = new Image();\r\n        spriteImg.src = this.spriteDir + fileName;\r\n        const newSprite = new HtmlRectSprite(spriteImg, widthImgs, heightImgs, offsetx, offsety);\r\n        spriteImg.onload = newSprite.setFrameDimensions(newSprite);\r\n        return newSprite;\r\n    }\r\n\r\n    public static createWithDimensions(fileName:string, frameWidth:number, frameHeight:number, offsetx:number=0, offsety:number=0){\r\n        var spriteImg:HTMLImageElement = new Image();\r\n        spriteImg.src = this.spriteDir + fileName;\r\n        const newSprite = new HtmlRectSprite(spriteImg, 0, 0, offsetx, offsety, frameWidth, frameHeight);\r\n        return newSprite;\r\n    }\r\n}", "import { HtmlCanvas } from \"./html-canvas\";\r\nimport {Sprite} from \"../../sprite\";\r\nexport class HtmlSprite implements Sprite {\r\n    constructor(fileName:string){\r\n        var spriteImg:HTMLImageElement = new Image();\r\n        spriteImg.src = this.spriteDir + fileName;\r\n        this.sprite = spriteImg;\r\n        spriteImg.onload = this.setFrameDimensions(this);\r\n        this.ctx = HtmlCanvas.createSingleton().ctx;\r\n    }\r\n    loaded: boolean;\r\n    getRGBs(spriteNumber: number): ImageData {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    spriteDir:string = \"../sprites/\";\r\n    sprite:HTMLImageElement;\r\n    ctx:CanvasRenderingContext2D;\r\n    frameCoordsCalculated: number[][] = []\r\n    \r\n    drawImage(spriteNumber: number, x: number, y: number, width: number, height: number): void {\r\n        let fc = this.frameCoords(spriteNumber);\r\n        // this.ctx.drawImage(this.sprite, fc[0], fc[1], this.frameWidth,\r\n                        //   this.frameHeight, x, y, width, height);\r\n    }\r\n\r\n    private setFrameDimensions(sprite:HtmlSprite){\r\n        return function(){\r\n            let canvas = document.createElement('canvas');\r\n            let context = canvas.getContext('2d');\r\n            canvas.width = sprite.sprite.width;\r\n            canvas.height = sprite.sprite.height;\r\n            context.drawImage(sprite.sprite, 0, 0 );\r\n            let pixelData = context.getImageData(0, 0, sprite.sprite.width, sprite.sprite.height);\r\n            let averages = []\r\n            for(let i=0;i<pixelData.data.length;i+=4){\r\n                let average = (pixelData.data[i] + pixelData.data[i+1] + pixelData.data[i+2] + pixelData.data[i+3])/3;\r\n                averages.push(average);\r\n            }\r\n            let frames = sprite.findFrames(averages, pixelData.width, pixelData.height);\r\n            frames.forEach(f => {\r\n                f.sort();\r\n                let highestY = Math.floor(f[0]/pixelData.width);\r\n                let lowestY = Math.floor(f[f.length-1]/pixelData.width);\r\n                let height = lowestY - highestY;\r\n            });\r\n        }\r\n    }\r\n\r\n    findFrames(averagedPixelData: number[], width: number, height:number): number[][]{\r\n        let stack: number[] = [];\r\n        let claimed = new Set();\r\n        let results: number[][] = []\r\n        for(let i=0;i<averagedPixelData.length;i++)\r\n        {\r\n            if (claimed.has(i)) continue;\r\n            let average = averagedPixelData[i];\r\n            if (average <= 0)continue;\r\n            stack.push(i);\r\n            let nextResult:number[] = [i];\r\n            while (stack.length > 0){\r\n                if (stack.length > 60000) break;\r\n                let pixelIndex = stack.pop();\r\n                let average = averagedPixelData[pixelIndex];\r\n                if (pixelIndex >= averagedPixelData.length)continue;\r\n                if (pixelIndex < 0)continue;\r\n                if (average <= 0)continue;\r\n                if (claimed.has(pixelIndex)) continue;\r\n                claimed.add(pixelIndex);\r\n                nextResult.push(pixelIndex);\r\n                stack.push(pixelIndex + 1);\r\n                stack.push(pixelIndex - 1);\r\n                stack.push(pixelIndex + width);\r\n                stack.push(pixelIndex - width);\r\n            }\r\n            results.push(nextResult);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    public frameCoords(spriteNum:number){\r\n        return this.frameCoordsCalculated[spriteNum];\r\n    }\r\n    public static create(fileName: string){\r\n        return new HtmlSprite(fileName);\r\n    }\r\n}", "import { SpriteAnimation } from \"./sprite-animation\";\r\nimport { HtmlRectSprite } from \"./implementations/html/html-rect-sprite\";\r\nimport { HtmlSprite } from \"./implementations/html/html-sprite\";\r\nimport { Sprite } from \"./sprite\";\r\nimport { ISpriteLoader } from \"./isprite-loader\";\r\n\r\nexport class SpriteManager implements ISpriteLoader {\r\n    constructor(spriteDir:string=\"../sprites/\"){}\r\n    onLoad(callback?: () => void): void {\r\n    }\r\n    sprites:{ [key: string]: Sprite} = {};//sprite name to sprite\r\n    animations:{ [key: string]: SpriteAnimation} = {};//animation name to animation\r\n    RGBs: {[key:string]: ImageData}= {};\r\n    \r\n    createSprite(fileName:string, widthImgs:number, heightImgs:number, offsetx:number, offsety:number):HtmlRectSprite{\r\n        return HtmlRectSprite.create(fileName, widthImgs, heightImgs, offsetx, offsety);\r\n    }\r\n\r\n    addSprite(spriteName:string, sprite:Sprite){\r\n        this.sprites[spriteName] = sprite;\r\n    }\r\n    getSprite(spriteName:string):Sprite{\r\n        if(! (spriteName in this.sprites)){\r\n            throw \"sprite \"+spriteName+\" does not exist\";\r\n        }\r\n        return this.sprites[spriteName];\r\n    }\r\n\r\n    loadSprite(spriteName:string, fileName:string, widthImgs:number, heightImgs:number, offsetx:number=0, offsety:number=0){\r\n        var sprite = this.createSprite(fileName, widthImgs, heightImgs, offsetx, offsety);\r\n        this.addSprite(spriteName, sprite);\r\n    }\r\n\r\n    loadSpriteWithDimensions(spriteName:string, fileName:string, frameWidth:number, frameHeight:number, offsetx:number=0, offsety:number=0){\r\n        const sprite = HtmlRectSprite.createWithDimensions(fileName, frameWidth, frameHeight, offsetx, offsety);\r\n        this.addSprite(spriteName, sprite);\r\n    }\r\n\r\n    loadSpriteOverlapping(spriteName:string, fileName:string){\r\n        let sprite = HtmlSprite.create(fileName);\r\n    }\r\n\r\n    addAnimation(spriteName:string, animationName:string, spriteNumbers:Array<number>, delay=1){\r\n        var sa:SpriteAnimation = SpriteAnimation.create(animationName, spriteName, spriteNumbers, delay);\r\n        if (!(spriteName in this.sprites)){\r\n            throw \"error adding animation \"\r\n            + animationName \r\n            + \". spriteName \"\r\n            + spriteName\r\n            + \"doesn't exist. sprites must be added through addSprite method first\";\r\n        }\r\n        this.animations[animationName] = sa;\r\n    }\r\n\r\n    getAnimation(animationName:string):SpriteAnimation{\r\n        if(animationName in this.animations){\r\n            return this.animations[animationName];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    getRGBs(animationName:string=null, spriteNumber:number = 0, width:number=null, height:number=null):ImageData{\r\n        let key = animationName + spriteNumber;\r\n        if (key in this.RGBs) return this.RGBs[key];\r\n        let animation = this.animations[animationName];\r\n        let name = animation.spriteName;\r\n        let sprite = this.sprites[name];\r\n        if (!sprite.loaded){\r\n            return sprite.getRGBs(width, height, spriteNumber);\r\n        }\r\n        this.RGBs[key] = sprite.getRGBs(width, height, spriteNumber);\r\n        return this.RGBs[key];\r\n    }\r\n\r\n    static create():SpriteManager{\r\n        return new SpriteManager();\r\n    }\r\n    private static spriteManager:SpriteManager = null;\r\n    static singeltonCreate():SpriteManager{\r\n        if (SpriteManager.spriteManager != null) return SpriteManager.spriteManager;\r\n        SpriteManager.spriteManager = new SpriteManager();\r\n        return SpriteManager.spriteManager;\r\n    }\r\n}", "import { Entity } from \"../../../entity/entity\";\r\nimport { EntityUpdateArgs } from \"../../../entity/entity-update-args\";\r\nimport { SpriteAnimation } from \"../../../renderers/sprite-animation\";\r\nimport { SpriteManager } from \"../../../renderers/sprite-manager\";\r\nimport { Component } from \"../../component\";\r\nimport { IAnimationComponent } from \"./ianimation-component\";\r\n\r\nexport class AnimationComponent extends Component implements IAnimationComponent {\r\n    constructor(animationName:string, delay:number, spriteManager:SpriteManager){\r\n        super(\"animation\");\r\n        this.delay = delay;\r\n        this.currentDelay = delay;\r\n        this.spriteManager = spriteManager;\r\n        this.setSprite(animationName);\r\n        this.animationName = animationName;\r\n    }\r\n    private spriteNumbers:number[];\r\n    public animationName:string;\r\n    public spriteName:string;\r\n    private delay:number;\r\n    private frameNum:number=0;\r\n    private spriteNum:number=0;\r\n    private spriteManager:SpriteManager;\r\n    private currentDelay:number;\r\n    filter: ImageData;\r\n    isFiltered:boolean = false;\r\n\r\n    getSpriteNumber(){\r\n        var frameNum = this.frameNum;\r\n        var spriteNum = this.spriteNumbers[frameNum];\r\n        return spriteNum;\r\n    }\r\n\r\n    getRGBs(animationName:string=null, spriteNumber:number = 0, width:number=null, height:number=null,):ImageData{\r\n        if (animationName != null) return this.spriteManager.getRGBs(animationName, spriteNumber, width, height);\r\n        return this.spriteManager.getRGBs(this.animationName, this.getSpriteNumber(), width, height);\r\n    }\r\n    \r\n    setFilter(pixelData: ImageData) {\r\n        this.filter = pixelData;\r\n        this.isFiltered = true;\r\n    }\r\n\r\n    setSprite(animationName:string){\r\n        if(animationName == this.animationName){\r\n            return;\r\n        }\r\n\r\n        this.animationName = animationName;\r\n        var animation:SpriteAnimation = this.spriteManager.getAnimation(animationName);\r\n        if(animation == null){\r\n            console.log(`no animation found: ${animationName}`);\r\n            return;\r\n        }\r\n        this.spriteNumbers = animation.spriteNumbers;\r\n        this.spriteName = animation.spriteName;\r\n        this.delay = animation.delay;\r\n        this.frameNum = 0;\r\n    }\r\n\r\n    setSpriteNumber(spriteName:string, spriteNumber:number){\r\n        this.spriteNumbers = [spriteNumber];\r\n        this.spriteName = spriteName;\r\n        this.delay = 100;\r\n        this.frameNum = 0\r\n    }\r\n\r\n    update(entity:Entity, args:EntityUpdateArgs):void{\r\n        const framesPassed = args.fullFramePassed;\r\n        if (framesPassed == 0)return;\r\n        if(this.currentDelay == 0){\r\n            this.frameNum += framesPassed;\r\n            this.frameNum %= this.spriteNumbers.length;\r\n            this.spriteNum = this.getSpriteNumber();\r\n            this.currentDelay = this.delay;\r\n        } else {\r\n            this.currentDelay--;\r\n        }\r\n    }\r\n\r\n    static create():AnimationComponent{\r\n        var spriteManager:SpriteManager = SpriteManager.singeltonCreate();\r\n        // var spriteManager:SpriteManager = createSpriteManager();\r\n        var ac:AnimationComponent = new AnimationComponent(\"blond\", 2, spriteManager);\r\n        return ac;\r\n    }\r\n}", "import { Component } from \"../engine/component/component\";\r\nimport { IPositionComponent } from \"../engine/component/components/position/iposition-component\";\r\nimport { PositionComponent } from \"../engine/component/components/position/position-component\";\r\nimport { GameDependencies } from \"../engine/dependencies/game-dependencies\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\nimport { EntityUpdateArgs } from \"../engine/entity/entity-update-args\";\r\nimport { Game } from \"../engine/game\";\r\nimport { GenericPositionComponent } from \"../engine/pixi-integration/pixi-components/generic-position-component\";\r\nimport { WeaponEntity } from \"../entities/weapon-entity\";\r\n\r\nexport class WeaponComponent extends Component {\r\n    constructor(gameDependencies:GameDependencies, entityId:string){\r\n        super(\"weapon\");\r\n        this.game = gameDependencies.game;\r\n    }\r\n    weaponEntity: Entity = null;\r\n    weaponPosition: GenericPositionComponent = null;\r\n    weaponOffsetX: number = 0;\r\n    weaponOffsetY: number = -.5;\r\n    game: Game;\r\n    wobble:number=0;\r\n    rotationSpeed:number = .1;\r\n    holdWeapon(){\r\n        this.weaponOffsetX = .1;\r\n        this.weaponOffsetY = -.45\r\n        this.weaponPosition.rotate = 2;\r\n    }\r\n    sheatheWeapon(){\r\n        this.weaponOffsetX = .5;\r\n        this.weaponOffsetY = -.5;\r\n        this.weaponPosition.rotate = 5;\r\n    }\r\n    sheatheBack(){\r\n        this.weaponOffsetX = -.6;\r\n        this.weaponOffsetY = -.75;\r\n        this.weaponPosition.rotate = 3.2;\r\n        this.rotationSpeed = 0;\r\n    }\r\n    flip(faceRight:boolean){\r\n        if (faceRight == this.weaponPosition.faceRight)return;\r\n        this.weaponPosition.faceRight = faceRight;\r\n        this.weaponOffsetX = faceRight ? -Math.abs(this.weaponOffsetX):Math.abs(this.weaponOffsetX);\r\n    }\r\n    spin(){\r\n        this.weaponOffsetX = 0;\r\n        this.weaponOffsetY = -.5;\r\n        this.weaponPosition.rotate = 5;\r\n        this.rotationSpeed = .1;\r\n    }\r\n    zeroOut(){\r\n        this.weaponOffsetX = 0;\r\n        this.weaponOffsetY = 0;\r\n        this.weaponPosition.rotate = 0;\r\n        this.rotationSpeed = .0;\r\n    }\r\n    update(entity:Entity, args:EntityUpdateArgs){\r\n        if (this.weaponEntity == null){\r\n            this.weaponEntity = this.game.addEntity(\"weapon\");\r\n            this.weaponPosition = <GenericPositionComponent>this.weaponEntity.getComponent(\"position\");\r\n        }\r\n        const wielderPosition = <GenericPositionComponent>entity.getComponent(\"position\");\r\n        this.flip(wielderPosition.faceRight);\r\n        this.weaponPosition.x = wielderPosition.x + this.weaponOffsetX * wielderPosition.width + Math.ceil(Math.sin(this.wobble))*5;\r\n        this.weaponPosition.y = wielderPosition.y + this.weaponOffsetY * wielderPosition.height;\r\n        this.wobble += 0;\r\n        this.weaponPosition.rotate+=this.rotationSpeed;\r\n    }\r\n    static create(gameDependencies:GameDependencies, entityId:string):WeaponComponent{\r\n        return new WeaponComponent(gameDependencies, entityId);\r\n    }\r\n}", "import { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { WasdComponent } from '../components/wasd-component';\r\nimport { CropComponent } from '../components/crop-component';\r\nimport { ProjectileComponent } from '../components/projectile-component';\r\nimport { FightComponent } from '../components/fight-component';\r\nimport { HealthComponent } from '../components/health-component';\r\nimport { NeuralFightComponent } from '../components/neural-fight-component';\r\nimport { Game } from '../engine/game';\r\nimport { InventoryComponent } from '../components/inventory-component/inventory-component';\r\nimport { ComponentFactory } from '../engine/component/component-factory';\r\nimport { PlaceItemComponent } from '../components/place-item/place-item-component';\r\nimport { CropHarvesterComponent } from '../components/crop-harvester-component';\r\nimport { TextComponent } from '../components/text-component/text-component';\r\nimport { ParticleComponent } from '../components/particle-componet';\r\nimport { PrimitiveComponent } from '../components/primitive-component';\r\nimport { TransitionComponent } from '../components/transitions/transition-component';\r\nimport { TileComponent } from '../components/tile-component/tile-component';\r\nimport { ClickableComponent } from '../components/clickable-component';\r\nimport { AnimationComponent } from '../engine/component/components/animation/animation-component';\r\nimport { PhaserAnimationComponent } from '../engine/phaser-integration/phaser-components/phaser-animation-component';\r\nimport { PhaserPositionComponent } from '../engine/phaser-integration/phaser-components/phaser-position-component';\r\nimport { WeaponComponent } from '../components/weapon-component';\r\n\r\n\r\nexport function buildComponents(game:Game):void{\r\n    game.registerComponent(AnimationComponent);\r\n    game.registerComponent(PositionComponent);\r\n    game.registerComponent(WasdComponent);\r\n    game.registerComponent(CropComponent);\r\n    game.registerComponent(ProjectileComponent);\r\n    game.registerComponent(FightComponent);\r\n    game.registerComponent(HealthComponent);\r\n    game.registerComponent(NeuralFightComponent);\r\n    game.registerComponent(InventoryComponent);\r\n    game.registerComponent(ParticleComponent);\r\n    game.registerComponent(PrimitiveComponent);\r\n    game.registerComponent(TransitionComponent);\r\n    game.registerComponent(TileComponent);\r\n    game.registerComponent(ClickableComponent);\r\n    game.registerComponent(PlaceItemComponent);\r\n    game.registerComponent(CropHarvesterComponent);\r\n    game.registerComponent(TextComponent);\r\n    game.registerComponent(WeaponComponent);\r\n}", "import { ComponentFactory } from \"../component/component-factory\";\r\nimport { EntityFactory } from \"../entity/entity-factory\";\r\nimport { EventManager } from \"../events/event-manager\";\r\nimport { Game } from \"../game\";\r\nimport { IEngineCreator } from \"../pixi-integration/sprite-dependency/iengine-creator\";\r\nimport { ISpriteLoader } from \"../renderers/isprite-loader\";\r\nimport { Renderer } from \"../renderers/render\";\r\nimport { ICameras } from \"./icameras\";\r\n\r\nexport class GameDependencies {\r\n     engineCreator:IEngineCreator = null;// only necessary if using an engine like phaser/pixi\r\n     imgMetaData: {[key:string]: {width:number, height:number}} = null; \r\n     componentFactory: ComponentFactory = null;\r\n     entityFactory:EntityFactory = null;\r\n     renderer:Renderer = null;\r\n     eventManager:EventManager = null;\r\n     spriteManager:ISpriteLoader = null;\r\n     cameras:ICameras = null;\r\n     game:Game;\r\n     checkDependency(gameDependency:any){\r\n          if (gameDependency == null){\r\n               console.error(`Dependency was requested but it was null`);\r\n          }\r\n     }\r\n}", "import { GameDependencies } from \"../engine/dependencies/game-dependencies\";\r\n\r\nexport function buildDependencies():GameDependencies{\r\n    const deps = new GameDependencies();\r\n    return deps;\r\n}", "import { Entity } from '../engine/entity/entity';\r\nimport { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { WasdComponent } from '../components/wasd-component';\r\nimport { InventoryComponent } from '../components/inventory-component/inventory-component';\r\nimport { PlaceItemComponent } from '../components/place-item/place-item-component';\r\nimport { CropHarvesterComponent } from '../components/crop-harvester-component';\r\nimport { ParticleComponent } from '../components/particle-componet';\r\nimport { AnimationComponent } from '../engine/component/components/animation/animation-component';\r\nimport { GameDependencies } from '../engine/dependencies/game-dependencies';\r\nimport { EntityRegistration } from '../engine/entity/entity-registration';\r\n\r\nexport class PlayerEntity implements EntityRegistration{\r\n    create(gameDependencies: GameDependencies, entity: Entity): Entity {\r\n        var animation:AnimationComponent = <AnimationComponent>entity.addComponent(\"animation\");\r\n        var position:PositionComponent = <PositionComponent>entity.addComponent(\"position\");\r\n        var wasd:WasdComponent = <WasdComponent>entity.addComponent(\"wasd\");\r\n        var inventory:InventoryComponent = <InventoryComponent>entity.addComponent(\"inventory\");\r\n        let placeItem:PlaceItemComponent = <PlaceItemComponent>entity.addComponent(\"placeItem\");\r\n        let cropHarvester:CropHarvesterComponent;\r\n        cropHarvester = <CropHarvesterComponent>entity.addComponent(\"cropHarvester\");\r\n        let particles = <ParticleComponent>entity.addComponent(\"particles\");\r\n        particles.targetParticles = 0;\r\n        entity.addComponent(\"transition\");\r\n        entity.addComponent(\"weapon\");\r\n        \r\n        var sprite:string = \"grey\";\r\n        // var sprite:string = \"greythrow\";\r\n        var walkSprite:string = \"greyWalk\";\r\n        // var sprite:string = \"greg\";\r\n        // var walkSprite:string = \"gregwalk\";\r\n        // var sprite:string = \"blond\";\r\n        // var walkSprite:string = \"blondWalk\";\r\n        // var sprite:string = \"dwarfopeneyes\";\r\n        // var walkSprite:string = \"dwarfopeneyesWalk\";\r\n        // var sprite:string = \"speargoblin\";\r\n        // var walkSprite:string = \"speargoblinWalk\";\r\n        \r\n        animation.setSprite(sprite)\r\n        wasd.sprite = sprite;\r\n        wasd.walkSprite = walkSprite;\r\n        position.width = 32;\r\n        position.height = 48;\r\n        let multi = 2.4\r\n        position.width *= multi\r\n        position.height *= multi\r\n        return entity;\r\n    }\r\n}", "import { Entity } from '../engine/entity/entity';\r\nimport { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { FightComponent } from '../components/fight-component';\r\nimport { HealthComponent } from '../components/health-component';\r\nimport { NeuralFightComponent } from '../components/neural-fight-component';\r\nimport { AnimationComponent } from '../engine/component/components/animation/animation-component';\r\nimport { EntityRegistration } from '../engine/entity/entity-registration';\r\nimport { GameDependencies } from '../engine/dependencies/game-dependencies';\r\n\r\nexport class VillagerEntity implements EntityRegistration{\r\n    create(gameDependcies: GameDependencies, entity: Entity){\r\n        var animation:AnimationComponent = <AnimationComponent>entity.addComponent(\"animation\");\r\n        var position:PositionComponent = <PositionComponent>entity.addComponent(\"position\");\r\n        var fight:FightComponent = <FightComponent>entity.addComponent(\"fight\");\r\n        var health:HealthComponent = <HealthComponent>entity.addComponent(\"health\");\r\n        var neural:NeuralFightComponent = <NeuralFightComponent>entity.addComponent(\"neural\");\r\n        \r\n        position.width = 70;\r\n        /*animation.setSprite(\"brownpuffgirl\");\r\n        \r\n        position.height = 32;\r\n        let multiplier = 2.5;\r\n        position.height *= multiplier * 1.1;\r\n        position.width *= multiplier;*/\r\n        return entity;\r\n    }\r\n}", "import { Entity } from '../engine/entity/entity';\r\nimport { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { CropComponent } from '../components/crop-component';\r\nimport { AnimationComponent } from '../engine/component/components/animation/animation-component';\r\nimport { EntityRegistration } from '../engine/entity/entity-registration';\r\nimport { GameDependencies } from '../engine/dependencies/game-dependencies';\r\n\r\nexport class CropEntity implements EntityRegistration{\r\n    create(gameDependencies: GameDependencies, entity: Entity): Entity {\r\n        var position:PositionComponent = <PositionComponent>entity.addComponent(\"position\");\r\n        position.width = 100;\r\n        position.height = 100;\r\n        let animation:AnimationComponent = <AnimationComponent>entity.addComponent(\"animation\");\r\n        let crop:CropComponent = <CropComponent>entity.addComponent(\"crop\");\r\n        if(crop.growthSprites.length > 0) {\r\n            animation.setSprite(crop.growthSprites[0]);\r\n        }\r\n        return entity;\r\n    }\r\n}", "import { Entity } from '../engine/entity/entity';\r\nimport { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { TileComponent } from '../components/tile-component/tile-component';\r\nimport { EntityRegistration } from '../engine/entity/entity-registration';\r\nimport { GameDependencies } from '../engine/dependencies/game-dependencies';\r\n\r\nexport class FirstEntity implements EntityRegistration{\r\n    /**\r\n     * this is an empty entity that will always be the first \r\n     * entity in the game.entities array. if a system wants to know if it is being applied \r\n     * to the first entity it can check if it is this entity.\r\n     */\r\n    create(gameDependencies: GameDependencies, entity: Entity): Entity {\r\n        var position:PositionComponent = <PositionComponent>entity.addComponent(\"position\");\r\n        position.y = -9999999;\r\n        var tiles = <TileComponent>entity.addComponent(\"tile\");\r\n        return entity;\r\n    }\r\n}", "import { Entity } from '../engine/entity/entity';\r\nimport { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { AnimationComponent } from '../engine/component/components/animation/animation-component';\r\nimport { EntityRegistration } from '../engine/entity/entity-registration';\r\nimport { GameDependencies } from '../engine/dependencies/game-dependencies';\r\n\r\nexport class ProjectileEntity implements EntityRegistration{\r\n    create(gameDependencies: GameDependencies, entity: Entity): Entity {\r\n        var animation:AnimationComponent = <AnimationComponent>entity.addComponent(\"animation\");\r\n        var position:PositionComponent = <PositionComponent>entity.addComponent(\"position\");\r\n        entity.addComponent(\"projectile\");\r\n        animation.setSprite(\"fireball\");\r\n        return entity;\r\n    }\r\n}", "import { Entity } from \"../engine/entity/entity\";\r\nimport { TextComponent } from \"../components/text-component/text-component\";\r\nimport { EntityRegistration } from \"../engine/entity/entity-registration\";\r\nimport { GameDependencies } from \"../engine/dependencies/game-dependencies\";\r\n\r\nexport class InventoryItemEntity implements EntityRegistration{\r\n    create(gameDependencies: GameDependencies, entity: Entity): Entity {\r\n        entity.addComponent(\"position\");\r\n        entity.addComponent(\"animation\");\r\n        let text:TextComponent = <TextComponent>entity.addComponent(\"text\");\r\n        text.addTextPlacement(\"\", 0, 0);\r\n        return entity;\r\n    }\r\n}", "import { Entity } from \"../../engine/entity/entity\";\r\nimport { EntityRegistration } from \"../../engine/entity/entity-registration\";\r\nimport { GameDependencies } from \"../../engine/dependencies/game-dependencies\";\r\n\r\nexport class ParticleEntity implements EntityRegistration {\r\n    create(gameDependencies: GameDependencies, entity: Entity): Entity {\r\n        let position = entity.addComponent(\"position\");\r\n        entity.addComponent(\"primitive\");\r\n        return entity;\r\n    }\r\n}", "import { PositionComponent } from \"../../engine/component/components/position/position-component\";\r\nimport { GameDependencies } from \"../../engine/dependencies/game-dependencies\";\r\nimport { Entity } from \"../../engine/entity/entity\";\r\nimport { EntityRegistration } from \"../../engine/entity/entity-registration\";\r\n\r\nexport class ParticlesEntity implements EntityRegistration{\r\n    create(gameDependencies: GameDependencies, entity: Entity): Entity {\r\n        let position = <PositionComponent>entity.addComponent(\"position\");\r\n        position.width = 10;\r\n        entity.addComponent(\"particles\");\r\n        return entity;\r\n    }\r\n}", "import { PositionComponent } from \"../engine/component/components/position/position-component\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\nimport { GameEvent } from \"../engine/events/game-event\";\r\nimport { AnimationComponent } from \"../engine/component/components/animation/animation-component\";\r\nimport { GameDependencies } from \"../engine/dependencies/game-dependencies\";\r\nimport { EntityRegistration } from \"../engine/entity/entity-registration\";\r\n\r\nexport class ClickableEntity implements EntityRegistration{\r\n    create(gameDependencies: GameDependencies, entity: Entity): Entity {\r\n        var position:PositionComponent = <PositionComponent>entity.addComponent(\"position\");\r\n        let animation:AnimationComponent = <AnimationComponent>entity.addComponent(\"animation\");\r\n        entity.addComponent(\"click\");\r\n        return entity;\r\n    }\r\n    handleEvents(events: { [key: string]: GameEvent; }): void {\r\n    }\r\n}", "import { Entity } from '../engine/entity/entity';\r\nimport { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { AnimationComponent } from '../engine/component/components/animation/animation-component';\r\nimport { EntityRegistration } from '../engine/entity/entity-registration';\r\nimport { GameDependencies } from '../engine/dependencies/game-dependencies';\r\n\r\nexport class DeerEntity implements EntityRegistration{\r\n    create(gameDependencies: GameDependencies, entity: Entity): Entity {\r\n        var animation:AnimationComponent = <AnimationComponent>entity.addComponent(\"animation\");\r\n        var position:PositionComponent = <PositionComponent>entity.addComponent(\"position\");\r\n        animation.setSprite(\"deer\");\r\n        \r\n        position.width = 110;\r\n        position.height = 110;\r\n        return entity;\r\n    }\r\n}", "import { PositionComponent } from \"../engine/component/components/position/position-component\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\nimport { AnimationComponent } from \"../engine/component/components/animation/animation-component\";\r\nimport { EntityRegistration } from \"../engine/entity/entity-registration\";\r\nimport { GameDependencies } from \"../engine/dependencies/game-dependencies\";\r\n\r\nexport class UIPanelEntity implements EntityRegistration{\r\n    create(gameDependcies: GameDependencies, entity: Entity){\r\n        let animation:AnimationComponent = <AnimationComponent>entity.addComponent(\"animation\");\r\n        var position:PositionComponent = <PositionComponent>entity.addComponent(\"position\");\r\n        position.applyOffsets = false;\r\n        animation.setSprite(\"woodpanelsunken\");\r\n        return entity;\r\n    }\r\n}", "import { AnimationComponent2 } from \"../components/animation-component\";\r\nimport { PositionComponent } from \"../engine/component/components/position/position-component\";\r\nimport { GameDependencies } from \"../engine/dependencies/game-dependencies\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\nimport { EntityRegistration } from \"../engine/entity/entity-registration\";\r\nimport { GenericPositionComponent } from \"../engine/pixi-integration/pixi-components/generic-position-component\";\r\n\r\nexport class WeaponEntity implements EntityRegistration{\r\n    create(gameDependencies: GameDependencies, entity: Entity): Entity {\r\n        const pos = <GenericPositionComponent>entity.addComponent(\"position\");\r\n        const anim = <AnimationComponent2>entity.addComponent(\"animation\");\r\n        anim.setSprite(\"arrowsword\");\r\n        pos.width = 32;\r\n        pos.height = 32;\r\n        pos.width *= 2;\r\n        pos.height *= 2;\r\n        pos.pivotX = 1;\r\n        pos.pivotY = 1;\r\n        pos.anchorX = 1;\r\n        pos.anchorY = 1;\r\n        return entity;\r\n    }\r\n}", "import { PlayerEntity } from \"../entities/player-entity\";\r\nimport { VillagerEntity } from \"../entities/villager-entity\";\r\nimport { CropEntity } from \"../entities/crop-entity\";\r\nimport { FirstEntity } from \"../entities/first-entity\";\r\nimport { ProjectileEntity } from \"../entities/projectile-entity\";\r\nimport { Game } from \"../engine/game\";\r\nimport { InventoryItemEntity } from \"../entities/inventory-item-entity\";\r\nimport { ParticleEntity } from \"../entities/particles/particle-entity\";\r\nimport { ParticlesEntity } from \"../entities/particles/particles-entity\";\r\nimport { ClickableEntity } from \"../entities/clickable-entity\";\r\nimport { DeerEntity } from \"../entities/deer-entity\";\r\nimport { UIPanelEntity } from \"../entities/ui-panel-entity\";\r\nimport { WeaponEntity } from \"../entities/weapon-entity\";\r\n\r\n\r\nexport function buildEntities(game:Game):void{\r\n    game.registerEntity(\"player\", new PlayerEntity());\r\n    game.registerEntity(\"villager\", new VillagerEntity());\r\n    game.registerEntity(\"crop\", new CropEntity());\r\n    game.registerEntity(\"first\", new FirstEntity());\r\n    game.registerEntity(\"projectile\", new ProjectileEntity());\r\n    game.registerEntity(\"inventoryItem\", new InventoryItemEntity());\r\n    game.registerEntity(\"particle\", new ParticleEntity());\r\n    game.registerEntity(\"particles\", new ParticlesEntity());\r\n    game.registerEntity(\"click\", new ClickableEntity());\r\n    game.registerEntity(\"deer\", new DeerEntity());\r\n    game.registerEntity(\"uipanel\", new UIPanelEntity());\r\n    game.registerEntity(\"weapon\", new WeaponEntity());\r\n}", "/**\r\n * add sprites to the game here using the game object's spriteManager\r\n */\r\n\r\nimport { SpriteManager } from \"../engine/renderers/sprite-manager\";\r\nimport { Game } from \"../engine/game\";\r\nimport { ISpriteLoader } from \"../engine/renderers/isprite-loader\";\r\n\r\nexport function populateSpriteManager(spriteManager:ISpriteLoader):ISpriteLoader{\r\n    var sm:ISpriteLoader = spriteManager;\r\n    sm.loadSprite(\"blondDress\", \"blond.png\", 4, 8);\r\n    // sm.loadSprite(\"nothing\", \"blond.png\", 100, 100);\r\n    sm.addAnimation(\"blondDress\", \"nothing\", [18], 10);\r\n    \r\n    sm.loadSprite(\"blond\", \"blondWalk.png\", 4, 2);\r\n    sm.addAnimation(\"blond\", \"blondWalk\", [4,5,6,7], 5);\r\n    sm.addAnimation(\"blond\", \"blond\", [4], 5);\r\n   \r\n    sm.loadSprite(\"fantasySprites\", \"fantasysprites.png\", 12,8);\r\n    sm.addAnimation(\"fantasySprites\", \"redHair\", [24,25,26,25], 6);\r\n\r\n    sm.loadSprite(\"crops\", \"crops.png\", 12, 8);\r\n    sm.addAnimation(\"crops\", \"turnip0\", [0]);\r\n    sm.addAnimation(\"crops\", \"turnip1\", [1]);\r\n    sm.addAnimation(\"crops\", \"turnip2\", [2]);\r\n\r\n    sm.addAnimation(\"crops\", \"corn0\", [30]);\r\n    sm.addAnimation(\"crops\", \"corn1\", [31]);\r\n    sm.addAnimation(\"crops\", \"corn2\", [32]);\r\n    \r\n    sm.addAnimation(\"crops\", \"wheat0\", [33]);\r\n    sm.addAnimation(\"crops\", \"wheat1\", [34]);\r\n    sm.addAnimation(\"crops\", \"wheat2\", [35]);\r\n    \r\n    sm.addAnimation(\"crops\", \"pumpkin0\", [54]);\r\n    sm.addAnimation(\"crops\", \"pumpkin1\", [55]);\r\n    sm.addAnimation(\"crops\", \"pumpkin2\", [56]);\r\n\r\n    sm.loadSprite(\"scrops\", \"scrops.png\", 24, 23);\r\n    sm.addAnimation(\"scrops\", \"onion0\", [0]);\r\n    sm.addAnimation(\"scrops\", \"onion1\", [1]);\r\n    sm.addAnimation(\"scrops\", \"onion2\", [2]);\r\n    sm.addAnimation(\"scrops\", \"onion3\", [3]);\r\n    sm.addAnimation(\"scrops\", \"onion4\", [4]);\r\n    sm.addAnimation(\"scrops\", \"onion5\", [5]);\r\n    sm.addAnimation(\"scrops\", \"onion\", [6]);\r\n\r\n    var cn = 24 * 8 + 18;\r\n    sm.addAnimation(\"scrops\", \"corn\", [cn]);\r\n\r\n    sm.loadSprite(\"victorian\",\"victoriansprites.png\", 12, 8);\r\n    sm.addAnimation(\"victorian\", \"bluecloak\", [24]);\r\n    sm.addAnimation(\"victorian\", \"bluecloakwalk\", [24, 25, 26, 25], 5);\r\n    \r\n    cn = 12 * 6;\r\n    sm.addAnimation(\"victorian\", \"grey\", [cn], 5);\r\n    sm.addAnimation(\"victorian\", \"greyWalk\", [cn, cn+1, cn+2, cn+1], 5);\r\n\r\n    cn = 8*4;\r\n    sm.loadSprite(\"fireball\", \"fireball.png\", 8, 8);\r\n    sm.addAnimation(\"fireball\", \"fireball\", [cn, cn+1,cn+2, cn+3, cn+4, cn+5, cn+6,cn+7])\r\n\r\n    sm.loadSprite(\"tilesetcrops\", \"tilesets/submission_daneeklu/tilesets/plants.png\", 9, 6);\r\n\r\n    cn = 6;\r\n    sm.addAnimation(\"tilesetcrops\", \"tomato0\", [cn + 0]);\r\n    sm.addAnimation(\"tilesetcrops\", \"tomato1\", [cn + 9]);\r\n    sm.addAnimation(\"tilesetcrops\", \"tomato2\", [cn + 18]);\r\n    sm.addAnimation(\"tilesetcrops\", \"tomato3\", [cn + 27]);\r\n    sm.addAnimation(\"tilesetcrops\", \"tomato4\", [cn + 36]);\r\n\r\n    sm.loadSprite(\"arm\", \"arm.png\", 1, 1);\r\n    sm.addAnimation(\"arm\", \"arm0\", [1]);\r\n    \r\n    sm.loadSprite(\"swords\", \"sword-7Soul1.png\", 8, 6);\r\n    sm.addAnimation(\"swords\", \"arrowsword\", [1], 30)\r\n    sm.loadSprite(\"dwarves\", \"fantasysprites/DwarfSprites2.png\", 12, 8);\r\n    sm.addAnimation(\"dwarves\", \"dwarfopeneyes\", [35]);\r\n    sm.addAnimation(\"dwarves\", \"dwarfopeneyesWalk\", [33, 35, 34, 35], 5);\r\n    \r\n    sm.loadSprite(\"goblins\", \"fantasysprites/EnemySpriteSheet1.png\", 12, 8);\r\n    sm.addAnimation(\"goblins\", \"speargoblin\", [35]);\r\n    sm.addAnimation(\"goblins\", \"speargoblinWalk\", [33, 35, 34, 35], 5);\r\n\r\n    sm.loadSprite(\"grass\", \"tilesets/submission_daneeklu/tilesets/grass.png\", 3, 6);\r\n    sm.loadSprite(\"soil\", \"tilesets/submission_daneeklu/tilesets/plowed_soil.png\", 3, 6);\r\n\r\n    sm.loadSprite(\"people3\", \"fantasysprites/PeopleSpriteSheet2.png\", 12, 8);\r\n    sm.addAnimation(\"people3\", \"brownpuffgirl\", [80]);\r\n    sm.addAnimation(\"people3\", \"brownpuffgirlwalk\", [79, 80, 81], 5);\r\n\r\n    /*sm.loadSprite(\"victorian2\", \"BearSprites.webp\", 12, 8);\r\n    sm.addAnimation(\"victorian2\", \"nun\", [79], 5);\r\n    sm.addAnimation(\"victorian2\", \"nunwalk\", [78,79,80, 79], 5);*/\r\n\r\n    sm.loadSprite(\"greg\", \"greg.png\", 2,2);\r\n    sm.addAnimation(\"greg\", \"greg\", [0]);\r\n    sm.addAnimation(\"greg\", \"gregwalk\", [1,0,3,0], 10);\r\n\r\n    sm.loadSprite(\"greyaction\", \"greyactions.png\", 2,2);\r\n    sm.addAnimation(\"greyaction\", \"greythrow\", [0,1,2],5)\r\n\r\n    sm.loadSprite(\"deer\", \"deer/deer male calciumtrice.png\", 5, 5);\r\n    sm.addAnimation(\"deer\", \"deer\", [0,1,2,3,4,5,6,7,8],10)\r\n\r\n    sm.loadSpriteWithDimensions(\"woodpanelui\", \"tilesets/submission_daneeklu/ui/scrollsandblocks.png\", 96, 96, 0, 128);\r\n    // sm.loadSpriteWithDimensions(\"woodpanelui\", \"tilesets/submission_daneeklu/ui/scrollsandblocks.png\", 10,10);\r\n    sm.addAnimation(\"woodpanelui\", \"woodpanelsunken\", [0]);\r\n\r\n    return sm;\r\n}\r\n\r\nexport function buildSprites(game:Game):void{\r\n    populateSpriteManager(game.spriteManager);\r\n}", "import { Component } from '../engine/component/component';\r\nimport { SpriteManager } from '../engine/renderers/sprite-manager';\r\nimport { SpriteAnimation } from '../engine/renderers/sprite-animation';\r\nimport { Entity } from '../engine/entity/entity';\r\nimport { EntityUpdateArgs } from '../engine/entity/entity-update-args';\r\nexport class AnimationComponent2 extends Component {\r\n    constructor(animationName:string, delay:number, spriteManager:SpriteManager){\r\n        super(\"animation\");\r\n        this.delay = delay;\r\n        this.currentDelay = delay;\r\n        this.spriteManager = spriteManager;\r\n        this.setSprite(animationName);\r\n        this.animationName = animationName;\r\n    }\r\n    spriteNumbers:number[];\r\n    animationName:string;\r\n    spriteName:string;\r\n    delay:number;\r\n    frameNum:number=0;\r\n    spriteNum:number=0;\r\n    spriteManager:SpriteManager;\r\n    currentDelay:number;\r\n    filter: ImageData;\r\n    isFiltered:boolean = false;\r\n\r\n    getSpriteNumber(){\r\n        var frameNum = this.frameNum;\r\n        var spriteNum = this.spriteNumbers[frameNum];\r\n        return spriteNum;\r\n    }\r\n\r\n    getRGBs(animationName:string=null, spriteNumber:number = 0, width:number=null, height:number=null,):ImageData{\r\n        if (animationName != null) return this.spriteManager.getRGBs(animationName, spriteNumber, width, height);\r\n        return this.spriteManager.getRGBs(this.animationName, this.getSpriteNumber(), width, height);\r\n    }\r\n    \r\n    setFilter(pixelData: ImageData) {\r\n        this.filter = pixelData;\r\n        this.isFiltered = true;\r\n    }\r\n\r\n    setSprite(animationName:string){\r\n        if(animationName == this.animationName){\r\n            return;\r\n        }\r\n\r\n        this.animationName = animationName;\r\n        var animation:SpriteAnimation = this.spriteManager.getAnimation(animationName);\r\n        if(animation == null){\r\n            console.log(`no animation found: ${animationName}`);\r\n            return;\r\n        }\r\n        this.spriteNumbers = animation.spriteNumbers;\r\n        this.spriteName = animation.spriteName;\r\n        this.delay = animation.delay;\r\n        this.frameNum = 0;\r\n    }\r\n\r\n    setSpriteNumber(spriteName:string, spriteNumber:number){\r\n        this.spriteNumbers = [spriteNumber];\r\n        this.spriteName = spriteName;\r\n        this.delay = 100;\r\n        this.frameNum = 0\r\n    }\r\n\r\n    update(entity:Entity, args:EntityUpdateArgs):void{\r\n        const framesPassed = args.fullFramePassed;\r\n        if (framesPassed == 0)return;\r\n        if(this.currentDelay == 0){\r\n            this.frameNum += framesPassed;\r\n            this.frameNum %= this.spriteNumbers.length;\r\n            this.spriteNum = this.getSpriteNumber();\r\n            this.currentDelay = this.delay;\r\n        } else {\r\n            this.currentDelay--;\r\n        }\r\n    }\r\n\r\n    static create():AnimationComponent2{\r\n        var spriteManager:SpriteManager = SpriteManager.singeltonCreate();\r\n        // var spriteManager:SpriteManager = createSpriteManager();\r\n        var ac:AnimationComponent2 = new AnimationComponent2(\"blond\", 2, spriteManager);\r\n        return ac;\r\n    }\r\n}", "import { Component } from \"../engine/component/component\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\n\r\nexport class DashComponent extends Component\r\n{\r\n    update(entity: Entity): void {\r\n        \r\n    }\r\n}", "export class GiveItemEventData{\r\n    constructor(itemName:string, quantity:number){\r\n        this.itemName=itemName;\r\n        this.quantity = quantity;\r\n    }\r\n    itemName:string;\r\n    quantity:number;\r\n}", "import { Component } from \"../engine/component/component\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\n\r\nexport class LinesComponent extends Component {\r\n    constructor(){\r\n        super(\"lines\");\r\n    }\r\n    targetIds: number[]\r\n    update(entity: Entity): void {\r\n    }\r\n}", "import { GameDependencies } from \"../dependencies/game-dependencies\";\r\nimport { Component } from \"./component\";\r\n\r\nexport class ComponentFactory {\r\n    static dependencies: GameDependencies;\r\n    constructor(gameDependencies:GameDependencies){\r\n        this.gameDependencies = gameDependencies;\r\n    }\r\n    gameDependencies:GameDependencies;\r\n    componentTypes:{[key:string]:any}={};\r\n    registerComponent(ComponentClass:any){\r\n        if (!(ComponentClass.prototype instanceof Component)){\r\n            console.log(\"component \" + obj.componentName + \" must extend class Component to be registered\");\r\n        }\r\n        if (ComponentClass.componentName != null){\r\n            this.componentTypes[ComponentClass.componentName] = ComponentClass;\r\n            return;\r\n        }\r\n        var obj = ComponentClass.create(this.gameDependencies);\r\n        this.componentTypes[obj.componentName] = ComponentClass;\r\n    }\r\n\r\n    createComponent(componentName:string, entityId:number){\r\n        if (!(componentName in this.componentTypes)){\r\n            throw \"component \"+componentName+\" not registered in componentFactory\";\r\n        }\r\n        return this.componentTypes[componentName].create(this.gameDependencies, entityId);\r\n    }\r\n\r\n    static create(gameDependencies:GameDependencies):ComponentFactory{\r\n        this.dependencies = gameDependencies;\r\n        var cf:ComponentFactory = new ComponentFactory(gameDependencies);\r\n        return cf;\r\n    }\r\n}", "import { Component } from \"../../component\";\r\nimport { Entity } from \"../../../entity/entity\";\r\nimport { PositionComponent } from \"../position/position-component\";\r\nimport { OperationCanceledException } from \"../../../../../node_modules/typescript/lib/typescript\";\r\n\r\nexport class EffectComponent extends Component\r\n{\r\n    targets: Entity[]=[]\r\n    addTarget(targetEntity: Entity){\r\n        let position = <PositionComponent>targetEntity.getComponent(\"position\", true);\r\n        if (position == null) throw \"Effect Component target needs a position component\";\r\n        this.targets.push(targetEntity);\r\n    }\r\n    update(entity: Entity): void {\r\n    }\r\n}\r\n\r\nenum EffectType{\r\n    line\r\n}", "import { IPositionComponent } from \"../component/components/position/iposition-component\";\r\nimport { PositionComponent } from \"../component/components/position/position-component\";\r\nimport { GenericPositionComponent } from \"../pixi-integration/pixi-components/generic-position-component\";\r\nimport { ICameras } from \"./icameras\";\r\n\r\nexport class GenericCameras implements ICameras {\r\n    center: IPositionComponent;\r\n    halfWindowWidth:number = window.innerWidth/2;\r\n    halfWindowHeight:number = window.innerHeight/2;\r\n    private getOffsetX(){\r\n        return (this.center?.x??0) - this.halfWindowWidth;\r\n    }\r\n    private getOffsetY(){\r\n        return (this.center?.y??0) - this.halfWindowHeight;\r\n    }\r\n    transformX(x:number){\r\n        return x - this.getOffsetX();\r\n    }\r\n    transformY(y:number){\r\n        return y - this.getOffsetY();\r\n    }\r\n    untransformX(x:number){\r\n        return x + ((this.center?.x??0) - this.halfWindowWidth);\r\n    }\r\n    untransformY(y:number){\r\n        return y + ((this.center?.y??0) - this.halfWindowHeight);\r\n    }\r\n    setMainCamera(positionComponent: IPositionComponent): void {\r\n        this.center = positionComponent;\r\n    }\r\n    public static create():GenericCameras{\r\n        return new GenericCameras();\r\n    }\r\n}", "import { ComponentFactory } from '../component/component-factory';\r\nimport { Component } from '../component/component';\r\nimport { GameEvent } from '../events/game-event';\r\nimport { EntityUpdateArgs } from './entity-update-args';\r\nimport { GameDependencies } from '../dependencies/game-dependencies';\r\n\r\nexport class Entity {\r\n    constructor(componentFactory:ComponentFactory){\r\n        this.componentFactory = componentFactory;\r\n        Entity.id++\r\n        this.id = Entity.id;\r\n    }\r\n    static id:number=-1;\r\n    id:number=-1;\r\n    components:Component[] = [];\r\n    componentNameToComponent:{[key:string]:Component} = {};\r\n    componentFactory:ComponentFactory;\r\n    targetedEvents:GameEvent[] = [];\r\n    delayedEvents:GameEvent[] = [];\r\n    destroyed:boolean = false;\r\n\r\n    addComponent(componentName:string):Component{\r\n        var component:Component = this.componentFactory.createComponent(componentName, this.id);\r\n        this.componentNameToComponent[component.componentName] = component;\r\n        this.components.push(component);\r\n        return component;\r\n    }\r\n\r\n    getComponent(componentName:string, allowUndefined:boolean=false):Component{\r\n        return this.componentNameToComponent[componentName];\r\n    }\r\n\r\n    emit(event:GameEvent, delayed=false){\r\n        if(delayed){\r\n            this.delayedEvents.push(event);\r\n        } else {\r\n            this.targetedEvents.push(event);\r\n        }\r\n    }\r\n\r\n    update(args:EntityUpdateArgs){\r\n        for(var i:number=0;i<this.components.length;i++){\r\n            this.components[i].update(this, args);\r\n        }\r\n    }\r\n\r\n    handleEvents(events:{[key:string]:GameEvent}):void {};\r\n    public static create(gameDependcies:GameDependencies){\r\n        gameDependcies.checkDependency(gameDependcies.componentFactory);\r\n        const cf = gameDependcies.componentFactory;\r\n        return new Entity(cf);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/*\r\nexport class PlayerEntity extends Entity{\r\n    constructor(componentFactory:ComponentFactory){\r\n        super(componentFactory);\r\n        this.addComponent(\"animation\");\r\n        this.addComponent(\"position\");\r\n    }\r\n    static create():PlayerEntity{\r\n        var entity = new PlayerEntity(ComponentFactory.create());\r\n        return entity;\r\n    }\r\n}*/", "import { Entity } from './entity';\r\nimport { ComponentFactory } from '../component/component-factory';\r\nimport { Component } from '../component/component';\r\nimport { GameDependencies } from '../dependencies/game-dependencies';\r\nimport { EntityRegistration } from './entity-registration';\r\n\r\nexport class EntityFactory {\r\n    constructor(gameDependencies:GameDependencies){\r\n        gameDependencies.checkDependency(gameDependencies.componentFactory);\r\n        this.componentFactory = gameDependencies.componentFactory;\r\n        this.dependencies = gameDependencies;\r\n    }\r\n    dependencies: GameDependencies;\r\n    entityTypes:{[key:string]:EntityRegistration}={};\r\n    componentFactory:ComponentFactory;\r\n\r\n    registerEntity(componentName:string, EntityClass:EntityRegistration){\r\n        this.entityTypes[componentName] = EntityClass;\r\n    }\r\n\r\n    registerComponent(componentClass:any){\r\n        this.componentFactory.registerComponent(componentClass);\r\n    }\r\n\r\n    create(entityName:string){\r\n        let entityClass = this.entityTypes[entityName];\r\n        const entity = Entity.create(this.dependencies);\r\n        return this.entityTypes[entityName].create(this.dependencies, entity);\r\n    }\r\n\r\n    static create(gameDependencies:GameDependencies):EntityFactory{\r\n        let ef:EntityFactory = new EntityFactory(gameDependencies);\r\n        return ef;\r\n    }\r\n}", "export class EntityUpdateArgs{\r\n    delta: number;\r\n    fullFramePassed:number;\r\n}", "\r\nexport enum EventType {\r\n    wDown,\r\n    aDown,\r\n    sDown,\r\n    dDown,\r\n\r\n    wUp,\r\n    aUp,\r\n    sUp,\r\n    dUp,\r\n\r\n    spaceDown,\r\n    spaceUp,\r\n\r\n    iUp,\r\n    iDown,\r\n\r\n    pDown,\r\n    pUp,\r\n\r\n    fDown,\r\n    fUp,\r\n\r\n    jUp,\r\n    kUp,\r\n    lUp,\r\n    hUp,\r\n    semicolonUp,\r\n    tildUp,\r\n\r\n    jDown,\r\n    kDown,\r\n    lDown,\r\n    hDown,\r\n    semicolonDown,\r\n    tildDown,\r\n\r\n    mouseUp,\r\n    mouseDown,\r\n\r\n    collision,\r\n    fireProjectile,\r\n\r\n    inflictDamage,\r\n\r\n    changeVelocity,\r\n\r\n    giveItem,\r\n\r\n    dash,\r\n    entityMoved,\r\n    touchStart,\r\n    touchEnd,\r\n    touchMove\r\n}", "import { EventType } from \"./EventType\";\r\n\r\nexport class GameEvent {\r\n    constructor(eventName:EventType, eventData:{}, componentTarget:string=null){\r\n        this.eventName = eventName;\r\n        this.eventData = eventData;\r\n        this.eventDescription = EventType[eventName];\r\n    }\r\n    eventName:EventType;\r\n    eventDescription:string;\r\n    eventData:any;\r\n    componentTarget:string;\r\n\r\n    static create(eventName:EventType, eventData:{}=null):GameEvent{\r\n        var ge:GameEvent = new GameEvent(eventName, eventData);\r\n        return ge;\r\n    }\r\n}", "import { EventType } from \"./EventType\";\r\n\r\nexport class KeyEvents\r\n{\r\n    downKey: EventType;\r\n    upKey: EventType;\r\n    keyCode: number;\r\n    constructor(downKey:EventType, upKey:EventType, keyCode:number){\r\n        this.downKey = downKey;\r\n        this.upKey = upKey;\r\n        this.keyCode = keyCode;\r\n    }\r\n    public static create(controlEvent:EventType, controlReleaseEvent:EventType, controlKeyNumber:number){\r\n        return new KeyEvents(controlEvent, controlReleaseEvent, controlKeyNumber);\r\n    }\r\n}\r\n\r\nfunction getKeyEvents()\r\n{\r\n    let results = []\r\n    results.push(KeyEvents.create(EventType.wDown, EventType.wUp, 87));\r\n    results.push(KeyEvents.create(EventType.aDown, EventType.aUp, 65));\r\n    results.push(KeyEvents.create(EventType.sDown, EventType.sUp, 83));\r\n    results.push(KeyEvents.create(EventType.dDown, EventType.dUp, 68));\r\n    results.push(KeyEvents.create(EventType.spaceDown, EventType.spaceUp, 32));\r\n    results.push(KeyEvents.create(EventType.pDown, EventType.pUp, 80));\r\n    results.push(KeyEvents.create(EventType.iDown, EventType.iUp, 73));\r\n    results.push(KeyEvents.create(EventType.fDown, EventType.fUp, 70));\r\n    results.push(KeyEvents.create(EventType.jDown, EventType.jUp, 74));\r\n    results.push(KeyEvents.create(EventType.kDown, EventType.kUp, 75));\r\n    results.push(KeyEvents.create(EventType.lDown, EventType.lUp, 76));\r\n    results.push(KeyEvents.create(EventType.semicolonDown, EventType.semicolonDown, 186));\r\n    results.push(KeyEvents.create(EventType.tildDown, EventType.tildUp, 192));\r\n    return results;\r\n}\r\n\r\nexport let keyEvents = getKeyEvents();", "import { GameEvent } from \"./game-event\";\r\nimport { EventType } from \"./EventType\";\r\nimport { keyEvents } from \"./key-events\";\r\n\r\nexport class EventManager {\r\n    constructor(){\r\n        this.keys = this.createKeyListener();\r\n    }\r\n\r\n    keys:boolean[] = Array(1000);\r\n    keysReleased:boolean[] = Array(1000);\r\n    //events:{[key:string]:GameEvent[]} = {};\r\n    events:GameEvent[] = [];\r\n    callbacks:{[key:string]:((event:GameEvent)=>void)[]} = {};\r\n    touch:any = {}\r\n\r\n\r\n    createKeyListener(){\r\n        var keys:boolean[] = Array(1000);\r\n        window.addEventListener(\"keydown\", function(e){\r\n            keys[e.keyCode] = true;\r\n        })\r\n        window.addEventListener(\"keyup\", function(e){\r\n            keys[e.keyCode] = false;\r\n            //console.log(e.keyCode)\r\n        })\r\n        let canvas = document.getElementById(\"canvas\");\r\n        window.addEventListener(\"mouseup\", (e)=>{\r\n            const rect = canvas.getBoundingClientRect()\r\n            const x = e.clientX - rect.left\r\n            const y = e.clientY - rect.top\r\n            console.log(\"x: \" + x + \" y: \" + y)\r\n            this.emit(EventType.mouseUp, {x,y});\r\n        })\r\n        window.addEventListener(\"touchstart\", (e)=>{\r\n            const rect = canvas.getBoundingClientRect()\r\n            const x = e.touches[0].clientX - rect.left\r\n            const y = e.touches[0].clientY - rect.top\r\n            this.emit(EventType.touchStart,{\r\n                x:x,\r\n                y:y\r\n            });\r\n        });\r\n        window.addEventListener(\"touchend\", (e)=>{\r\n            const rect = canvas.getBoundingClientRect()\r\n            const x = e.changedTouches[0].clientX - rect.left\r\n            const y = e.changedTouches[0].clientY - rect.top\r\n            this.emit(EventType.touchEnd,{\r\n                x:x,\r\n                y:y\r\n            });\r\n        });\r\n        window.addEventListener(\"touchmove\", (e)=>{\r\n            const rect = canvas.getBoundingClientRect()\r\n            const x = e.touches[0].clientX - rect.left\r\n            const y = e.touches[0].clientY - rect.top\r\n            this.emit(EventType.touchMove,{\r\n                x:x,\r\n                y:y\r\n            });\r\n\r\n        });\r\n        return keys;\r\n    }\r\n\r\n    update(){\r\n        // this.events = [];\r\n        for(var i:number=0;i<keyEvents.length;i++){\r\n            let keyEvent = keyEvents[i];\r\n            if(this.keys[keyEvent.keyCode]){\r\n                //emit key down event\r\n                this.emit(keyEvent.downKey);\r\n                this.keysReleased[keyEvent.keyCode] = true;\r\n            } else {\r\n                if(this.keysReleased[keyEvent.keyCode]){\r\n                    //emit key up event\r\n                    this.emit(keyEvent.upKey);\r\n                    this.keysReleased[keyEvent.keyCode] = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    emit(eventName:EventType, eventData:{}={}){\r\n        var ge:GameEvent = new GameEvent(eventName, eventData);\r\n        this.events.push(ge);\r\n    }\r\n\r\n    fireCallbacks(){\r\n        //used with addListener\r\n        //unused currently\r\n        var events:GameEvent[];\r\n        var callbacks:((event:GameEvent)=>void)[];\r\n        for (let i=0;i<this.events.length;i++){\r\n            let event = this.events[i];\r\n            //get listener callbacks listening to this event\r\n            if (!(event.eventName in this.callbacks)) continue;\r\n            callbacks = this.callbacks[event.eventName];\r\n            callbacks.forEach((callback)=>{\r\n                callback(event);\r\n            })\r\n        }\r\n        this.events = [];\r\n    }\r\n\r\n    addListener(eventName:EventType, callback:(event:GameEvent)=>void){\r\n        //used with fireCallbacks\r\n        //unused currently\r\n        if (!(eventName in this.callbacks)){\r\n            this.callbacks[eventName] = [];\r\n        }\r\n        this.callbacks[eventName].push(callback);\r\n    }\r\n\r\n    \r\n    createEvent(eventName:EventType){\r\n        if(eventName in this.events)return;\r\n        this.events = [];\r\n        this.callbacks[eventName] = [];\r\n    }\r\n\r\n    static create(){\r\n        var em:EventManager = new EventManager();\r\n        em.createEvent(EventType.wDown);\r\n        em.createEvent(EventType.aDown);\r\n        em.createEvent(EventType.sDown);\r\n        em.createEvent(EventType.dDown);\r\n        return em;\r\n    }\r\n}", "import { SpriteManager} from \"../../sprite-manager\";\r\nimport { HtmlRectSprite } from \"./html-rect-sprite\";\r\nimport { Renderer } from \"../../render\";\r\nimport { RenderOptions } from \"../../render-options\";\r\nimport { SpriteAnimation } from \"../../sprite-animation\";\r\nimport { HtmlCanvas } from \"./html-canvas\";\r\nimport { Sprite } from \"../../sprite\";\r\n\r\nexport class HtmlRenderer implements Renderer {\r\n    canvas:HTMLCanvasElement;\r\n    ctx:CanvasRenderingContext2D;\r\n    public readonly offset:number[];\r\n    public spriteManager:SpriteManager;\r\n    // offScreenCanvas: OffscreenCanvas;\r\n    constructor(context:HtmlCanvas, spriteManager:SpriteManager){\r\n        this.canvas = context.canvas;\r\n        // this.offScreenCanvas = new OffscreenCanvas(this.canvas.width, this.canvas.height);\r\n        this.ctx = context.ctx;\r\n        this.spriteManager = spriteManager;\r\n        this.offset = [0, 0];\r\n        this.ctx.font = \"30px Arial\";\r\n    }\r\n    getOffset(): number[] {\r\n        return this.offset;\r\n    }\r\n    \r\n    setOffset(offset:number[]){\r\n        if(offset.length>2){\r\n            console.log(\"warning incorrect number of offsets\");\r\n            return;\r\n        }\r\n        this.offset[0] = offset[0] - this.canvas.width/2;\r\n        this.offset[1] = offset[1] - this.canvas.height/2;\r\n    }\r\n\r\n    cbox(){\r\n        this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);\r\n        // this.ctx.fillStyle = \"#00ffff\";\r\n        // this.ctx.fillStyle = \"#7CFC00\";\r\n        // this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height);\r\n    }\r\n    \r\n    spriteFilter(filter: ImageData, x: number, y: number, width: number, height: number, spriteNumber: number, options: RenderOptions): void {\r\n        let flip:boolean = options.flip;\r\n        // let sprite:Sprite = <Sprite>this.spriteManager.getSprite(spriteName);\r\n        x = x - width/2;//draw at middle of sprite\r\n        y = y - height;//draw at bottom of sprite\r\n        if (options.applyOffsets){\r\n            x -= this.offset[0]; //offset all drawings to the left\r\n            y -= this.offset[1];\r\n        }\r\n        let flipTranslation:number = 2*(x+width/2);\r\n        if(flip){\r\n            this.ctx.translate(flipTranslation, 0);\r\n            this.ctx.scale(-1,1);\r\n        }\r\n        if(options.rotate){\r\n            this.ctx.rotate(options.rotate);\r\n        }\r\n\r\n        let canvas = document.createElement(\"canvas\");\r\n        canvas.width = filter.width;\r\n        canvas.height = filter.height;\r\n        let context = canvas.getContext(\"2d\");\r\n        context.putImageData(filter, 0, 0);\r\n        this.ctx.drawImage(canvas, 0, 0, filter.width, filter.height, x, y , width, height);\r\n\r\n        if(options.rotate){\r\n            this.ctx.rotate(-options.rotate);\r\n        }\r\n        if (flip){\r\n            this.ctx.scale(-1,1);\r\n            this.ctx.translate(-flipTranslation,0);\r\n        }\r\n    }\r\n\r\n    sprite(spriteName:string, x:number, y:number, width:number, height:number, spriteNumber:number, options:RenderOptions):void{\r\n        let flip:boolean = options.flip;\r\n        let sprite:Sprite = <Sprite>this.spriteManager.getSprite(spriteName);\r\n        let fc = sprite.frameCoords(spriteNumber);\r\n        x = x - width/2;//draw at middle of sprite\r\n        y = y - height;//draw at bottom of sprite\r\n        if (options.applyOffsets){\r\n            x -= this.offset[0]; //offset all drawings to the left\r\n            y -= this.offset[1];\r\n        }\r\n        let flipTranslation:number = 2*(x+width/2);\r\n        if(flip){\r\n            this.ctx.translate(flipTranslation, 0);\r\n            this.ctx.scale(-1,1);\r\n        }\r\n        if(options.rotate){\r\n            this.ctx.rotate(options.rotate);\r\n        }\r\n        if (x+width > -100 && x < this.canvas.width && y+height > -100 && (y-height)<this.canvas.height)\r\n        {\r\n            sprite.drawImage(spriteNumber, x, y, width, height);\r\n        }\r\n\r\n        if(options.rotate){\r\n            this.ctx.rotate(-options.rotate);\r\n        }\r\n        if (flip){\r\n            this.ctx.scale(-1,1);\r\n            this.ctx.translate(-flipTranslation,0);\r\n        }\r\n    }\r\n\r\n    text(text:string, x:number, y:number, size:number=10):void{\r\n        x -= this.offset[0]; //offset all drawings to the left\r\n        y -= this.offset[1];\r\n        this.ctx.fillText(text, x, y);\r\n    }\r\n\r\n    circle(x: number, y: number, r: number): void {\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = \"#690055\";\r\n        // this.ctx.fillStyle = \"black\";\r\n        this.ctx.globalAlpha = .6;\r\n        this.ctx.arc(x - this.offset[0], y - this.offset[1], r*2, 0, 2 * Math.PI);\r\n        this.ctx.fill();\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = \"black\";\r\n        // this.ctx.fillStyle = \"#690055\";\r\n        this.ctx.globalAlpha = 1;\r\n        this.ctx.arc(x - this.offset[0], y - this.offset[1], r*1, 0, 2 * Math.PI);\r\n        this.ctx.fill();\r\n        this.ctx.globalAlpha = 1;\r\n        // this.ctx.stroke();\r\n    }\r\n\r\n    line(x1: number, y1: number, x2: number, y2: number): void {\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x1, y1);\r\n        this.ctx.lineTo(x2, y2);\r\n        this.ctx.stroke();\r\n    }\r\n\r\n    static create():HtmlRenderer{\r\n        let canvas = HtmlCanvas.createSingleton();\r\n        var spriteManager:SpriteManager = SpriteManager.singeltonCreate();\r\n        //var spriteManager:SpriteManager = createSpriteManager();\r\n        return new HtmlRenderer(canvas, spriteManager);\r\n    }\r\n}", "import { Entity } from \"../entity/entity\";\r\nimport { EventManager } from \"../events/event-manager\";\r\n\r\nexport class SystemArgs{\r\n    entity:Entity;\r\n    eventManager:EventManager;\r\n    delta:number;\r\n    fullFramesPassed:number;\r\n}", "import { Entity } from './entity/entity';\r\nimport { EntityFactory } from './entity/entity-factory';\r\nimport { EntitySystem } from './system/system';\r\nimport { EventManager } from './events/event-manager';\r\nimport { Renderer } from './renderers/render';\r\nimport { HtmlRenderer } from './renderers/implementations/html/html-renderer';\r\nimport { SpriteManager } from './renderers/sprite-manager';\r\nimport { PositionComponent } from './component/components/position/position-component';\r\nimport { SystemArgs } from './system/system-args';\r\nimport { EntityUpdateArgs } from './entity/entity-update-args';\r\nimport { PhaserGame } from './phaser-integration/phaser-game';\r\nimport { ISpriteLoader } from './renderers/isprite-loader';\r\nimport { GameDependencies } from './dependencies/game-dependencies';\r\nimport { ComponentFactory } from './component/component-factory';\r\nimport { GenericCameras } from './dependencies/generic-cameras';\r\nimport { EntityRegistration } from './entity/entity-registration';\r\n\r\nexport class Game {\r\n    spriteManager: any;\r\n    newTime: number;\r\n    constructor(entityFactory:EntityFactory, renderer:Renderer, eventManager:EventManager, gameDependencies:GameDependencies){\r\n        this.entityFactory = entityFactory;\r\n        this.renderer = renderer;\r\n        this.eventManager = eventManager;\r\n        this.gameDependencies = gameDependencies;\r\n        this.spriteManager = gameDependencies.spriteManager;\r\n    }\r\n\r\n    static create():Game{\r\n        const renderer = HtmlRenderer.create();\r\n        const deps = new GameDependencies();\r\n        deps.renderer = renderer;\r\n        deps.eventManager = EventManager.create();\r\n        deps.componentFactory = ComponentFactory.create(deps);\r\n        deps.entityFactory = EntityFactory.create(deps);\r\n        deps.spriteManager = deps.renderer.spriteManager;\r\n        deps.cameras = GenericCameras.create();\r\n        var game = new Game(deps.entityFactory, deps.renderer, EventManager.create(), deps);\r\n        return game;\r\n    }\r\n    \r\n    static createCustom(dependencies:GameDependencies):Game{\r\n        var game = new Game(dependencies.entityFactory, dependencies.renderer, dependencies.eventManager, dependencies);\r\n        dependencies.game = game;\r\n        return game;\r\n    }\r\n    private starters:((games:Game)=>void)[] = [];\r\n    private _entities:Entity[] = [];\r\n    get entities():Entity[]{\r\n        return this._entities;\r\n    }\r\n    set entities(entities:Entity[]){\r\n        //console.log(entities)\r\n        this._entities = entities;\r\n    }\r\n    //entitiesX:Entity[] = [];\r\n    entityFactory:EntityFactory;\r\n    systems:EntitySystem[] = [];\r\n    systemsWithOncePerTurnUpdate:EntitySystem[] = [];\r\n    renderer:Renderer;\r\n    eventManager:EventManager;\r\n    intervalId:number;\r\n    gameDependencies: GameDependencies;\r\n    performance: number;\r\n    frameTime: number;\r\n    targetFps: number = 60;\r\n    counter: number = 0;\r\n    lastTime = performance.now();\r\n    frameTracker:number = 0;\r\n    phaserGame:PhaserGame;\r\n    update(delta:number, framesPassed:number){\r\n        // this.renderer.cbox();\r\n        this.eventManager.update();\r\n        for (let i=0;i<this.systemsWithOncePerTurnUpdate.length;i++){\r\n            const args = new SystemArgs();\r\n            args.entity = this.entities[0];\r\n            args.eventManager = this.eventManager;\r\n            args.fullFramesPassed = framesPassed;\r\n            this.systemsWithOncePerTurnUpdate[i].oncePerLoop(args);\r\n        }\r\n        for(var i=0;i<this.entities.length;i++){\r\n            const args = new EntityUpdateArgs();\r\n            args.delta = delta;\r\n            args.fullFramePassed = framesPassed;\r\n            this.entities[i].update(args);\r\n            for(var systemi=0;systemi<this.systems.length;systemi++){\r\n                const args = new SystemArgs();\r\n                args.entity = this.entities[i];\r\n                args.eventManager = this.eventManager;\r\n                args.fullFramesPassed = framesPassed;\r\n                this.systems[systemi].apply(args);\r\n            }\r\n        }\r\n        var numEvents:number;\r\n        for(var i=0;i<this.entities.length;i++){\r\n            for(var systemi=0;systemi<this.systems.length;systemi++){\r\n                this.systems[systemi].applyEvents(this.entities[i], this.eventManager);\r\n            }\r\n            this.entities[i].targetedEvents = this.entities[i].delayedEvents;\r\n            this.entities[i].delayedEvents = [];\r\n        }\r\n        \r\n        this.eventManager.fireCallbacks();\r\n        \r\n        this.entities.sort(function(a:Entity,b:Entity){\r\n            var pa:PositionComponent = <PositionComponent>a.getComponent(\"position\");\r\n            var pb:PositionComponent = <PositionComponent>b.getComponent(\"position\");\r\n            return pa.y - pb.y;\r\n        });\r\n        this.cleanDestroyedEntities();\r\n        this.renderer.text(Math.floor(this.frameTime).toString(),0,0, 1000);\r\n        this.counter = (this.counter + 1)%100;\r\n    }\r\n    step(delta:number){\r\n        this.newTime = performance.now();\r\n        this.performance = performance.now();\r\n        delta = delta/(1000/this.targetFps);\r\n        // console.log(delta);\r\n        this.frameTracker += delta;\r\n        if (this.frameTracker > 1){\r\n            this.update(delta, Math.floor(this.frameTracker));\r\n            this.frameTracker = 0;\r\n        } else {\r\n            this.update(delta, 0);\r\n        }\r\n        this.frameTime = performance.now() - this.performance;\r\n    }\r\n    private loop(time:number){\r\n        const delta = (time - this.lastTime)/(1000/this.targetFps);\r\n        this.step(delta);\r\n        this.lastTime = time;\r\n        window.requestAnimationFrame((time)=>{this.loop(time)});\r\n    }\r\n    start():number{\r\n        if (this.starters.length > 0){\r\n            console.log(\"starting game custom\");\r\n            this.starters.forEach((starter)=>{\r\n                starter(this);\r\n            });\r\n            return;\r\n        }\r\n        console.log(\"starting game loop with requestAnimationFrame\");\r\n        window.requestAnimationFrame(()=>{\r\n            this.loop(this.lastTime);\r\n        });\r\n        return 0;\r\n    }\r\n\r\n    stop(){\r\n        clearInterval(this.intervalId);\r\n    }\r\n\r\n    addStarter(starterFunc:(game:Game)=>void){\r\n        this.starters.push(starterFunc);\r\n    }\r\n\r\n    addEntity(entityName:string){\r\n        var entity:Entity = this.entityFactory.create(entityName);\r\n        this.entities.push(entity);\r\n        //this.entitiesX.push(entity);\r\n        return entity;\r\n    }\r\n\r\n    getById(entityId:number):Entity{\r\n        var entity:Entity;\r\n        for(var i=0;i<this.entities.length;i++){\r\n            entity = this.entities[i];\r\n            if(entityId == entity.id)return entity\r\n        }\r\n        return null;\r\n    }\r\n\r\n    destroy(entity:Entity){\r\n        entity.destroyed = true;\r\n    }\r\n\r\n    cleanDestroyedEntities(){\r\n        if(this.entities.filter((entity)=>entity.destroyed).length == 0)return;\r\n        let newEntities:Entity[] = [];\r\n        for(let i:number=0;i<this.entities.length;i++){\r\n            if(!this.entities[i].destroyed){\r\n                newEntities.push(this.entities[i]);\r\n            } else {\r\n                delete this.entities[i];\r\n            }\r\n        }\r\n        delete this.entities;\r\n        this.entities = newEntities;\r\n    }\r\n\r\n    addSystem(system:EntitySystem):void{\r\n        this.systems.push(system);\r\n        if (system.oncePerLoop == null)return;\r\n        this.systemsWithOncePerTurnUpdate.push(system);\r\n    }\r\n\r\n    registerEntity(entityName:string, EntityClass:EntityRegistration):void{\r\n        this.entityFactory.registerEntity(entityName, EntityClass);\r\n    }\r\n\r\n    registerComponent(EntityClass:any):void{\r\n        this.entityFactory.registerComponent(EntityClass);\r\n    }\r\n}", "import { Scene } from \"phaser\";\r\nexport class MainScene extends Scene {\r\n    constructor(){\r\n        super({key:\"main\"})\r\n    }\r\n    private updater: (delta:number)=>void = ()=>{};\r\n    private creators: ((scene:Scene)=>void)[] = [];\r\n    private loaders: ((scene:Scene)=>void)[] = [];\r\n    setUpdater(updateFunction:(delta:number)=>void){\r\n        this.updater = updateFunction;\r\n    }\r\n    addCreator(creator:(scene:Phaser.Scene)=>void){\r\n        this.creators.push(creator);\r\n    }\r\n    addPreloader(loader:(scene:Phaser.Scene)=>void){\r\n        this.loaders.push(loader);\r\n    }\r\n    preload(){\r\n        console.log(\"loading \" + this.loaders.length);\r\n        this.loaders.forEach((loader)=>{\r\n            loader(this)}\r\n        );\r\n    }\r\n    create(){\r\n        console.log(`creating main scene with ${this.creators.length} creators`);\r\n        this.creators.forEach((creator)=>{creator(this)});\r\n    }\r\n    update(time: number, delta: number): void {\r\n        this.updater(delta);\r\n    }\r\n}", "import * as Phaser from \"phaser\";\r\nimport { MainScene } from \"./main-scene\";\r\n\r\n\r\nexport class PhaserGame {\r\n    constructor(){\r\n        this.config = {\r\n            type: Phaser.WEBGL,\r\n            width:window.innerWidth,\r\n            height:window.innerHeight,\r\n            scene: MainScene,\r\n            fps: {\r\n                target:60,\r\n                forceSetTimeOut: true\r\n            },\r\n            physics: {\r\n                default:\"arcade\",\r\n                arcade: {\r\n                },\r\n                matter:{\r\n                    gravity:false,\r\n                    debug: {\r\n                        showBody: true,\r\n                        showStaticBody: true\r\n                    }\r\n                },\r\n            }\r\n        }\r\n    }\r\n    config:Phaser.Types.Core.GameConfig;\r\n    game: Phaser.Game;\r\n    mainScene: MainScene = new MainScene();\r\n\r\n    public start(){\r\n        this.game = new Phaser.Game(this.config);\r\n        this.mainScene.addCreator((scene)=>{\r\n            console.log(\"creator for canvas\");\r\n            const canvas:HTMLCanvasElement = <HTMLCanvasElement>this.game.canvas;\r\n            canvas.style.margin = \"0\";\r\n            canvas.style.padding = \"0\";\r\n            canvas.style.overflow = \"hidden\";\r\n            canvas.style.position = \"fixed\";\r\n            canvas.style.top = \"0px\";\r\n            canvas.style.left = \"0px\";\r\n        });\r\n        this.game.scene.add(\"mainReal\", this.mainScene);\r\n        this.game.scene.switch(\"main\", \"mainReal\");\r\n    }\r\n\r\n    setUpdater(updater:(delta:number)=>void){\r\n        this.mainScene.setUpdater(updater);\r\n    }\r\n\r\n    private static phaserGame:PhaserGame = null; \r\n\r\n    public static createSingleton(){\r\n        if (PhaserGame.phaserGame == null){\r\n            PhaserGame.phaserGame = new PhaserGame();\r\n        }\r\n        return PhaserGame.phaserGame;\r\n    }\r\n}", "export const metadata:any = {\"sprites/arm.png\":{\"height\":32,\"width\":32,\"type\":\"png\"},\"sprites/BearSprites.webp\":{\"height\":384,\"width\":384,\"type\":\"webp\"},\"sprites/blond.png\":{\"height\":259,\"width\":64,\"type\":\"png\"},\"sprites/blondWalk.png\":{\"height\":336,\"width\":317,\"type\":\"png\"},\"sprites/crops.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/deer/deer female calciumtrice.png\":{\"height\":160,\"width\":160,\"type\":\"png\"},\"sprites/deer/deer male calciumtrice.png\":{\"height\":160,\"width\":160,\"type\":\"png\"},\"sprites/fantasysprites.png\":{\"height\":512,\"width\":384,\"type\":\"png\"},\"sprites/fantasysprites/CompSpriteC.png\":{\"height\":166,\"width\":96,\"type\":\"png\"},\"sprites/fantasysprites/DwarfSprites.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/fantasysprites/DwarfSprites2.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/fantasysprites/EnemySpriteSheet1.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/fantasysprites/FDwarfSheet.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/fantasysprites/PeopleSpriteSheet2.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/fantasysprites/PeopleSpriteSheet3.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/fantasysprites/SpriteCompD.png\":{\"height\":188,\"width\":96,\"type\":\"png\"},\"sprites/fireball.png\":{\"height\":512,\"width\":512,\"type\":\"png\"},\"sprites/greg.png\":{\"height\":96,\"width\":64,\"type\":\"png\"},\"sprites/greyactions.png\":{\"height\":96,\"width\":64,\"type\":\"png\"},\"sprites/scrops.png\":{\"height\":672,\"width\":391,\"type\":\"png\"},\"sprites/sword-7Soul1.png\":{\"height\":192,\"width\":256,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/character/grab_sheet.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/character/sword_sheet_128.png\":{\"height\":504,\"width\":768,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magic/magic_firelion_big.png\":{\"height\":512,\"width\":512,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magic/magic_firelion_sheet.png\":{\"height\":256,\"width\":256,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magic/magic_iceshield_sheet.png\":{\"height\":512,\"width\":512,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magic/magic_snakebite_sheet.png\":{\"height\":512,\"width\":512,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magic/magic_torrentacle.png\":{\"height\":512,\"width\":512,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magic/turtleshell_front.png\":{\"height\":512,\"width\":512,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magic/turtleshell_side.png\":{\"height\":512,\"width\":512,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magics_preview.gif\":{\"height\":128,\"width\":128,\"type\":\"gif\"},\"sprites/tilesets/submission_daneeklu/tileset_preview.png\":{\"height\":576,\"width\":768,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/farming_fishing.png\":{\"height\":640,\"width\":640,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/fence_alt.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/fence.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/grass.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/grassalt.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/hole.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/plants.png\":{\"height\":384,\"width\":288,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/plowed_soil.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/reed.png\":{\"height\":320,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/sand.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/sandwater.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/tallgrass.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/wheat.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/youngwheat.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/ui_preview.png\":{\"height\":192,\"width\":224,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/ui/scrollsandblocks.png\":{\"height\":320,\"width\":544,\"type\":\"png\"},\"sprites/victoriansprites.png\":{\"height\":384,\"width\":384,\"type\":\"png\"}}", "import { HtmlRectSprite } from \"../renderers/implementations/html/html-rect-sprite\";\r\nimport { HtmlSprite } from \"../renderers/implementations/html/html-sprite\";\r\nimport { ISpriteLoader } from \"../renderers/isprite-loader\";\r\nimport { Sprite } from \"../renderers/sprite\";\r\nimport { SpriteAnimation } from \"../renderers/sprite-animation\";\r\nimport { PhaserGame } from \"./phaser-game\";\r\nimport { metadata } from \"../../metadata\";\r\n\r\nexport class PhaserSpriteManager implements ISpriteLoader{\r\n    constructor(spriteDir:string=\"../sprites/\"){\r\n        this.phaserGame = PhaserGame.createSingleton();\r\n        this.spriteDir = spriteDir;\r\n    }\r\n    onLoad(callback?: () => void): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    private spriteDir: string;\r\n    private phaserGame: PhaserGame;\r\n    private spriteNameToPath:{[index:string]: string} = {};\r\n    private path(fileName:string){\r\n        return this.spriteDir + fileName;\r\n    }\r\n    \r\n    loadSprite(spriteName:string, fileName:string, widthImgs:number, heightImgs:number, offsetx:number=0, offsety:number=0){\r\n        this.phaserGame.mainScene.addPreloader(()=>{\r\n            const path: string = this.path(fileName)\r\n            const width:number = metadata[path.replace(\"../\", \"\")].width;\r\n            const height:number = metadata[path.replace(\"../\", \"\")].height;\r\n            const frameWidth = width/widthImgs;\r\n            const frameHeight = height/heightImgs;\r\n            this.phaserGame.mainScene.load.spritesheet(spriteName, path, {\r\n                frameWidth:frameWidth,\r\n                frameHeight:frameHeight\r\n            });\r\n            // this.spriteNameToPath[spriteName] = path;\r\n        });\r\n    }\r\n\r\n    loadSpriteWithDimensions(spriteName:string, fileName:string, frameWidth:number, frameHeight:number, offsetx:number=0, offsety:number=0){\r\n    }\r\n\r\n    loadSpriteOverlapping(spriteName:string, fileName:string){\r\n    }\r\n\r\n    addAnimation(spriteName:string, animationName:string, spriteNumbers:Array<number>, delay=1){\r\n        this.phaserGame.mainScene.addCreator(()=>{\r\n            const anims = this.phaserGame.mainScene.anims;\r\n            anims.create(\r\n                {\r\n                    key:animationName,\r\n                    frames: anims.generateFrameNumbers(spriteName, {\r\n                        frames: spriteNumbers                    \r\n                    }),\r\n                    frameRate: Math.floor(30 / delay),\r\n                    repeat:-1 \r\n                }\r\n            )\r\n        });\r\n    }\r\n\r\n    getAnimation(animationName:string):SpriteAnimation{\r\n        // to remove\r\n        return SpriteAnimation.create(animationName, \"\", [], 0);\r\n    }\r\n\r\n    getRGBs(animationName:string=null, spriteNumber:number = 0, width:number=null, height:number=null):ImageData{\r\n        return new ImageData(0, 0);\r\n    }\r\n\r\n    static create():PhaserSpriteManager{\r\n        return new PhaserSpriteManager();\r\n    }\r\n    private static spriteManager:PhaserSpriteManager = null;\r\n    static singeltonCreate():PhaserSpriteManager{\r\n        if (PhaserSpriteManager.spriteManager != null) return PhaserSpriteManager.spriteManager;\r\n        PhaserSpriteManager.spriteManager = new PhaserSpriteManager();\r\n        return PhaserSpriteManager.spriteManager;\r\n    }\r\n}", "import { Component } from \"../../component/component\";\r\nimport { IAnimationComponent } from \"../../component/components/animation/ianimation-component\";\r\nimport { Entity } from \"../../entity/entity\";\r\nimport { EntityUpdateArgs } from \"../../entity/entity-update-args\";\r\nimport { ISpriteLoader } from \"../../renderers/isprite-loader\";\r\nimport { PhaserGame } from \"../phaser-game\";\r\nimport { PhaserSpriteManager } from \"../phaser-sprite-manager\";\r\n\r\nexport class PhaserAnimationComponent extends Component implements IAnimationComponent{\r\n    animationName: string;\r\n    spriteName: string;\r\n    animationNameUpdated: boolean = false;\r\n    private phaserGame: PhaserGame;\r\n    fakeImageData: ImageData = new ImageData(1,1);\r\n    constructor(animationName:string, delay:number, spriteManager:ISpriteLoader){\r\n        super(\"animation\");\r\n        this.phaserGame = PhaserGame.createSingleton();\r\n    }\r\n\r\n    getSpriteNumber(){\r\n    }\r\n\r\n    getRGBs(animationName:string=null, spriteNumber:number = 0, width:number=null, height:number=null,):ImageData{\r\n        return this.fakeImageData;\r\n    }\r\n    \r\n    setFilter(pixelData: ImageData) {\r\n    }\r\n\r\n    setSprite(animationName:string){\r\n        // console.log(`${animationName} updated to`);\r\n        if(animationName == this.animationName) return;\r\n        this.animationName = animationName;\r\n        this.animationNameUpdated = true;\r\n    }\r\n\r\n    setSpriteNumber(spriteName:string, spriteNumber:number){\r\n    }\r\n\r\n    update(entity:Entity, args:EntityUpdateArgs):void{\r\n    }\r\n\r\n    static create():PhaserAnimationComponent{\r\n        var spriteManager:ISpriteLoader = PhaserSpriteManager.singeltonCreate();\r\n        // var spriteManager:SpriteManager = createSpriteManager();\r\n        var ac:PhaserAnimationComponent = new PhaserAnimationComponent(\"blond\", 2, spriteManager);\r\n        return ac;\r\n    }\r\n}", "import { Component } from \"../../component/component\";\r\nimport { IPositionComponent } from \"../../component/components/position/iposition-component\";\r\nimport { Entity } from \"../../entity/entity\";\r\nimport { EntityUpdateArgs } from \"../../entity/entity-update-args\";\r\nimport { PhaserGame } from \"../phaser-game\";\r\n\r\n\r\nexport class PhaserPositionComponent extends Component implements IPositionComponent{\r\n    private phaserGame: PhaserGame;\r\n    // public phaserObject: Phaser.Physics.Matter.Sprite\r\n    public phaserObject: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody;\r\n    constructor(phaser:PhaserGame){\r\n        super(\"position\");\r\n        this.phaserGame = phaser;\r\n        this.phaserGame.mainScene.addCreator((scene)=>{\r\n            this.phaserObject = scene.physics.add.sprite(this.x, this.y, \"victorian\", 72);\r\n            this.phaserObject.displayWidth = this.width;\r\n            this.phaserObject.displayHeight = this.height;\r\n        });\r\n    }\r\n    private speedMultiplier:number=50;\r\n    private _vx:number=0;\r\n    get vx():number{\r\n        return this._vx;\r\n    }\r\n    set vx(vx:number){\r\n        if (this.phaserObject?.body?.velocity != null && this.phaserObject.body.velocity.x != vx){\r\n            this.phaserObject.setFlipX(!this.faceRight)\r\n            this.phaserObject.setVelocityX(vx*this.speedMultiplier);\r\n        }\r\n        this._vx = vx;\r\n        if(vx == 0){\r\n            if(this.faceY !== 0){\r\n                this.faceX = vx;\r\n            }\r\n        } else {\r\n            this.faceX = vx;\r\n            if(this.faceY !== 0 && this.vy == 0){\r\n                this.faceY = 0;\r\n            }\r\n        }\r\n    }\r\n    private _vy:number=0;\r\n    get vy():number{\r\n        return this._vy;\r\n    }\r\n    set vy(vy:number){\r\n        if (this.phaserObject?.body?.velocity != null && this.phaserObject.body.velocity.y != vy){\r\n            this.phaserObject.setVelocityY(vy*this.speedMultiplier);\r\n        }\r\n        this._vy = vy;\r\n        if(vy == 0){\r\n            if(this.faceX !== 0){\r\n                this.faceY = vy;\r\n            }\r\n        } else {\r\n            this.faceY = vy;\r\n            if(this.faceX !== 0 && this.vx == 0){\r\n                this.faceX = 0;\r\n            }\r\n        }\r\n    }\r\n    private _rotate:number=0;\r\n    get rotate():number{\r\n        return this._rotate;\r\n    }\r\n    set rotate(radiansToRotate:number){\r\n        this._rotate = radiansToRotate%(2*Math.PI);\r\n    }\r\n    x:number=0;\r\n    y:number=0;\r\n    h: number=0;\r\n    width:number=100;\r\n    height:number=100;\r\n    faceRight:boolean=true;\r\n    faceX:number=0;\r\n    faceY:number=0;\r\n    moved:boolean=false;\r\n    applyOffsets:boolean=true;\r\n\r\n\r\n\r\n    update(entity:Entity, args:EntityUpdateArgs):void{\r\n        const delta = args.delta;\r\n        this.x += this.vx * delta;\r\n        this.y += this.vy * delta;\r\n        this.moved = !(this.vx == 0 && this.vy == 0);\r\n    }\r\n\r\n    static create():PhaserPositionComponent{\r\n        return new PhaserPositionComponent(PhaserGame.createSingleton());\r\n    }\r\n    pivotX:number = .5;\r\n    pivotY:number = 1;\r\n    anchorX:number = .5;\r\n    anchorY:number = 1;\r\n}", "import { IPositionComponent } from \"../component/components/position/iposition-component\";\r\nimport { GameDependencies } from \"../dependencies/game-dependencies\";\r\nimport { ICameras } from \"../dependencies/icameras\";\r\nimport { PhaserPositionComponent } from \"./phaser-components/phaser-position-component\";\r\nimport { PhaserGame } from \"./phaser-game\";\r\nimport { PhaserGameDependencies } from \"./phaser-game-dependencies\";\r\n\r\nexport class PhaserCameras implements ICameras {\r\n    phaserGame: PhaserGame;\r\n    constructor(phaserGame:PhaserGame){\r\n        this.phaserGame = phaserGame;\r\n    }\r\n    center: IPositionComponent;\r\n    setMainCamera(position:IPositionComponent): void {\r\n        if (!(position instanceof PhaserPositionComponent)){\r\n            console.error(\"Couldn't center camera. Position component must be PhaserPositionComponent\");\r\n        }\r\n        this.center = position;\r\n        const phaserPosition = <PhaserPositionComponent>position;\r\n        this.phaserGame.mainScene.addCreator(()=>{\r\n            const playerPhaserObj = phaserPosition.phaserObject;\r\n            this.phaserGame.mainScene.cameras.main.startFollow(playerPhaserObj);\r\n        })\r\n    }\r\n    public static create(gameDependencies:PhaserGameDependencies):PhaserCameras{\r\n        gameDependencies.checkDependency(gameDependencies.phaserGame);\r\n        const pc = new PhaserCameras(gameDependencies.phaserGame);\r\n        return pc;\r\n    }\r\n}", "import { GameDependencies } from \"../dependencies/game-dependencies\";\r\nimport { PhaserGame } from \"./phaser-game\";\r\n\r\nexport class PhaserGameDependencies extends GameDependencies {\r\n    phaserGame: PhaserGame = null;\r\n}", "import { ComponentFactory } from \"../component/component-factory\";\r\nimport { GameDependencies } from \"../dependencies/game-dependencies\";\r\nimport { EntityFactory } from \"../entity/entity-factory\";\r\nimport { EventManager } from \"../events/event-manager\";\r\nimport { PhaserCameras } from \"./phaser-cameras\";\r\nimport { PhaserGame } from \"./phaser-game\";\r\nimport { PhaserGameDependencies } from \"./phaser-game-dependencies\";\r\nimport { PhaserSpriteManager } from \"./phaser-sprite-manager\";\r\nimport { HtmlRenderer } from \"../renderers/implementations/html/html-renderer\";\r\n\r\nexport function buildPhaserDependencies(){\r\n    const deps = new PhaserGameDependencies();\r\n    deps.phaserGame = PhaserGame.createSingleton();\r\n    deps.cameras = PhaserCameras.create(deps);\r\n    deps.renderer = HtmlRenderer.create();\r\n    deps.spriteManager = PhaserSpriteManager.create();\r\n    deps.eventManager = EventManager.create();\r\n    deps.componentFactory = ComponentFactory.create(deps);\r\n    deps.entityFactory = EntityFactory.create(deps);\r\n    return deps;\r\n}", "export class RenderOptions {\r\n    flip:boolean=true;\r\n    rotate:number=0;//in radians\r\n    applyOffsets:boolean=true;\r\n}", "import { Component } from '../component/component';\r\nimport { Entity } from '../entity/entity';\r\nimport { Game } from '../game';\r\nimport { EventManager } from '../events/event-manager';\r\nimport { SystemArgs } from './system-args';\r\nimport { EntityUpdateArgs } from '../entity/entity-update-args';\r\n\r\nexport class EntitySystem {\r\n    /**\r\n     * System that can be applied to an entity\r\n     * manipulates one or more components through the component's public interface\r\n     * Do not change components directly through a system\r\n     */\r\n    constructor(game:Game){\r\n        this.game = game;\r\n    }\r\n    targetComponents:Component[];\r\n    game:Game;\r\n    oncePerLoop:(args:SystemArgs)=>void=null;\r\n    apply(args:SystemArgs):void{\r\n        throw \"an entity system did not implement apply method.\";\r\n    };\r\n    applyEvents(entity:Entity, eventManager:EventManager):void{\r\n        throw \"an entity did not implement apply Events\";\r\n    }\r\n\r\n    //static create(game:Game):EntitySystem{\r\n    //    throw \"an entity system has no create method.\"\r\n    //};\r\n}\r\n\r\n", "import { Game } from \"../../game\";\r\nimport { AnimationComponent2 } from \"../../../components/animation-component\";\r\nimport { PositionComponent } from \"../../component/components/position/position-component\";\r\nimport { PrimitiveComponent } from \"../../../components/primitive-component\";\r\nimport { TextComponent } from \"../../../components/text-component/text-component\";\r\nimport { TextPlacement } from \"../../../components/text-component/text-placement\";\r\nimport { TileComponent } from \"../../../components/tile-component/tile-component\";\r\nimport { Entity } from \"../../entity/entity\";\r\nimport { Renderer } from \"../../renderers/render\";\r\nimport { RenderOptions } from \"../../renderers/render-options\";\r\nimport { EntitySystem } from \"../../system/system\";\r\nimport { SystemArgs } from \"../../system/system-args\";\r\nimport { FirstEntity } from \"../../../entities/first-entity\";\r\nimport { PhaserAnimationComponent } from \"../phaser-components/phaser-animation-component\";\r\nimport { PhaserPositionComponent } from \"../phaser-components/phaser-position-component\";\r\n\r\nexport class PhaserRenderSystem extends EntitySystem{\r\n    /**\r\n     * used for drawing animation components\r\n     */\r\n    constructor(game:Game){\r\n        super(game);\r\n    }\r\n\r\n    static create(game:Game):PhaserRenderSystem{\r\n        return new PhaserRenderSystem(game);\r\n    }\r\n\r\n    apply(args:SystemArgs){\r\n        this.setPhaserAnimations(args.entity);\r\n    }\r\n    renderTileSet(entity: FirstEntity) {\r\n    }\r\n\r\n    private tileCoordToReal(tileWidth: number, coord: number): number{\r\n        return coord * tileWidth;\r\n    }\r\n\r\n    renderText(entity:Entity){\r\n    }\r\n\r\n    setPhaserAnimations(entity:Entity){\r\n        var a:PhaserAnimationComponent = <PhaserAnimationComponent>entity.getComponent(\"animation\", true);\r\n        var p:PhaserPositionComponent = <PhaserPositionComponent>entity.getComponent(\"position\", true);\r\n        if (a == null || p == null)return;\r\n        if (!a.animationNameUpdated)return;\r\n        a.animationNameUpdated = false;\r\n        let options:RenderOptions = new RenderOptions();//rotate flip apply offsets config.\r\n        if (p?.phaserObject == null) return;\r\n        // console.log(`changing animation to ${a.animationName}`);\r\n        p.phaserObject.anims.play(a.animationName);\r\n        p.phaserObject.displayWidth = p.width;\r\n        p.phaserObject.displayHeight = p.height;\r\n    }\r\n\r\n    renderPrimitive(entity:Entity){\r\n    }\r\n\r\n    centerCameraOn(entity:Entity){\r\n    }\r\n\r\n    applyEvents(){}\r\n}", "import { Game } from \"../game\";\r\nimport { PhaserAnimationComponent } from \"./phaser-components/phaser-animation-component\";\r\nimport { PhaserPositionComponent } from \"./phaser-components/phaser-position-component\";\r\nimport { buildPhaserDependencies } from \"./phaser-dependency-builder\";\r\nimport { PhaserGame } from \"./phaser-game\";\r\nimport { PhaserRenderSystem } from \"./phaser-systems/phaser-render-system\";\r\n\r\nfunction buildPhaserComponents(game:Game){\r\n    console.log(\"building phaser game components\");\r\n    game.registerComponent(PhaserAnimationComponent);\r\n    game.registerComponent(PhaserPositionComponent);\r\n}\r\n\r\nexport function createPhaserGame(game:Game=null){\r\n    if (game == null){\r\n        const deps = buildPhaserDependencies();\r\n        game = Game.createCustom(deps);\r\n    }\r\n    const phaserGame = PhaserGame.createSingleton();\r\n    phaserGame.mainScene.addCreator((scene)=>{\r\n        phaserGame.setUpdater((delta)=>{\r\n            game.step(delta);\r\n        });\r\n    });\r\n    buildPhaserComponents(game);\r\n    game.addSystem(PhaserRenderSystem.create(game));\r\n    game.addStarter(()=>{phaserGame.start()});\r\n    return game;\r\n}", "import { FirstEntity } from \"../../entities/first-entity\";\r\nimport { Entity } from \"../entity/entity\";\r\nimport { Game } from \"../game\";\r\nimport { Renderer } from \"../renderers/render\";\r\nimport { RenderOptions } from \"../renderers/render-options\";\r\nimport { SpriteManager } from \"../renderers/sprite-manager\";\r\nimport { SystemArgs } from \"../system/system-args\";\r\n\r\nexport class GenericRenderer implements Renderer{\r\n    constructor(){}\r\n    offset: number[];\r\n    spriteFilter(filter: ImageData, x: number, y: number, width: number, height: number, spriteNumber: number, options: RenderOptions): void {\r\n    }\r\n    cbox(): void {\r\n    }\r\n    getOffset(): number[] {\r\n        return [0,0];\r\n    }\r\n    setOffset(offset: number[]): void {\r\n    }\r\n    sprite(spriteName: string, x: number, y: number, width: number, height: number, spriteNumber: number, options: RenderOptions): void {\r\n    }\r\n    text(text: string, x: number, y: number, size: number): void {\r\n    }\r\n    circle(x: number, y: number, r: number): void {\r\n    }\r\n    line(x1: number, y1: number, x2: number, y2: number): void {\r\n    }\r\n    spriteManager: SpriteManager;\r\n    static create():GenericRenderer{\r\n        return new GenericRenderer();\r\n    }\r\n}", "import { Component } from \"../../component/component\";\r\nimport { IAnimationComponent } from \"../../component/components/animation/ianimation-component\";\r\nimport { GameDependencies } from \"../../dependencies/game-dependencies\";\r\nimport { Entity } from \"../../entity/entity\";\r\nimport { EntityUpdateArgs } from \"../../entity/entity-update-args\";\r\nimport { Game } from \"../../game\";\r\nimport { IEngineSprite } from \"../sprite-dependency/iengine-sprite\";\r\n\r\nexport class GenericAnimationComponent extends Component implements IAnimationComponent {\r\n    engineSprite: IEngineSprite;\r\n    spriteName: string;\r\n    public static fakeImageData: ImageData = new ImageData(1,1);\r\n    public static componentName:string = \"animation\"\r\n    constructor(game:GameDependencies, entityId:string){\r\n        super(\"animation\");\r\n        game.checkDependency(game.engineCreator);\r\n        this.engineSprite = game.engineCreator.createEngineSprite(entityId);\r\n    }\r\n    update(entity: Entity, args: EntityUpdateArgs): void {\r\n    }\r\n    getSpriteNumber(): void {\r\n    }\r\n    getRGBs(animationName?: string, spriteNumber?: number, width?: number, height?: number): ImageData {\r\n        return GenericAnimationComponent.fakeImageData;\r\n    }\r\n    setFilter(pixelData: ImageData): void {\r\n    }\r\n    setSprite(animationName: string): void {\r\n        if (animationName == this.spriteName)return;\r\n        this.spriteName = animationName;\r\n        this.engineSprite.setSprite(animationName);\r\n    }\r\n    setSpriteNumber(spriteName: string, spriteNumber: number): void {\r\n    }\r\n    public static create(game: GameDependencies, entityId:string): GenericAnimationComponent {\r\n        return new GenericAnimationComponent(game, entityId);\r\n    }\r\n}", "import { Component } from \"../../component/component\";\r\nimport { IPositionComponent } from \"../../component/components/position/iposition-component\";\r\nimport { GameDependencies } from \"../../dependencies/game-dependencies\";\r\nimport { GenericCameras } from \"../../dependencies/generic-cameras\";\r\nimport { ICameras } from \"../../dependencies/icameras\";\r\nimport { Entity } from \"../../entity/entity\";\r\nimport { EntityUpdateArgs } from \"../../entity/entity-update-args\";\r\nimport { EventType } from \"../../events/EventType\";\r\nimport { EventManager } from \"../../events/event-manager\";\r\nimport { Game } from \"../../game\";\r\nimport { IEngineSprite } from \"../sprite-dependency/iengine-sprite\";\r\n\r\n\r\nexport class GenericPositionComponent extends Component implements IPositionComponent{\r\n    // public phaserObject: Phaser.Physics.Matter.Sprite\r\n    public engineSprite: IEngineSprite;\r\n    public static componentName=\"position\";\r\n    events: EventManager;\r\n    entityId: string;\r\n    constructor(game:GameDependencies, entityId:string){\r\n        super(\"position\");\r\n        this.engineSprite = game.engineCreator.createEngineSprite(entityId);\r\n        this.engineSprite.setSprite(\"greyWalk\");\r\n        this.engineSprite.width = this.width;\r\n        this.engineSprite.height = this.height;\r\n        game.checkDependency(game.eventManager);\r\n        this.events = game.eventManager;\r\n        this.entityId = entityId;\r\n    }\r\n    private speedMultiplier:number=50;\r\n    private _vx:number=0;\r\n    get vx():number{\r\n        return this._vx;\r\n    }\r\n    set vx(vx:number){\r\n        this.engineSprite.faceRight = this.faceRight;\r\n        this.engineSprite.vx = vx*this.speedMultiplier;\r\n        this._vx = vx;\r\n        if(vx == 0){\r\n            if(this.faceY !== 0){\r\n                this.faceX = vx;\r\n            }\r\n        } else {\r\n            this.faceX = vx;\r\n            if(this.faceY !== 0 && this.vy == 0){\r\n                this.faceY = 0;\r\n            }\r\n        }\r\n    }\r\n    private _vy:number=0;\r\n    get vy():number{\r\n        return this._vy;\r\n    }\r\n    set vy(vy:number){\r\n        this.engineSprite.vy = vy;\r\n        this._vy = vy;\r\n        if(vy == 0){\r\n            if(this.faceX !== 0){\r\n                this.faceY = vy;\r\n            }\r\n        } else {\r\n            this.faceY = vy;\r\n            if(this.faceX !== 0 && this.vx == 0){\r\n                this.faceX = 0;\r\n            }\r\n        }\r\n    }\r\n    private _rotate:number=0;\r\n    get rotate():number{\r\n        return this._rotate;\r\n    }\r\n    set rotate(radiansToRotate:number){\r\n        this._rotate = radiansToRotate%(2*Math.PI);\r\n        this.engineSprite.rotate = radiansToRotate;\r\n    }\r\n    get x():number{\r\n        return this._x;\r\n    }\r\n    get y():number{\r\n        return this._y;\r\n    }\r\n    set x(newX:number){\r\n        this._x = newX;\r\n        this.events.emit(EventType.entityMoved, {\r\n            entityId: this.entityId,\r\n            x: this._x,\r\n            y: this._y\r\n        });\r\n    }\r\n    set y(newY:number){\r\n        this._y = newY;\r\n        this.events.emit(EventType.entityMoved, {\r\n            entityId: this.entityId,\r\n            x: this._x,\r\n            y: this._y\r\n        });\r\n    }\r\n    get width(){\r\n        return this.engineSprite.width;\r\n    }\r\n    set width(w:number){\r\n        this._width = w;\r\n        this.engineSprite.width = w;\r\n    }\r\n    get height(){\r\n        return this.engineSprite.height;\r\n    }\r\n    set height(h:number){\r\n        this.engineSprite.height = h;\r\n        this._height = h;\r\n    }\r\n    _x:number=0;\r\n    _y:number=0;\r\n    h: number=0;\r\n    private _width:number=100;\r\n    private _height:number=100;\r\n    flip:boolean = false;\r\n    _faceRight:boolean = true;\r\n    get faceRight(){\r\n        return this._faceRight;\r\n    }\r\n    set faceRight(value:boolean){\r\n        this._faceRight = value;\r\n        this.engineSprite.faceRight = value;\r\n    }\r\n    faceX:number=0;\r\n    faceY:number=0;\r\n    moved:boolean=false;\r\n    applyOffsets:boolean=true;\r\n\r\n    get pivotX(){\r\n        return this.engineSprite.pivotX;\r\n    }\r\n    get pivotY(){\r\n        return this.engineSprite.pivotY;\r\n    }\r\n    get anchorX(){\r\n        return this.engineSprite.anchorX;\r\n    }\r\n    get anchorY(){\r\n        return this.engineSprite.anchorY\r\n    }\r\n    set pivotX(value:number){\r\n        this.engineSprite.pivotX = value;\r\n    }\r\n    set pivotY(value:number){\r\n        this.engineSprite.pivotY = value;\r\n    }\r\n    set anchorX(value:number){\r\n        this.engineSprite.anchorX = value;\r\n    }\r\n    set anchorY(value:number){\r\n        this.engineSprite.anchorY = value;\r\n    }\r\n\r\n\r\n    update(entity:Entity, args:EntityUpdateArgs):void{\r\n        const delta = args.delta;\r\n        this.x += this.vx * delta;\r\n        this.y += this.vy * delta;\r\n        this.moved = !(this.vx == 0 && this.vy == 0);\r\n    }\r\n\r\n    static create(game:GameDependencies, entityId:string):GenericPositionComponent{\r\n        return new GenericPositionComponent(game, entityId);\r\n    }\r\n}", "import { GameDependencies } from \"../dependencies/game-dependencies\";\r\nimport { PixiGame } from \"./pixi-game\";\r\n\r\nexport class PixiDependencies extends GameDependencies{\r\n    pixiGame:PixiGame;\r\n}", "import { Application, Sprite, IApplicationOptions, Container, Assets, AssetsClass, AnimatedSprite, Spritesheet, BaseTexture, IAutoDetectOptions, IBaseTextureOptions, ISize, Resource, ISpritesheetData, ISpritesheetFrameData, spritesheetAsset, Texture, FrameObject} from 'pixi.js';\r\nimport { metadata } from '../../metadata';\r\nimport { TileComponent } from '../../components/tile-component/tile-component';\r\nimport { Tile } from '../../components/tile-component/tile';\r\nimport { GenericCameras } from '../dependencies/generic-cameras';\r\nimport { GameDependencies } from '../dependencies/game-dependencies';\r\n\r\ntype Dict<T> = {\r\n    [key: string]: T;\r\n}\r\ntype SpriteType = Sprite;\r\nexport class PixiGame {\r\n    tileSprites: {[key:string]:SpriteType} = {};\r\n    width:number;\r\n    height:number;\r\n    xBound:number = 64;//how far left of 0 should we render tiles\r\n    yBound:number = 64;//how far above 0 should we render tiles\r\n    spriteNameToAnimationName: {[key:string]: string[]} = {};\r\n    outViewSprites: SpriteType[] = [];\r\n    ptime: number;\r\n    metadata: {[key:string]: {width:number, height:number}};\r\n    private tileKey(tile:Tile){\r\n        return `${tile.tileX}:${tile.tileY}`\r\n    }\r\n    private getInViewTiles(tiles:TileComponent, cameras:GenericCameras){\r\n        const inViewTiles:{[key:string]:Tile} = {};\r\n        const xBound = this.xBound;\r\n        const yBound = this.yBound;\r\n        // const t = performance.now();\r\n        for (let x=-xBound;x<this.width+xBound;x+=tiles.tileWidth){\r\n            const dataX = cameras.untransformX(x);\r\n            for (let y=-yBound;y<this.height+yBound;y+=tiles.tileWidth){\r\n                const dataY = cameras.untransformY(y);\r\n                const tilesAtCoord = tiles.coordToTile(dataX, dataY);\r\n                if (tilesAtCoord.length == 0) continue;\r\n                const tileAtCoord = tilesAtCoord[0];\r\n                const key = this.tileKey(tileAtCoord);\r\n                inViewTiles[key] = tileAtCoord;\r\n            }\r\n        }\r\n        // console.log(performance.now() - t);\r\n        return inViewTiles;\r\n    }\r\n    private arrangeTilesInView(tiles:TileComponent, cameras:GenericCameras, outViewSprites:SpriteType[] = []){\r\n        const width = this.width;\r\n        const height = this.height;\r\n        const xBound = this.xBound;\r\n        const yBound = this.yBound;\r\n        let dataX;\r\n        let dataY;\r\n        for (let x=-xBound;x<width+xBound;x+=tiles.tileWidth){\r\n            dataX = cameras.untransformX(x);\r\n            for (let y=-yBound;y<height+yBound;y+=tiles.tileWidth){\r\n                dataY = cameras.untransformY(y);\r\n                const tilesAtCoord = tiles.coordToTile(dataX, dataY);\r\n                if (tilesAtCoord.length == 0) continue;\r\n                const tileAtCoord = tilesAtCoord[0];\r\n                const spriteName = tileAtCoord.spriteIds[0].spriteName;\r\n                const spriteNum = tileAtCoord.spriteIds[0].spriteNumber;\r\n                const spriteSheet = this.spriteNameToSpriteSheet[spriteName];\r\n                const key = this.tileKey(tileAtCoord);\r\n                let tileSprite = this.tileSprites[key];\r\n                if (tileSprite == null && this.outViewSprites.length == 0){\r\n                    tileSprite = new Sprite(spriteSheet.textures[spriteNum]);\r\n                    tileSprite.width = tiles.tileWidth + 2;\r\n                    tileSprite.height = tiles.tileWidth + 2;\r\n                    this.tileSprites[key] = tileSprite;\r\n                    this.container.addChild(tileSprite);\r\n                }\r\n                if (tileSprite == null && this.outViewSprites.length > 0){\r\n                    tileSprite = this.outViewSprites.pop();\r\n                    tileSprite.texture = spriteSheet.textures[spriteNum];\r\n                    this.tileSprites[key] = tileSprite;\r\n                }\r\n                tileSprite.x = cameras.transformX(tiles.tileCoordToReal(tileAtCoord.tileX));\r\n                tileSprite.y = cameras.transformY(tiles.tileCoordToReal(tileAtCoord.tileY));\r\n            }\r\n        }\r\n    }\r\n    private removeExisitingSpriteById(spriteKey:string){\r\n        const tileSprite = this.tileSprites[spriteKey];\r\n        delete this.tileSprites[spriteKey];\r\n        this.outViewSprites.push(tileSprite);\r\n        return tileSprite;\r\n    }\r\n    private removeOutOfViewSprites(inViewTiles:{[key:string]:Tile}){\r\n        for(let key in this.tileSprites){\r\n            const existingSprite = this.tileSprites[key];\r\n            if (!(key in inViewTiles)){\r\n                const sprite = this.removeExisitingSpriteById(key);\r\n            }\r\n        }\r\n    }\r\n    async renderTiles(tiles: TileComponent, cameras:GenericCameras) {\r\n        const inViewTiles = this.getInViewTiles(tiles, cameras);\r\n        this.removeOutOfViewSprites(inViewTiles);\r\n        this.arrangeTilesInView(tiles, cameras, this.outViewSprites);\r\n    }\r\n    private loader: AssetsClass;\r\n    spriteNameToTexturePromise: {[key:string]:Promise<Texture>} = {};\r\n    spriteNameToTexture: {[key:string]:Texture} = {};\r\n    spriteNameToAtlas: {[key:string]:ISpritesheetData} = {};\r\n    animationNameToSpriteSheet: {[key:string]:Spritesheet} = {};\r\n    spriteNameToSpriteSheet: {[key:string]:Spritesheet} = {};\r\n    animationNameToParsed: {[key:string]:boolean} = {};\r\n    constructor(imgMetaData:{[key:string]:{width:number, height:number}}){\r\n        this.metadata = imgMetaData ?? metadata;\r\n        this.app = new Application({\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        });\r\n        this.loader = Assets;\r\n        document.body.appendChild(this.app.view as any);//I think not taking ICanvas is a bug.\r\n        const canvas = this.app.renderer.view;\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n        //@ts-ignore\r\n        canvas.style.margin = \"0\";\r\n        //@ts-ignore\r\n        canvas.style.padding = \"0\";\r\n        //@ts-ignore\r\n        canvas.style.overflow = \"hidden\";\r\n        //@ts-ignore\r\n        canvas.style.position = \"fixed\";\r\n        //@ts-ignore\r\n        canvas.style.top = \"0px\";\r\n        //@ts-ignore\r\n        canvas.style.left = \"0px\";\r\n        this.container = new Container();\r\n        this.app.stage.addChild(this.container);\r\n        this.width = this.app.view.width;\r\n        this.height = this.app.view.height;\r\n    }\r\n    app: Application;\r\n    container: Container;\r\n    private spriteDir: string = \"../sprites/\"\r\n    private path(fileName:string){\r\n        return this.spriteDir + fileName;\r\n    }\r\n    start(){\r\n    }\r\n    private getAtlasFrames(sheetWidth:number, sheetHeight:number, widthImgs:number, heightImgs:number){\r\n        const frameWidth = sheetWidth/widthImgs;\r\n        const frameHeight = sheetHeight/heightImgs;\r\n        const frames: Dict<ISpritesheetFrameData> = {};\r\n        let frameNumber = 0;\r\n        for (let y=0;y<sheetHeight;y+=frameHeight){\r\n            for(let x=0;x<sheetWidth;x+=frameWidth){\r\n                const frameKey = `${frameNumber}`;\r\n                frames[frameKey] = {\r\n                    frame:{x:x, y:y, w:frameWidth, h:frameHeight},\r\n                    sourceSize: {w:frameWidth, h:frameHeight},\r\n                    spriteSourceSize: {x:0,y:0}\r\n                };\r\n                frameNumber++;\r\n            }\r\n        }\r\n        return frames;\r\n    }\r\n    loadSprite(spriteName:string, fileName:string, widthImgs:number, heightImgs:number, offsetx:number=0, offsety:number=0){\r\n        this.spriteNameToAnimationName[spriteName] = [];\r\n        const path: string = this.path(fileName);\r\n        const texturePromise = this.loader.load(path);\r\n        this.spriteNameToTexturePromise[spriteName] = texturePromise;\r\n        texturePromise.then((texture)=>{\r\n            this.spriteNameToTexture[spriteName] = texture;\r\n        });\r\n        const width:number = this.metadata[path.replace(\"../\", \"\")].width;\r\n        const height:number = this.metadata[path.replace(\"../\", \"\")].height;\r\n        const frames = this.getAtlasFrames(width, height, widthImgs, heightImgs);\r\n        const atlas: ISpritesheetData = {\r\n            frames:frames,\r\n            meta:{\r\n                // image: 'images/spritesheet.png',\r\n                // format:\"RGBA8888\",\r\n                // size: { w: 128, h: 32 },\r\n                scale: \"1\"\r\n            },\r\n            animations: {}\r\n        };\r\n        this.spriteNameToAtlas[spriteName] = atlas;\r\n    }\r\n    async addAnimation(spriteName: string, animationName: string, spriteNumbers: number[], delay?: number){\r\n        // load sprite must be loaded by this.loadSprite\r\n        if (!(spriteName in this.spriteNameToAnimationName)){\r\n            console.log(`Skipped Animation: ${spriteName}`);\r\n            return;\r\n        }\r\n        this.spriteNameToAnimationName[spriteName].push(animationName);\r\n        const texture = await this.spriteNameToTexturePromise[spriteName];\r\n        const atlas = this.spriteNameToAtlas[spriteName];\r\n        if (atlas == null) return;// temporarily skip.\r\n        const allFrames = atlas.frames;\r\n        const animationFrames:Dict<ISpritesheetFrameData> = {};\r\n        spriteNumbers.forEach(num => {\r\n            const frameKey = num.toString();\r\n            animationFrames[frameKey] = allFrames[frameKey];\r\n        });\r\n        atlas.animations[animationName] = spriteNumbers.map((n)=>n.toString());\r\n    }\r\n\r\n    getSpriteAnimation(animationName:string){\r\n        const spriteSheet = this.animationNameToSpriteSheet[animationName];\r\n        if (!(animationName in this.animationNameToParsed)){\r\n            this.animationNameToParsed[animationName] = true;\r\n        }\r\n        if (spriteSheet == null || !(animationName in spriteSheet.animations)){\r\n            // console.log(`Animation not found: ${animationName}`);\r\n            return;\r\n        }\r\n        const animationFrames = spriteSheet.animations[animationName];\r\n        const animation = new AnimatedSprite(animationFrames);\r\n        animation.animationSpeed = 0.1666;\r\n        animation.play();\r\n        this.container.addChild(animation);\r\n        this.container.sortableChildren = true;\r\n        return animation;\r\n    }\r\n\r\n    async finishLoading(){\r\n        const textures = this.spriteNameToTexturePromise;\r\n        for(let i in textures){\r\n            const texture = textures[i];\r\n            await texture;\r\n        }\r\n        this.finishSpriteSheetGeneration();\r\n        const spriteSheets = this.spriteNameToSpriteSheet;\r\n        for (let i in spriteSheets){\r\n            const spriteSheet = spriteSheets[i];\r\n            spriteSheet.parse();\r\n        }\r\n    }\r\n\r\n    private finishSpriteSheetGeneration(){\r\n        // Create SpriteSheets\r\n        const spriteToAnimation = this.spriteNameToAnimationName\r\n        for (let spriteName in spriteToAnimation){\r\n            const animationNames = spriteToAnimation[spriteName];\r\n            const texture = this.spriteNameToTexture[spriteName];\r\n            const atlas = this.spriteNameToAtlas[spriteName];\r\n            const spriteSheet = new Spritesheet(texture, atlas);\r\n            this.spriteNameToSpriteSheet[spriteName] = spriteSheet;\r\n            animationNames.forEach((animationName)=>{\r\n                this.animationNameToSpriteSheet\r\n                this.animationNameToSpriteSheet[animationName] = spriteSheet;\r\n            });\r\n        }\r\n    }\r\n\r\n    private static pixiGame:PixiGame = null;\r\n    public static createSingleton(deps:GameDependencies){\r\n        if (this.pixiGame != null) return PixiGame.pixiGame;\r\n        const metadata = deps.imgMetaData;\r\n        PixiGame.pixiGame = new PixiGame(metadata);\r\n        return PixiGame.pixiGame;\r\n    }\r\n}", "import { Spritesheet } from \"pixi.js\";\r\nimport { GameDependencies } from \"../dependencies/game-dependencies\";\r\nimport { ISpriteLoader } from \"../renderers/isprite-loader\";\r\nimport { PixiDependencies } from \"./pixi-dependencies\";\r\nimport { PixiGame } from \"./pixi-game\";\r\n\r\nexport class PixiSpriteManager implements ISpriteLoader {\r\n    pixiGame: PixiGame;\r\n    constructor(pixiGame:PixiGame){\r\n        this.pixiGame = pixiGame;\r\n    }\r\n    async onLoad(callback?: () => void): Promise<any> {\r\n        await this.pixiGame.finishLoading();\r\n        if (callback == null)return;\r\n        callback();\r\n    }\r\n    loadSprite(spriteName: string, fileName: string, widthImgs: number, heightImgs: number, offsetx?: number, offsety?: number): void {\r\n        this.pixiGame.loadSprite(spriteName, fileName, widthImgs, heightImgs, offsetx, offsety);\r\n    }\r\n    loadSpriteWithDimensions(spriteName: string, fileName: string, frameWidth: number, frameHeight: number, offsetx: number, offsety: number): void {\r\n    }\r\n    loadSpriteOverlapping(spriteName: string, fileName: string): void {\r\n    }\r\n    addAnimation(spriteName: string, animationName: string, spriteNumbers: number[], delay?: number): void {\r\n        this.pixiGame.addAnimation(spriteName, animationName, spriteNumbers, delay)\r\n    }\r\n    public static create(gameDependencies:PixiDependencies){\r\n        gameDependencies.checkDependency(gameDependencies.pixiGame);\r\n        return new PixiSpriteManager(gameDependencies.pixiGame);\r\n    };\r\n}", "import { IEngineSprite } from \"./iengine-sprite\";\r\nimport { GameDependencies } from \"../../dependencies/game-dependencies\";\r\nimport { IEngineCreator } from \"./iengine-creator\";\r\nimport { PixieEngineCreator } from \"./pixie-engine-creator\";\r\nimport { PixiDependencies } from \"../pixi-dependencies\";\r\nimport { PixiGame } from \"../pixi-game\";\r\nimport { AnimatedSprite } from \"pixi.js\";\r\n\r\nexport class PixieEngineSprite implements IEngineSprite {\r\n    pixieGame: PixiGame;\r\n    sprite: AnimatedSprite;\r\n    constructor(gameDependencies:PixiDependencies){\r\n        gameDependencies.checkDependency(gameDependencies.pixiGame);\r\n        this.pixieGame = gameDependencies.pixiGame;\r\n        this.sprite = this.pixieGame.getSpriteAnimation(\"greyWalk\");\r\n        this.pivotX = .5;\r\n        this.pivotY = 1;\r\n        this.anchorX = .5;\r\n        this.anchorY = 1;\r\n    }\r\n    private _width: number;\r\n    private _height: number;\r\n    private _faceRight: boolean;\r\n    private _x: number;\r\n    private _y: number;\r\n    private _vx: number;\r\n    private _rotate:number=0;\r\n\r\n    public get rotate(){\r\n        return this._rotate;\r\n    }\r\n\r\n    public set rotate(newRotate:number){\r\n        this._rotate = newRotate;\r\n        this.sprite.rotation = newRotate;\r\n    }\r\n\r\n    /**\r\n     * Getter width\r\n     * @return {number}\r\n     */\r\n\tpublic get width(): number {\r\n\t\treturn this.sprite.width;\r\n\t}\r\n\r\n    /**\r\n     * Getter height\r\n     * @return {number}\r\n     */\r\n\tpublic get height(): number {\r\n\t\treturn this.sprite.height;\r\n\t}\r\n\r\n    /**\r\n     * Getter faceRight\r\n     * @return {boolean}\r\n     */\r\n\tpublic get faceRight(): boolean {\r\n\t\treturn this._faceRight;\r\n\t}\r\n\r\n    /**\r\n     * Getter x\r\n     * @return {number}\r\n     */\r\n\tpublic get x(): number {\r\n\t\treturn this.sprite.x;\r\n\t}\r\n\r\n    /**\r\n     * Getter y\r\n     * @return {number}\r\n     */\r\n\tpublic get y(): number {\r\n\t\treturn this.sprite.y;\r\n\t}\r\n\r\n    /**\r\n     * Getter vx\r\n     * @return {number}\r\n     */\r\n\tpublic get vx(): number {\r\n\t\treturn this._vx;\r\n\t}\r\n\r\n    /**\r\n     * Getter vy\r\n     * @return {number}\r\n     */\r\n\tpublic get vy(): number {\r\n\t\treturn this._vy;\r\n\t}\r\n\r\n    /**\r\n     * Setter width\r\n     * @param {number} value\r\n     */\r\n\tpublic set width(value: number) {\r\n\t\tthis.sprite.width = value;\r\n\t}\r\n\r\n    /**\r\n     * Setter height\r\n     * @param {number} value\r\n     */\r\n\tpublic set height(value: number) {\r\n        this.sprite.height = value;\r\n\t}\r\n\r\n    /**\r\n     * Setter faceRight\r\n     * @param {boolean} value\r\n     */\r\n\tpublic set faceRight(value: boolean) {\r\n        if (value != this._faceRight){\r\n            if (value){\r\n                this.sprite.scale.x = Math.abs(this.sprite.scale.x);\r\n            } else {\r\n                this.sprite.scale.x = Math.abs(this.sprite.scale.x) * -1;\r\n            }\r\n        }\r\n\t\tthis._faceRight = value;\r\n\t}\r\n\r\n    /**\r\n     * Setter x\r\n     * @param {number} value\r\n     */\r\n\tpublic set x(value: number) {\r\n        this.sprite.x = value;\r\n\t}\r\n\r\n    /**\r\n     * Setter y\r\n     * @param {number} value\r\n     */\r\n\tpublic set y(value: number) {\r\n        this.sprite.y = value;\r\n        this.sprite.zIndex = value;\r\n\t}\r\n\r\n    /**\r\n     * Setter vx\r\n     * @param {number} value\r\n     */\r\n\tpublic set vx(value: number) {\r\n\t\tthis._vx = value;\r\n\t}\r\n\r\n    /**\r\n     * Setter vy\r\n     * @param {number} value\r\n     */\r\n\tpublic set vy(value: number) {\r\n\t\tthis._vy = value;\r\n\t}\r\n    private _vy: number;\r\n    \r\n    get pivotX(){\r\n        return this.sprite.pivot.x;\r\n    }\r\n    get pivotY(){\r\n        return this.sprite.pivot.y;\r\n    }\r\n    get anchorX(){\r\n        return this.sprite.anchor.x;\r\n    }\r\n    get anchorY(){\r\n        return this.sprite.anchor.y;\r\n    }\r\n    set pivotX(value:number){\r\n        this.sprite.anchor.x = value;\r\n    }\r\n    set pivotY(value:number){\r\n        this.sprite.pivot.y = value;\r\n    }\r\n    set anchorX(value:number){\r\n        this.sprite.pivot.x = value;\r\n    }\r\n    set anchorY(value:number){\r\n        this.sprite.anchor.y = value;\r\n    }\r\n    setSprite(animationName: string): void {\r\n        // console.log(`setSprite to ${animationName}`)\r\n        const newSprite = this.pixieGame.getSpriteAnimation(animationName);\r\n        newSprite.x = this.sprite.x;\r\n        newSprite.y = this.sprite.y;\r\n        newSprite.width = this.sprite.width;\r\n        newSprite.height = this.sprite.height;\r\n        newSprite.scale.x = this.sprite.scale.x;\r\n        newSprite.pivot.x = this.pivotX;\r\n        newSprite.pivot.y = this.pivotY;\r\n        newSprite.anchor.x = this.anchorX;\r\n        newSprite.anchor.y = this.anchorY;\r\n        this.pixieGame.container.removeChild(this.sprite);\r\n        this.sprite = newSprite;\r\n    }\r\n    public static create(gameDependencies:PixiDependencies){\r\n        return new PixieEngineSprite(gameDependencies);\r\n    }\r\n}", "import { GameDependencies } from \"../../dependencies/game-dependencies\";\r\nimport { PixiDependencies } from \"../pixi-dependencies\";\r\nimport { IEngineCreator } from \"./iengine-creator\";\r\nimport { IEngineSprite } from \"./iengine-sprite\";\r\nimport { PixieEngineSprite } from \"./pixi-engine-sprite\";\r\n\r\nexport class PixieEngineCreator implements IEngineCreator {\r\n    gameDependencies: PixiDependencies;\r\n    idToEngineSprite: {[key:string]:PixieEngineSprite} = {};\r\n    constructor(gameDependencies:PixiDependencies){\r\n        this.gameDependencies = gameDependencies;\r\n    }\r\n    createEngineSprite(entityId: string): PixieEngineSprite{\r\n        if (entityId in this.idToEngineSprite) return this.idToEngineSprite[entityId];\r\n        const entity = PixieEngineSprite.create(this.gameDependencies);\r\n        this.idToEngineSprite[entityId] = entity;\r\n        return entity;\r\n    }\r\n    public static create(gameDependencies:PixiDependencies){\r\n        return new PixieEngineCreator(gameDependencies);\r\n    }\r\n}", "import { AnimationComponent2 } from \"../../../components/animation-component\";\r\nimport { Component } from \"../../component/component\";\r\nimport { IPositionComponent } from \"../../component/components/position/iposition-component\";\r\nimport { PositionComponent } from \"../../component/components/position/position-component\";\r\nimport { GenericCameras } from \"../../dependencies/generic-cameras\";\r\nimport { ICameras } from \"../../dependencies/icameras\";\r\nimport { Entity } from \"../../entity/entity\";\r\nimport { EntityUpdateArgs } from \"../../entity/entity-update-args\";\r\nimport { EventType } from \"../../events/EventType\";\r\nimport { EventManager } from \"../../events/event-manager\";\r\nimport { Game } from \"../../game\";\r\nimport { EntitySystem } from \"../../system/system\";\r\nimport { SystemArgs } from \"../../system/system-args\";\r\nimport { IEngineCreator } from \"../sprite-dependency/iengine-creator\";\r\nimport { PixiGame } from \"../pixi-game\";\r\nimport { TileComponent } from \"../../../components/tile-component/tile-component\";\r\n\r\nexport class GenericRenderSystem extends EntitySystem {\r\n    creator: IEngineCreator;\r\n    cameras: GenericCameras;\r\n    pixieGame: PixiGame;\r\n    constructor(game:Game, entityId:string){\r\n        super(game);\r\n        const deps = this.game.gameDependencies;\r\n        deps.checkDependency(deps.engineCreator);\r\n        this.creator = deps.engineCreator;\r\n        deps.checkDependency(deps.cameras);\r\n        this.cameras = <GenericCameras>deps.cameras;\r\n        game.eventManager.addListener(EventType.entityMoved, (event)=>{\r\n            const newX:number = event.eventData.x;\r\n            const newY:number = event.eventData.y;\r\n            const entityId:number = event.eventData.entityId;\r\n            const sprite = this.creator.createEngineSprite(entityId.toString());\r\n            sprite.x = this.cameras.transformX(newX);\r\n            sprite.y = this.cameras.transformY(newY);\r\n        })\r\n        this.pixieGame = PixiGame.createSingleton(game.gameDependencies);\r\n    }\r\n    oncePerLoop = (args:SystemArgs) => {\r\n        const first = args.entity;\r\n        const tiles = <TileComponent>first.getComponent(\"tile\");\r\n        this.pixieGame.renderTiles(tiles, this.cameras);\r\n    };\r\n    targetComponents:Component[];\r\n\r\n    apply(args:SystemArgs):void{\r\n        // const entity = args.entity;\r\n        // const position = <PositionComponent>entity.getComponent(\"position\");\r\n        // const animation = <AnimationComponent>entity.getComponent(\"animation\");\r\n\r\n    };\r\n    applyEvents(entity:Entity, eventManager:EventManager):void{\r\n    }\r\n    static create(game:Game, entityId?:string):GenericRenderSystem{\r\n    return new GenericRenderSystem(game, entityId);\r\n    };\r\n    \r\n}", "import { ComponentFactory } from \"../component/component-factory\";\r\nimport { GenericCameras } from \"../dependencies/generic-cameras\";\r\nimport { EntityFactory } from \"../entity/entity-factory\";\r\nimport { EventManager } from \"../events/event-manager\";\r\nimport { Game } from \"../game\";\r\nimport { GenericAnimationComponent } from \"./pixi-components/generic-animation-component\";\r\nimport { GenericPositionComponent } from \"./pixi-components/generic-position-component\";\r\nimport { PixiDependencies } from \"./pixi-dependencies\";\r\nimport { PixiGame } from \"./pixi-game\";\r\nimport { PixiSpriteManager } from \"./pixi-sprite-manager\";\r\nimport { PixieEngineCreator } from \"./sprite-dependency/pixie-engine-creator\";\r\nimport { GenericRenderer } from \"./generic-render\";\r\nimport { GenericRenderSystem } from \"./systems/generic-render-system\";\r\n\r\nexport function pixiGameBuilder(metadata:{[key:string]: {width:number, height:number}} = null):Game{\r\n    const deps = new PixiDependencies()\r\n    deps.imgMetaData = metadata;\r\n    deps.pixiGame = PixiGame.createSingleton(deps); \r\n    deps.spriteManager = PixiSpriteManager.create(deps);\r\n    // deps.cameras = \r\n    // deps.renderer = HtmlRenderer.create();\r\n    deps.renderer = GenericRenderer.create();\r\n    deps.cameras = GenericCameras.create();\r\n    deps.engineCreator = PixieEngineCreator.create(deps);\r\n    deps.eventManager = EventManager.create();\r\n    deps.componentFactory = ComponentFactory.create(deps);\r\n    deps.entityFactory = EntityFactory.create(deps);\r\n\r\n    const game = Game.createCustom(deps)\r\n    game.registerComponent(GenericPositionComponent);\r\n    game.registerComponent(GenericAnimationComponent);\r\n    game.addSystem(GenericRenderSystem.create(game));\r\n    game.addStarter(()=>{\r\n        setTimeout(()=>deps.pixiGame.start(), 5000);\r\n    });\r\n    game.addStarter(()=>{\r\n        deps.pixiGame.app.ticker.add((delta)=>{\r\n            game.step(delta*15);\r\n        });\r\n    });\r\n    return game;\r\n}", "import { PositionComponent } from \"../engine/component/components/position/position-component\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\nimport { EntityRegistration } from \"../engine/entity/entity-registration\";\r\nimport { GameDependencies } from \"../engine/dependencies/game-dependencies\";\r\n\r\nexport class LinesEntity implements EntityRegistration{\r\n    create(gameDependencies: GameDependencies, entity: Entity): Entity {\r\n        var position:PositionComponent = <PositionComponent>entity.addComponent(\"position\");\r\n        return entity;\r\n    }\r\n}", "import { ClickableComponent } from \"../components/clickable-component\";\r\nimport { PositionComponent } from \"../engine/component/components/position/position-component\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\nimport { EventManager } from \"../engine/events/event-manager\";\r\nimport { EventType } from \"../engine/events/EventType\";\r\nimport { GameEvent } from \"../engine/events/game-event\";\r\nimport { Game } from \"../engine/game\";\r\nimport { HtmlRenderer } from \"../engine/renderers/implementations/html/html-renderer\";\r\nimport { EntitySystem } from \"../engine/system/system\";\r\nimport { ClickableEntity } from \"../entities/clickable-entity\";\r\nimport { Renderer } from '../engine/renderers/render';\r\nimport { FirstEntity } from \"../entities/first-entity\";\r\nimport { SystemArgs } from \"../engine/system/system-args\";\r\n\r\nexport class ClickSystem extends EntitySystem{\r\n    constructor(game:Game){\r\n        super(game);\r\n        this.game.eventManager.addListener(EventType.mouseUp, (data)=>{\r\n            this.clicks.push(data);\r\n        });\r\n        this.renderer = game.renderer;\r\n    }\r\n    clicks: GameEvent[] = [];\r\n    clicksToProcessThisLoop: GameEvent[] = [];\r\n    renderer: Renderer;\r\n    private clearClicksAndMoveClicksToProcess(){\r\n        for (let i=0;i<this.clicksToProcessThisLoop.length;i++){\r\n            this.clicksToProcessThisLoop.pop();\r\n        }\r\n        let numClicks = this.clicks.length;\r\n        for (let i=0;i<numClicks;i++){\r\n            this.clicksToProcessThisLoop.push(this.clicks.pop());\r\n        }\r\n    }\r\n\r\n    apply(args:SystemArgs): void {\r\n        const entity = args.entity;\r\n        if(entity instanceof FirstEntity)this.clearClicksAndMoveClicksToProcess();\r\n        let clickable = <ClickableComponent>entity.getComponent(\"click\", true);\r\n        let position = <PositionComponent>entity.getComponent(\"position\", true);\r\n        if (clickable == null)return;\r\n        if (position == null)return;\r\n        this.clicksToProcessThisLoop.forEach((event)=>{\r\n            let x = event?.eventData.x;\r\n            let y = event?.eventData.y;\r\n            if (x == null || y == null)return;\r\n            if (this.pointInPosition(x, y, position)){\r\n                clickable.click();\r\n            }\r\n        });\r\n    }\r\n\r\n    applyEvents(entity: Entity, eventManager: EventManager): void {\r\n        \r\n    }\r\n\r\n    pointInPosition(x:number, y:number, position:PositionComponent):boolean{\r\n        if (position.applyOffsets){\r\n            let offset = this.renderer.getOffset();\r\n            x += offset[0];\r\n            y += offset[1];\r\n        }\r\n        let leftx = position.x - position.width/2;\r\n        let rightx = position.x + position.width/2;\r\n        let topy = position.y - position.height;\r\n        let bottomy = position.y;\r\n        return x > leftx && x < rightx && y > topy && y < bottomy;\r\n    }\r\n\r\n    static create(game:Game):ClickSystem{\r\n        return new ClickSystem(game);\r\n    }\r\n}", "import { EntitySystem } from '../engine/system/system';\r\nimport { Entity } from '../engine/entity/entity';\r\nimport { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { FirstEntity } from '../entities/first-entity';\r\nimport { Game } from '../engine/game';\r\nimport { ProjectileEntity } from '../entities/projectile-entity';\r\nimport { GameEvent } from '../engine/events/game-event';\r\nimport { EventType } from '../engine/events/EventType';\r\nimport { SystemArgs } from '../engine/system/system-args';\r\n\r\nexport class CollisionSystem extends EntitySystem{\r\n    constructor(game:Game){\r\n        super(game);\r\n    }\r\n    movingEntities:{[key:number]:Entity}={};\r\n    colliding:{[key:string]:Entity[]}={};\r\n    numCollisions:number=0;\r\n\r\n    private distance(e1:Entity, e2:Entity){\r\n        var p1:PositionComponent = <PositionComponent>e1.getComponent(\"position\");\r\n        var p2:PositionComponent = <PositionComponent>e2.getComponent(\"position\");\r\n        var dx = p2.x - p1.x;\r\n        var dy = p2.y - p1.y;\r\n        return Math.sqrt(dx*dx + dy*dy);\r\n    }\r\n\r\n    private checkCol(e1:Entity, e2:Entity) {\r\n        var distance:number = this.distance(e1, e2);\r\n        var p1:PositionComponent = <PositionComponent>e1.getComponent(\"position\");\r\n        var mask:number = ((p1.width) + (p1.height))/4;\r\n        var collision = distance < mask;\r\n        return collision;\r\n    }\r\n\r\n    private hashCollision(e1:Entity, e2:Entity){\r\n        if(e1.id > e2.id){\r\n            [e1, e2] = [e2, e1];\r\n        }\r\n        return e1.id.toString() + \":\" + e2.id.toString();\r\n    }\r\n\r\n    private addCollision(e1:Entity, e2:Entity){\r\n        var hash:string;\r\n        hash = this.hashCollision(e1, e2);\r\n        if(!(hash in this.colliding)){\r\n            this.colliding[hash] = [e1, e2];\r\n            this.numCollisions++;\r\n        }\r\n    }\r\n\r\n    private removeCollision(e1:Entity, e2:Entity){\r\n        var hash:string = this.hashCollision(e1, e2);\r\n        if (hash in this.colliding){\r\n            delete this.colliding[hash];\r\n            this.numCollisions--;\r\n        }\r\n    }\r\n\r\n    private emitCollision(e1:Entity, e2:Entity):void{\r\n        e1.emit(GameEvent.create(\r\n            EventType.collision,\r\n            e2\r\n        ));\r\n        e2.emit(GameEvent.create(\r\n            EventType.collision,\r\n            e1\r\n        ));\r\n    }\r\n\r\n    private removeMovingEntity(id:number):void{\r\n        delete this.movingEntities[id];\r\n    }\r\n\r\n    apply(args:SystemArgs):void{\r\n        const entity = args.entity;\r\n        if(entity instanceof FirstEntity){\r\n            var collidingEntities:Entity[];\r\n            for(var key in this.colliding){\r\n                collidingEntities = this.colliding[key];\r\n                collision = this.checkCol(collidingEntities[0], collidingEntities[1])\r\n                if(collision && !collidingEntities[0].destroyed && !collidingEntities[1].destroyed){\r\n                    this.emitCollision(collidingEntities[0], collidingEntities[1]);\r\n                } else {\r\n                    this.removeCollision(collidingEntities[0], collidingEntities[1]);\r\n                }\r\n            }\r\n\r\n            //remove destroyed moving entities\r\n            for(let id in this.movingEntities){\r\n                if(this.movingEntities[id].destroyed){\r\n                    this.removeMovingEntity(parseInt(id));\r\n                }\r\n            }\r\n        }\r\n        var position:PositionComponent = <PositionComponent>entity.getComponent(\"position\");\r\n        var collision:boolean;\r\n        var entityTarget:Entity;\r\n        \r\n        //for each moving entity check collision\r\n        for(let id in this.movingEntities){\r\n            entityTarget = this.movingEntities[id];\r\n            collision = this.checkCol(entity, entityTarget);\r\n            if(collision){\r\n                this.addCollision(entity, entityTarget);\r\n            }\r\n        }\r\n\r\n        //add entity to entities to be checked against all other objects\r\n        //this only checks collisions for objects that are moving\r\n        if(position.moved){\r\n            this.movingEntities[entity.id] = entity;\r\n        } else {\r\n            this.removeMovingEntity(entity.id);\r\n        }\r\n        if(entity instanceof ProjectileEntity){\r\n            let position = <PositionComponent>entity.getComponent(\"position\");\r\n        }\r\n    };\r\n\r\n    applyEvents(entity:Entity):void{\r\n    }\r\n\r\n    static create(game:Game):CollisionSystem{\r\n        return new CollisionSystem(game);\r\n    }\r\n}", "import { EntitySystem } from '../engine/system/system';\r\nimport { Entity } from '../engine/entity/entity';\r\nimport { AnimationComponent2 } from '../components/animation-component';\r\nimport { CropComponent } from '../components/crop-component';\r\nimport { ProjectileEntity } from '../entities/projectile-entity';\r\nimport { PlayerEntity } from '../entities/player-entity';\r\nimport { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { Game } from '../engine/game';\r\nimport { InventoryComponent } from '../components/inventory-component/inventory-component';\r\nimport { GameEvent } from '../engine/events/game-event';\r\nimport { EventType } from '../engine/events/EventType';\r\nimport { CropHarvesterComponent } from '../components/crop-harvester-component';\r\nimport { SystemArgs } from '../engine/system/system-args';\r\n\r\nexport class CropSystem extends EntitySystem {\r\n    constructor(game:Game){\r\n        super(game);\r\n    }\r\n    apply(args:SystemArgs):void{\r\n        const entity = args.entity;\r\n        var a:AnimationComponent2 = <AnimationComponent2>entity.getComponent(\"animation\", true);\r\n        var c:CropComponent = <CropComponent>entity.getComponent(\"crop\", true);\r\n        var p:PositionComponent = <PositionComponent>entity.getComponent(\"position\", true);\r\n        if(a==null||c==null){\r\n            return;\r\n        }\r\n        if (c.timeSinceGrowth == 0 || c.timeSinceGrowth==1){\r\n            a.setSprite(c.growthSprites[c.growthStage]);\r\n        }\r\n    };\r\n\r\n    applyEvents(entity:Entity):void{\r\n        var c:CropComponent = <CropComponent>entity.getComponent(\"crop\", true);\r\n        if(c==null)return;\r\n\r\n        var event:GameEvent;\r\n        for(var i:number=0;i<entity.targetedEvents.length;i++){\r\n            event = entity.targetedEvents[i];\r\n            this.handleEvent(event, entity);\r\n        }\r\n    };\r\n    static create(game:Game):EntitySystem{\r\n        return new CropSystem(game);\r\n    };\r\n\r\n    private handleCollision(event:GameEvent, entity:Entity){\r\n        if(!(event.eventData instanceof Entity)){\r\n            return;\r\n        }\r\n        let collidedEntity:Entity = <Entity>event.eventData;\r\n        let cropHarvester:CropHarvesterComponent;\r\n        try {\r\n            cropHarvester = <CropHarvesterComponent>collidedEntity.getComponent(\"cropHarvester\");\r\n        } catch {\r\n            return;\r\n        }\r\n        if(!cropHarvester.harvesting) {\r\n            return;\r\n        }\r\n\r\n        let crop:CropComponent = <CropComponent>entity.getComponent(\"crop\");\r\n        let playerInventory:InventoryComponent;\r\n        playerInventory = <InventoryComponent>collidedEntity.getComponent(\"inventory\");\r\n        if(crop.isGrown()){\r\n            playerInventory.addItem(crop.cropName, 1);\r\n        }\r\n        this.game.destroy(entity);\r\n\r\n    }\r\n\r\n    private handleEvent(event:GameEvent, entity:Entity):void{\r\n        switch (event.eventName){\r\n            case EventType.collision:\r\n                this.handleCollision(event, entity);\r\n                break;\r\n        }\r\n    }\r\n}", "import { EntitySystem } from '../engine/system/system';\r\nimport { Entity } from '../engine/entity/entity';\r\nimport { Game } from '../engine/game';\r\nimport { HealthComponent } from '../components/health-component';\r\nimport { GameEvent } from '../engine/events/game-event';\r\nimport { EventType } from '../engine/events/EventType';\r\nimport { SystemArgs } from '../engine/system/system-args';\r\nexport class HealthSystem extends EntitySystem{\r\n    constructor(game:Game){\r\n        super(game)\r\n    }\r\n    apply(args:SystemArgs){\r\n\r\n    }\r\n    applyEvents(entity:Entity){\r\n        var health:HealthComponent = <HealthComponent>entity.getComponent(\"health\", true);\r\n        if(health == null)return;\r\n\r\n        var events:GameEvent[] = entity.targetedEvents;\r\n        var event:GameEvent;\r\n        //console.log(entity)\r\n        //console.log(health)\r\n        //console.log(entity.targetedEvents.length)\r\n        for(var i=0;i<events.length;i++){\r\n            event = events[i];\r\n            switch(event.eventName){\r\n                case EventType.inflictDamage:\r\n                    //console.log('health')\r\n                    this.handleDamage(entity, event);\r\n                break;\r\n            }\r\n        }\r\n        entity.targetedEvents = [];\r\n    }\r\n    handleDamage(entity:Entity, event:GameEvent){\r\n        if(event.eventData === null){\r\n            event.eventData = {damage:50};\r\n        }\r\n        var health:HealthComponent = <HealthComponent>entity.getComponent(\"health\", true);\r\n        health.health -= event.eventData.damage;\r\n        if (health.health < 0){\r\n            this.game.destroy(entity);\r\n        }\r\n    }\r\n    static create(game:Game){\r\n        return new HealthSystem(game);\r\n    }\r\n}", "import { EntitySystem } from \"../engine/system/system\";\r\nimport { Game } from \"../engine/game\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\nimport { InventoryComponent } from \"../components/inventory-component/inventory-component\";\r\nimport { InventoryItemEntity } from \"../entities/inventory-item-entity\";\r\nimport { PositionComponent } from \"../engine/component/components/position/position-component\";\r\nimport { TextComponent } from \"../components/text-component/text-component\";\r\nimport { InventoryItem } from \"../components/inventory-component/inventory-item\";\r\nimport { SystemArgs } from \"../engine/system/system-args\";\r\n\r\nexport class InventorySystem extends EntitySystem {\r\n    constructor(game:Game){\r\n        super(game);\r\n    }\r\n    static create(game:Game) {\r\n        return new InventorySystem(game);\r\n    }\r\n\r\n    apply(args:SystemArgs):void{\r\n        const entity = args.entity;\r\n        let inventory:InventoryComponent = <InventoryComponent>entity.getComponent(\"inventory\", true);\r\n        let entityPosition:PositionComponent = <PositionComponent>entity.getComponent(\"position\", true);\r\n        if(inventory == null)return;\r\n        if(entityPosition == null)return;\r\n        if(inventory.inventoryItemEntities.length == 0){\r\n            for(let i:number=0;i<10;i++){\r\n                inventory\r\n                .inventoryItemEntities\r\n                .push(this.game.addEntity(\"inventoryItem\"));\r\n            }\r\n        }\r\n        let itemSlots:InventoryItem[] = inventory.getItems();\r\n        for(let i:number=0;i<inventory.inventoryItemEntities.length;i++){\r\n            let inventoryItem:Entity;\r\n            let itemPosition:PositionComponent;\r\n            inventoryItem = inventory.inventoryItemEntities[i];\r\n            itemPosition = <PositionComponent>inventoryItem.getComponent(\"position\");\r\n            if(itemPosition == null){\r\n                console.log(\"Warning: inventory item lost position component\");\r\n                continue;\r\n            }\r\n            itemPosition.x = entityPosition.x - 4*100 - 50 + i * 100 + entityPosition.vx;\r\n            itemPosition.y = entityPosition.y + 350 + entityPosition.vy;\r\n            itemPosition.x -= entityPosition.vx;\r\n            itemPosition.y -= entityPosition.vy;\r\n            \r\n            let text:TextComponent = <TextComponent>inventoryItem.getComponent(\"text\");\r\n            if(itemSlots[i].itemQuantity != 0 ){\r\n                text.setText(itemSlots[i].itemQuantity.toString());\r\n            }\r\n        }\r\n    }\r\n\r\n    applyEvents(entity:Entity):void{\r\n\r\n    }\r\n}", "import { AnimationComponent2 } from \"../components/animation-component\";\r\nimport { ClickableComponent } from \"../components/clickable-component\";\r\nimport { PositionComponent } from \"../engine/component/components/position/position-component\";\r\nimport { SpriteId } from \"../components/tile-component/sprite-id\";\r\nimport { Tile } from \"../components/tile-component/tile\";\r\nimport { TileComponent } from \"../components/tile-component/tile-component\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\nimport { EventManager } from \"../engine/events/event-manager\";\r\nimport { EventType } from \"../engine/events/EventType\";\r\nimport { GameEvent } from \"../engine/events/game-event\";\r\nimport { Game } from \"../engine/game\";\r\nimport { EntitySystem } from \"../engine/system/system\";\r\nimport { SystemArgs } from \"../engine/system/system-args\";\r\nimport { ClickableEntity } from \"../entities/clickable-entity\";\r\n\r\nexport class MapBuilderSystem extends EntitySystem{\r\n    private clicks:GameEvent[] = [];\r\n    private openBuilder:boolean = false;\r\n    private tilePallete:Entity[] = [];\r\n    private selectedSpriteId: SpriteId = SpriteId.create(\"soil\", 0);\r\n    constructor(game:Game){\r\n        super(game);\r\n        this.game.eventManager.addListener(EventType.mouseUp, (data)=>{\r\n            if(!this.openBuilder)return;\r\n            this.clicks.push(data);\r\n        });\r\n        this.game.eventManager.addListener(EventType.tildUp, (data)=>{\r\n            this.openBuilder = !this.openBuilder;\r\n            this.createPalleteEntities();\r\n        });\r\n    }\r\n    apply(args:SystemArgs): void {\r\n        const entity = args.entity;\r\n        let tileComponent = <TileComponent>entity.getComponent(\"tile\", true);\r\n        if (tileComponent == null) return;\r\n        if (!this.openBuilder)return;\r\n        if (this.clicks.length == 0)return;\r\n        let event = this.clicks.pop();\r\n        let x = event.eventData.x;\r\n        let y = event.eventData.y;\r\n        let tileToChange = this.mouseCoordToTile(x, y, tileComponent);\r\n        const tileCopy = JSON.parse(JSON.stringify(this.selectedSpriteId));\r\n        tileToChange.spriteIds.push(tileCopy);\r\n    }\r\n    createPalleteEntities(){\r\n        let entity = this.game.getById(0);\r\n        let tileComponent = <TileComponent>entity.getComponent(\"tile\", true);\r\n        let tileWidth = tileComponent.tileWidth/1.5;\r\n        const panel = this.game.addEntity('uipanel');\r\n        // const panel = this.game.addEntity(\"villager\");\r\n        const panelPosition = <PositionComponent>panel.getComponent(\"position\");\r\n        panelPosition.width = tileWidth*6;\r\n        panelPosition.height = tileWidth * 11;\r\n        panelPosition.x = panelPosition.width/2;\r\n        panelPosition.y = -panelPosition.height;\r\n        panelPosition.h = 2*panelPosition.height;\r\n\r\n\r\n        for(let i=0;i<tileComponent.tileSpriteNames.length-0;i++){\r\n            for(let i2=0;i2<25;i2++){\r\n                let spriteName = tileComponent.tileSpriteNames[i];\r\n                let tileButton = this.game.addEntity(\"click\");\r\n                this.tilePallete.push(tileButton);\r\n                let animation = <AnimationComponent2>tileButton.getComponent(\"animation\");\r\n                let position = <PositionComponent>tileButton.getComponent(\"position\");\r\n                let clickable = <ClickableComponent>tileButton.getComponent(\"click\");\r\n                animation.setSpriteNumber(spriteName, i2);\r\n                position.width = tileWidth;\r\n                position.height = tileWidth;\r\n                position.x = ((i2%5) * tileWidth) + tileWidth/2;\r\n                position.y = Math.floor(((i*24)+i2)/5) * tileWidth;\r\n                position.x+=panelPosition.width/2 - 5*tileWidth/2;\r\n                position.y+=panelPosition.height/2 - 5*tileWidth/2 - tileWidth;\r\n                position.applyOffsets = false;\r\n                clickable.addListener(()=>{\r\n                    console.log(\"clicking: \"+ spriteName + i2.toString());\r\n                    this.selectedSpriteId.spriteName = spriteName;\r\n                    this.selectedSpriteId.spriteNumber = i2;\r\n                });\r\n            }\r\n        }\r\n    }\r\n    mouseCoordToTile(x:number, y:number, tileComponent:TileComponent){\r\n        let xOffset = this.game.renderer.offset[0];\r\n        let yOffset = this.game.renderer.offset[1];\r\n        return tileComponent.coordToTile(x + xOffset, y + yOffset)[0];\r\n    }\r\n    applyEvents(entity: Entity, eventManager: EventManager): void {\r\n        \r\n    }\r\n    static create(game:Game):MapBuilderSystem{\r\n        return new MapBuilderSystem(game);\r\n    }\r\n}", "import { EntitySystem } from '../engine/system/system';\r\nimport { Entity } from '../engine/entity/entity';\r\nimport { Game } from '../engine/game';\r\nimport { NeuralFightComponent } from '../components/neural-fight-component';\r\nimport { GameEvent } from '../engine/events/game-event';\r\nimport { SystemArgs } from '../engine/system/system-args';\r\n\r\ndeclare var synaptic:any;\r\n\r\nexport class NeuralFightSystem extends EntitySystem{\r\n    constructor(game:Game){\r\n        super(game);\r\n    }\r\n\r\n    static create(game:Game){\r\n        return new NeuralFightSystem(game);\r\n    }\r\n\r\n    apply(args:SystemArgs){\r\n        const entity = args.entity;\r\n        var neural:NeuralFightComponent = <NeuralFightComponent>entity.getComponent(\"neural\", true);\r\n        if(neural == null){\r\n            return;\r\n        }\r\n        //console.log()\r\n    }\r\n\r\n    applyEvents(entity:Entity){\r\n        var events:GameEvent[] = entity.targetedEvents;\r\n        var event:GameEvent;\r\n        for(var i=0;i<events.length;i++){\r\n            event = events[i];\r\n        }\r\n    }\r\n}\r\n", "import { Entity } from \"../engine/entity/entity\";\r\nimport { EventManager } from \"../engine/events/event-manager\";\r\nimport { Game } from \"../engine/game\";\r\nimport { EntitySystem } from \"../engine/system/system\";\r\nimport {ParticleComponent} from \"../components/particle-componet\";\r\nimport { PositionComponent } from \"../engine/component/components/position/position-component\";\r\nimport { SystemArgs } from \"../engine/system/system-args\";\r\n\r\nexport class ParticleSystem extends EntitySystem{\r\n    constructor(game:Game){\r\n        super(game);\r\n    }\r\n\r\n    static create(game:Game){\r\n        return new ParticleSystem(game);\r\n    }\r\n\r\n    addParticles(center: ParticleComponent, centerPosition: PositionComponent){\r\n        if (center.particles.length >= center.targetParticles)return;\r\n        while(center.particles.length < center.targetParticles){\r\n            center.particles.push(this.game.addEntity(\"particle\"));\r\n            let position = <PositionComponent>center.particles[center.particles.length-1].getComponent(\"position\");\r\n            position.x = centerPosition.x - Math.random()*30;\r\n            position.y = centerPosition.y - Math.random()*30;\r\n            // position.vx = Math.random()*.5;\r\n            // position.vy = Math.random()*.5;\r\n        }\r\n    }\r\n\r\n    updateParticles(entity: Entity){\r\n        let particles = <ParticleComponent> entity.getComponent(\"particles\", true);\r\n        let position = <PositionComponent> entity.getComponent(\"position\", true);\r\n        particles.time = (particles.time + 1) % 1000;\r\n        \r\n        for(let i:number = 0; i<particles.particles.length; i++){\r\n            let particle = particles.particles[i];\r\n            let method = particles.paths[i];\r\n            let particlePosition = <PositionComponent>particle.getComponent(\"primitive\");\r\n        }\r\n    }\r\n\r\n    apply(args:SystemArgs): void {\r\n        const entity = args.entity;\r\n        let particles = <ParticleComponent> entity.getComponent(\"particles\", true);\r\n        let position = <PositionComponent> entity.getComponent(\"position\", true);\r\n        if (position == null || particles == null) return;\r\n        this.addParticles(particles, position);\r\n        this.updateParticles(entity);\r\n    }\r\n\r\n    applyEvents(entity: Entity, eventManager: EventManager): void {\r\n        \r\n    }\r\n}", "import { EntitySystem } from \"../engine/system/system\";\r\nimport { Game } from \"../engine/game\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\nimport { PlaceItemComponent } from \"../components/place-item/place-item-component\";\r\nimport { PlaceItemRequest } from \"../components/place-item/place-item-request\";\r\nimport { PositionComponent } from \"../engine/component/components/position/position-component\";\r\nimport { SystemArgs } from \"../engine/system/system-args\";\r\n\r\nexport class PlaceItemSystem extends EntitySystem {\r\n    constructor(game:Game){\r\n        super(game);\r\n    }\r\n\r\n    apply(args:SystemArgs):void {\r\n        const entity = args.entity;\r\n        let placeItem:PlaceItemComponent = <PlaceItemComponent>entity.getComponent(\"placeItem\", true);\r\n        if (placeItem == null)return;\r\n        let requests:PlaceItemRequest[] = placeItem.placeItemRequests\r\n        for(let i:number=0;i<requests.length;i++){\r\n            let placeItemRequest:PlaceItemRequest = requests[i];\r\n            if (placeItemRequest.relative){\r\n                let position:PositionComponent;\r\n                try{\r\n                    position = <PositionComponent>entity.getComponent(\"position\");\r\n                    placeItemRequest.coordinates[0] += position.x;\r\n                    placeItemRequest.coordinates[1] += position.y;\r\n                } catch {}\r\n            }\r\n            this.placeItem(placeItemRequest);\r\n        }\r\n        placeItem.placeItemRequests = [];\r\n    }\r\n\r\n    applyEvents() {\r\n\r\n    }\r\n    private tileSize:number=50;\r\n    private realCoordinatesToTileCoordinates(coordinates:number[]):number[] {\r\n        let tileCoords:number[] = coordinates.map((coordinate) => {\r\n           return (Math.floor(coordinate / this.tileSize)) * this.tileSize;\r\n        });\r\n        return tileCoords;\r\n    }\r\n    private placeItem(placeItemRequest:PlaceItemRequest):Entity{\r\n        let realCoordinates = placeItemRequest.coordinates;\r\n        let tileCoordinates = this.realCoordinatesToTileCoordinates(realCoordinates);\r\n        let x:number = tileCoordinates[0];\r\n        let y:number = tileCoordinates[1];\r\n        let newEntity:Entity;\r\n        newEntity = this.game.addEntity(placeItemRequest.entityName);\r\n        let position:PositionComponent = <PositionComponent>newEntity.getComponent(\"position\", true);\r\n        if(position == null){\r\n            return;\r\n        }\r\n        position.x = x;\r\n        position.y = y;\r\n        placeItemRequest.successCallback(newEntity);\r\n        return newEntity;\r\n    }\r\n    static create(game:Game):PlaceItemSystem {\r\n        return new PlaceItemSystem(game);\r\n    }\r\n\r\n}", "import { EntitySystem } from '../engine/system/system';\r\nimport { Game } from '../engine/game';\r\nimport { Entity } from '../engine/entity/entity';\r\nimport { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { GameEvent } from '../engine/events/game-event';\r\nimport { EventType } from '../engine/events/EventType';\r\nimport { SystemArgs } from '../engine/system/system-args';\r\n//import * as Synaptic from \"synaptic\";\r\n\r\nexport class PositionSystem extends EntitySystem{\r\n    /**\r\n     * used for drawing animation components\r\n     */\r\n    constructor(game:Game){\r\n        super(game);\r\n    }\r\n    static create(game:Game):PositionSystem {\r\n        return new PositionSystem(game);\r\n    }\r\n\r\n    apply(args:SystemArgs) {\r\n        //console.log(Synaptic)\r\n    }\r\n    applyEvents(entity:Entity){\r\n        var position:PositionComponent = <PositionComponent>entity.getComponent(\"position\");\r\n        if(position === null)return;\r\n        var events:GameEvent[] = entity.targetedEvents;\r\n        var event:GameEvent;\r\n        for(var i=0;i<events.length;i++){\r\n            event = events[i];\r\n            switch(event.eventName){\r\n                case EventType.changeVelocity:\r\n                    if(\"vx\" in event.eventData){\r\n                        position.vx = event.eventData.vx;\r\n                    }\r\n                    if(\"vy\" in event.eventData){\r\n                        position.vy = event.eventData.vy;\r\n                    }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}", "import { EntitySystem } from '../engine/system/system';\r\nimport { Game } from '../engine/game';\r\nimport { Entity } from '../engine/entity/entity';\r\nimport { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { ProjectileComponent } from '../components/projectile-component';\r\nimport { ProjectileEntity } from '../entities/projectile-entity';\r\nimport { GameEvent } from '../engine/events/game-event';\r\nimport { EventType } from '../engine/events/EventType';\r\nimport { PrimitiveComponent } from '../components/primitive-component';\r\nimport { ParticlesEntity } from '../entities/particles/particles-entity';\r\nimport { SystemArgs } from '../engine/system/system-args';\r\n\r\nexport class ProjectileSystem extends EntitySystem {\r\n\r\n    constructor(game:Game){\r\n        super(game);\r\n    }\r\n\r\n    apply(args:SystemArgs){\r\n        const entity = args.entity;\r\n        var position:PositionComponent = <PositionComponent> entity.getComponent(\"position\", true);\r\n        var projectileComponent:ProjectileComponent = <ProjectileComponent>entity.getComponent(\"projectile\", true);\r\n        //console.log(projectileComponent)\r\n        if(position == null)return\r\n        if(projectileComponent == null)return\r\n        projectileComponent.lifeSpan--;\r\n        if (projectileComponent.lifeSpan == 0){\r\n            //position.y -= 50;\r\n            this.game.destroy(entity);\r\n        }\r\n    }\r\n\r\n    fireProjectile(entity:Entity, vx:number=null, vy:number=null){\r\n        let projectile = this.game.addEntity(\"projectile\");\r\n        let projectileComponent:ProjectileComponent = <ProjectileComponent>projectile.getComponent(\"projectile\");\r\n        let projPosition:PositionComponent = <PositionComponent>projectile.getComponent(\"position\");\r\n        \r\n        var position:PositionComponent = <PositionComponent>entity.getComponent(\"position\");\r\n\r\n        projectileComponent.shooterId = entity.id;\r\n        projPosition.x = position.x;\r\n        projPosition.y = position.y;\r\n        \r\n        if(vx !== null && vy !== null){\r\n            projPosition.vx = vx;\r\n            projPosition.vy = vy;\r\n        } else {\r\n            projPosition.vx = position.faceX;\r\n            projPosition.vy = position.faceY;\r\n        }\r\n        projPosition.faceRight = position.faceRight;\r\n    }\r\n\r\n    applyEvents(entity:Entity){\r\n        var events:GameEvent[] = entity.targetedEvents;\r\n        var event:GameEvent;\r\n        for(var i=0;i<events.length;i++){\r\n            event = events[i];\r\n            switch(event.eventName){\r\n                case EventType.fireProjectile:\r\n                    if(event.eventData !== null){\r\n                        this.fireProjectile(entity, event.eventData.vx, event.eventData.vy);\r\n                    } else {\r\n                        this.fireProjectile(entity);\r\n                    }\r\n                break;\r\n                case EventType.collision:\r\n                    var isProj = entity instanceof ProjectileEntity;\r\n                    if(!isProj)break;\r\n                    var projectile:ProjectileComponent = <ProjectileComponent>entity.getComponent(\"projectile\");\r\n                    var isShooter = projectile.shooterId === event.eventData.id;\r\n                    var isSelf = entity.id === event.eventData.id;\r\n                    var isProjectile = event.eventData instanceof ProjectileEntity;\r\n                    var collidedId:number = event.eventData.id;\r\n                    var collided:Entity = this.game.getById(collidedId);\r\n                    var hitParticle = event.eventData instanceof ParticlesEntity;\r\n                    /*console.log(entity)\r\n                    console.log(event.eventData)\r\n                    console.log(isShooter)\r\n                    console.log(\"-\")*/\r\n                    if(!isShooter && !isSelf && !isProjectile && !hitParticle){\r\n                        var ge = GameEvent.create(EventType.inflictDamage)\r\n                        collided.emit(ge, true);\r\n                        //console.log(other.id)\r\n                        //console.log(other.targetedEvents.length);\r\n                        this.game.destroy(entity);\r\n                    }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    static create(game:Game):ProjectileSystem{\r\n        return new ProjectileSystem(game);\r\n    }\r\n}", "import { EntitySystem } from '../engine/system/system';\r\nimport { Entity } from '../engine/entity/entity';\r\nimport { WasdComponent } from '../components/wasd-component';\r\nimport { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { Game } from '../engine/game';\r\nimport { InventoryComponent } from '../components/inventory-component/inventory-component';\r\nimport { EventManager } from '../engine/events/event-manager';\r\nimport { GameEvent } from '../engine/events/game-event';\r\nimport { EventType } from '../engine/events/EventType';\r\nimport { PlaceItemRequest } from '../components/place-item/place-item-request';\r\nimport { PlaceItemComponent } from '../components/place-item/place-item-component';\r\nimport { CropHarvesterComponent } from '../components/crop-harvester-component';\r\nimport { CropComponent } from '../components/crop-component';\r\nimport { Component } from '../engine/component/component';\r\nimport { TransitionComponent } from '../components/transitions/transition-component';\r\nimport { AnimationComponent } from '../engine/component/components/animation/animation-component';\r\nimport { WeaponComponent } from '../components/weapon-component';\r\nimport { SystemArgs } from '../engine/system/system-args';\r\nimport { GenericPositionComponent } from '../engine/pixi-integration/pixi-components/generic-position-component';\r\n\r\nexport class WasdSystem extends EntitySystem {\r\n    constructor(game:Game){\r\n        super(game);\r\n        game.eventManager.addListener(EventType.touchStart, (e)=>{\r\n            this.move = true;\r\n            this.touchStart.x = e.eventData.x;\r\n            this.touchStart.y = e.eventData.y\r\n        });\r\n        game.eventManager.addListener(EventType.touchEnd, ()=>{\r\n            this.move = false;\r\n            this.stop = true;\r\n        });\r\n    }\r\n    private move:boolean = false;\r\n    private stop:boolean = false;\r\n    private touchStart:{x:number,y:number} = {x:0,y:0};\r\n    static create(game:Game):WasdSystem{\r\n        var wasd:WasdSystem = new WasdSystem(game);\r\n        //eventManager.addListener(EventType.wDown, function(){console.log(\"w down\")});\r\n        return wasd;\r\n    }\r\n\r\n    apply(args:SystemArgs){\r\n        const entity = args.entity;\r\n        const position = <GenericPositionComponent>entity.getComponent(\"position\", true);\r\n        const wasd = <WasdComponent>entity.getComponent(\"wasd\", true);\r\n        if (position == null) return;\r\n        if (wasd == null) return;\r\n        if (this.move){\r\n            if (this.touchStart.x > window.innerWidth/2)position.vx = 10;\r\n            else position.vx = -10;\r\n            if (this.touchStart.y > window.innerHeight/2)position.vy = 10;\r\n            else position.vy = -10;\r\n        }\r\n        if (this.stop){\r\n            position.vx = 0;\r\n            position.vy = 0;\r\n            this.stop = false;\r\n        }\r\n    }\r\n\r\n    applyEvents(entity:Entity, eventManager:EventManager){\r\n        var events:GameEvent[] = eventManager.events;\r\n        var event:GameEvent;\r\n        var wasdComponent:WasdComponent= <WasdComponent>entity.getComponent(\"wasd\", true);\r\n        if (wasdComponent == null)return;\r\n        var position:PositionComponent = <PositionComponent>entity.getComponent(\"position\");\r\n        var animation:AnimationComponent = <AnimationComponent>entity.getComponent(\"animation\");\r\n        var transition:TransitionComponent = <TransitionComponent>entity.getComponent(\"transition\");\r\n        \r\n        var speed:number = wasdComponent.speed;\r\n        var sprite:string = wasdComponent.sprite;\r\n        var walkSprite:string = wasdComponent.walkSprite;\r\n        if (events.length > 0){\r\n            //console.log(events)\r\n        }\r\n        for (var i=0;i<events.length;i++){\r\n            event = events[i];\r\n            //console.log(event)\r\n            // console.log(event.eventName);\r\n            switch(event.eventName){\r\n                case EventType.wDown:\r\n                    if (wasdComponent.dashing)break;\r\n                    animation.setSprite(walkSprite);\r\n                    position.vy = -speed;\r\n                break;\r\n                case EventType.wUp:\r\n                    if (wasdComponent.dashing)break;\r\n                    animation.setSprite(sprite);\r\n                    position.vy = 0;\r\n                break;\r\n                case EventType.aDown:\r\n                    if (wasdComponent.dashing)break;\r\n                    position.faceRight = false;\r\n                    animation.setSprite(walkSprite);\r\n                    position.vx = -speed;\r\n                break;\r\n                case EventType.aUp:\r\n                    if (wasdComponent.dashing)break;\r\n                    animation.setSprite(sprite);\r\n                    position.vx = 0;\r\n                break;\r\n                case EventType.sDown:\r\n                    if (wasdComponent.dashing)break;\r\n                    animation.setSprite(walkSprite);\r\n                    position.vy = speed;\r\n                break;\r\n                case EventType.sUp:\r\n                    if (wasdComponent.dashing)break;\r\n                    animation.setSprite(sprite);\r\n                    position.vy = 0;\r\n                break;\r\n                case EventType.dDown:\r\n                    if (wasdComponent.dashing)break;\r\n                    position.faceRight = true;\r\n                    animation.setSprite(walkSprite);\r\n                    position.vx = speed;\r\n                break;\r\n                case EventType.dUp:\r\n                    if (wasdComponent.dashing)break;\r\n                    animation.setSprite(sprite);\r\n                    position.vx = 0;\r\n                break;\r\n                case EventType.spaceUp:\r\n                    this.dash(wasdComponent, position, animation, transition);\r\n                break;\r\n                case EventType.fUp:\r\n                    let cropHarvester:CropHarvesterComponent;\r\n                    cropHarvester = <CropHarvesterComponent>entity.getComponent(\"cropHarvester\", true);\r\n                    cropHarvester.startHarvest();\r\n                break;\r\n                case EventType.pUp:\r\n                    //console.log(\"p up\")\r\n                    console.log(this.game);\r\n                    const weapon = <WeaponComponent>entity.getComponent(\"weapon\");\r\n                    if (weapon.rotationSpeed == 0){\r\n                        weapon.spin();\r\n                    } else {\r\n                        weapon.sheatheBack();\r\n                    }\r\n                break;\r\n                case EventType.iUp:\r\n                    let inventory:InventoryComponent;\r\n                    inventory = <InventoryComponent>entity.getComponent(\"inventory\", true);\r\n                    inventory.inventoryToString();\r\n                break;\r\n                case EventType.jUp:\r\n                    var ge:GameEvent = GameEvent.create(EventType.fireProjectile);\r\n                    entity.emit(ge);\r\n                break;\r\n            }\r\n        }\r\n        this.updateDashing(entity, wasdComponent, position, animation, transition);\r\n    }\r\n    private updateDashing(entity: Entity, wasdComponent: WasdComponent, position: PositionComponent, animation: AnimationComponent, transition: TransitionComponent){\r\n        if (!wasdComponent.dashing)return;\r\n        if (wasdComponent.dashingTime == Math.floor(wasdComponent.maxDashingTime/2)){\r\n            transition.start(wasdComponent.dashSprite, wasdComponent.dashSpriteNumber, false);\r\n        }\r\n        if (wasdComponent.dashingTime == 0){\r\n            wasdComponent.dashing = false;\r\n            position.vx = 0;\r\n            position.vy = 0;\r\n            position.h = 0;\r\n            return;\r\n        }\r\n        wasdComponent.dashingTime -= 1; \r\n        position.vx = Math.sign(position.faceX) * wasdComponent.dashSpeed;\r\n        position.vy = Math.sign(position.faceY) * wasdComponent.dashSpeed;\r\n    }\r\n    private dash(wasdComponent:WasdComponent, position:PositionComponent, animation:AnimationComponent, transition:TransitionComponent){\r\n        if(wasdComponent.dashing)return;\r\n        wasdComponent.startDashing();\r\n        wasdComponent.dashWidth = position.width;\r\n        wasdComponent.dashHeight = position.height;\r\n        wasdComponent.dashSprite = animation.animationName;\r\n        wasdComponent.dashSpriteNumber = animation.getSpriteNumber();\r\n        transition.start(null, 32);\r\n    }\r\n}", "import { EntitySystem } from '../engine/system/system';\r\nimport { Entity } from '../engine/entity/entity';\r\nimport { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { Game } from '../engine/game';\r\nimport { Renderer } from '../engine/renderers/render';\r\nimport { HtmlRenderer } from '../engine/renderers/implementations/html/html-renderer';\r\nimport { populateSpriteManager } from '../builders/sprite-builder';\r\nimport { RenderOptions } from '../engine/renderers/render-options';\r\nimport { PlayerEntity } from '../entities/player-entity';\r\nimport { FirstEntity } from '../entities/first-entity';\r\nimport { TextComponent } from '../components/text-component/text-component';\r\nimport { TextPlacement } from '../components/text-component/text-placement';\r\nimport { PrimitiveComponent } from '../components/primitive-component';\r\nimport { TileComponent } from '../components/tile-component/tile-component';\r\nimport { Tile } from '../components/tile-component/tile';\r\nimport { SystemArgs } from '../engine/system/system-args';\r\nimport { ICameras } from '../engine/dependencies/icameras';\r\nimport { IPositionComponent } from '../engine/component/components/position/iposition-component';\r\nimport { AnimationComponent } from '../engine/component/components/animation/animation-component';\r\n\r\nexport class RenderSystem extends EntitySystem{\r\n    private camera: ICameras;\r\n    /**\r\n     * used for drawing animation components\r\n     */\r\n    constructor(renderer:Renderer, game:Game){\r\n        super(game);\r\n        this.renderer = renderer;\r\n        this.camera = game.gameDependencies.cameras;\r\n    }\r\n    renderer:Renderer;\r\n\r\n    static create(game:Game):RenderSystem{\r\n        let hr:Renderer = game.renderer;\r\n        return new RenderSystem(hr, game);\r\n    }\r\n\r\n    apply(args:SystemArgs){\r\n        const entity = args.entity;\r\n        if (entity.id == 0){\r\n            this.centerCameraOn(this.camera.center);\r\n            this.renderer.cbox();\r\n            this.renderTileSet(entity);\r\n        }\r\n        this.renderAnimationComponent(entity);\r\n        this.renderText(entity);\r\n        this.renderPrimitive(entity);\r\n    }\r\n    renderTileSet(entity: Entity) {\r\n        let tileComp = <TileComponent>entity.getComponent(\"tile\");\r\n        let tiles = tileComp.tiles;\r\n        let options:RenderOptions = new RenderOptions();\r\n        options.flip = false;\r\n        options.rotate = 0;\r\n        for (let i=0;i<tiles.length;i++){\r\n            let tile = tiles[i];\r\n            let x = this.tileCoordToReal(tileComp.tileWidth, tile.tileX);\r\n            let y = this.tileCoordToReal(tileComp.tileWidth, tile.tileY);\r\n            tile.spriteIds.forEach((spriteId)=>{\r\n                this.renderer.sprite(spriteId.spriteName, x, y, tileComp.tileWidth, tileComp.tileWidth+1, spriteId.spriteNumber, options);\r\n            });\r\n        }\r\n    }\r\n\r\n    private tileCoordToReal(tileWidth: number, coord: number): number{\r\n        return coord * tileWidth;\r\n    }\r\n\r\n    renderText(entity:Entity){\r\n        let p:PositionComponent = <PositionComponent>entity.getComponent(\"position\", true);\r\n        let text:TextComponent = <TextComponent>entity.getComponent(\"text\", true);\r\n        if(p == null || text == null)return;\r\n        for(let i:number=0;i<text.textPlacements.length;i++){\r\n            let tp:TextPlacement = text.textPlacements[i];\r\n            // this.renderer.text(tp.textValue, p.x + tp.offsetX, p.y + tp.offsetY, 10);\r\n            this.renderer.text(tp.textValue, p.x, p.y, 10);\r\n        }\r\n    }\r\n\r\n    renderAnimationComponent(entity:Entity){\r\n        var a:AnimationComponent = <AnimationComponent>entity.getComponent(\"animation\", true);\r\n        var p:PositionComponent = <PositionComponent>entity.getComponent(\"position\", true);\r\n        if (a == null || p == null)return;\r\n        var r:Renderer = this.renderer;\r\n        let options:RenderOptions = new RenderOptions();\r\n        options.flip = !p.faceRight;\r\n        options.rotate = p.rotate;\r\n        options.applyOffsets = p.applyOffsets;\r\n        if (a.isFiltered){\r\n            r.spriteFilter(a.filter, Math.round(p.x), Math.round(p.y + p.h), p.width, p.height, a.getSpriteNumber(), options);\r\n            return;\r\n        }\r\n        r.sprite(a.spriteName, Math.round(p.x), Math.round(p.y + p.h), p.width, p.height, a.getSpriteNumber(), options);\r\n    }\r\n\r\n    renderPrimitive(entity:Entity){\r\n        var primitive:PrimitiveComponent = <PrimitiveComponent>entity.getComponent(\"primitive\", true);\r\n        var position:PositionComponent = <PositionComponent>entity.getComponent(\"position\", true);\r\n        if (primitive == null || position == null) return;\r\n        this.renderer.circle(Math.round(position.x), Math.round(position.y + position.h), 4);\r\n    }\r\n\r\n    centerCameraOn(position:IPositionComponent){\r\n            this.renderer.setOffset([position.x + position.vx, position.y + position.vy]);\r\n    }\r\n\r\n    applyEvents(){}\r\n}", "import { buildEntities } from \"./builders/entity-builder\";\r\nimport { buildSprites } from \"./builders/sprite-builder\";\r\nimport { ClickSystem } from \"./systems/click-system\";\r\nimport { CollisionSystem } from \"./systems/collision-system\";\r\nimport { CropSystem } from \"./systems/crop-system\";\r\nimport { HealthSystem } from \"./systems/health-system\";\r\nimport { InventorySystem } from \"./systems/inventory-system\";\r\nimport { MapBuilderSystem } from \"./systems/map-builder-system\";\r\nimport { NeuralFightSystem } from \"./systems/neural-fight-system\";\r\nimport { ParticleSystem } from \"./systems/particle-system\";\r\nimport { PlaceItemSystem } from \"./systems/place-item-system\";\r\nimport { PositionSystem } from \"./systems/position-system\";\r\nimport { ProjectileSystem } from \"./systems/projectile-system\";\r\nimport { WasdSystem } from \"./systems/wasd-system\";\r\nimport { Game } from './engine/game';\r\nimport { ClickableComponent } from \"./components/clickable-component\";\r\nimport { CropComponent } from \"./components/crop-component\";\r\nimport { FightComponent } from \"./components/fight-component\";\r\nimport { HealthComponent } from \"./components/health-component\";\r\nimport { InventoryComponent } from \"./components/inventory-component/inventory-component\";\r\nimport { NeuralFightComponent } from \"./components/neural-fight-component\";\r\nimport { ParticleComponent } from \"./components/particle-componet\";\r\nimport { PositionComponent } from \"./engine/component/components/position/position-component\";\r\nimport { PrimitiveComponent } from \"./components/primitive-component\";\r\nimport { ProjectileComponent } from \"./components/projectile-component\";\r\nimport { TileComponent } from \"./components/tile-component/tile-component\";\r\nimport { TransitionComponent } from \"./components/transitions/transition-component\";\r\nimport { WasdComponent } from \"./components/wasd-component\";\r\nimport { AnimationComponent } from \"./engine/component/components/animation/animation-component\";\r\nimport { PlaceItemComponent } from \"./components/place-item/place-item-component\";\r\nimport { CropHarvesterComponent } from \"./components/crop-harvester-component\";\r\nimport { TextComponent } from \"./components/text-component/text-component\";\r\nimport { createPhaserGame } from \"./engine/phaser-integration/phaser-builder\";\r\nimport { RenderSystem } from \"./systems/render-system\";\r\nimport { pixiGameBuilder } from \"./engine/pixi-integration/pixi-builder\";\r\nimport { GenericAnimationComponent } from \"./engine/pixi-integration/pixi-components/generic-animation-component\";\r\nimport { WeaponComponent } from \"./components/weapon-component\";\r\nfunction sharedComponents(game:Game){\r\n    game.registerComponent(WasdComponent);\r\n    game.registerComponent(CropComponent);\r\n    game.registerComponent(ProjectileComponent);\r\n    game.registerComponent(FightComponent);\r\n    game.registerComponent(HealthComponent);\r\n    game.registerComponent(NeuralFightComponent);\r\n    game.registerComponent(InventoryComponent);\r\n    game.registerComponent(ParticleComponent);\r\n    game.registerComponent(PrimitiveComponent);\r\n    game.registerComponent(TransitionComponent);\r\n    game.registerComponent(TileComponent);\r\n    game.registerComponent(ClickableComponent);\r\n    game.registerComponent(PlaceItemComponent);\r\n    game.registerComponent(CropHarvesterComponent);\r\n    game.registerComponent(TextComponent);\r\n    game.registerComponent(WeaponComponent);\r\n\r\n}\r\n\r\nfunction sharedSystems(game:Game){\r\n    game.addSystem(WasdSystem.create(game));\r\n    game.addSystem(CropSystem.create(game));\r\n    game.addSystem(CollisionSystem.create(game));\r\n    game.addSystem(ProjectileSystem.create(game));\r\n    // game.addSystem(FightSystem.create(game));\r\n    game.addSystem(HealthSystem.create(game));\r\n    game.addSystem(NeuralFightSystem.create(game));\r\n    game.addSystem(PlaceItemSystem.create(game));\r\n    game.addSystem(InventorySystem.create(game));\r\n    game.addSystem(ParticleSystem.create(game));\r\n    game.addSystem(MapBuilderSystem.create(game));\r\n    game.addSystem(ClickSystem.create(game));\r\n}\r\n\r\nfunction buildComponents(game:Game){\r\n    console.log(\"building game components\");\r\n    game.registerComponent(AnimationComponent);\r\n    game.registerComponent(PositionComponent);\r\n    sharedComponents(game);\r\n}\r\nexport function createPixiGame(){\r\n    console.log(\"creating pixi game\");\r\n    const game = pixiGameBuilder();\r\n    sharedSystems(game);\r\n    buildSprites(game);\r\n    buildEntities(game);\r\n    sharedComponents(game);\r\n    return game;\r\n}\r\n\r\nexport function createPhaserGameGeneric():Game{\r\n    console.log(\"creating phaser game\");\r\n    let game:Game = createPhaserGame();\r\n    sharedSystems(game);\r\n    buildSprites(game);\r\n    buildEntities(game);\r\n    sharedComponents(game);\r\n    return game;\r\n}\r\n\r\n\r\nexport function createGame(game:Game=null):Game{\r\n    if (game == null){\r\n        game = Game.create()\r\n    }\r\n    game.addSystem(PositionSystem.create(game));\r\n    game.addSystem(RenderSystem.create(game));\r\n    sharedSystems(game);\r\n    buildSprites(game)\r\n    buildEntities(game);\r\n    buildComponents(game);\r\n    return game;\r\n}", "import { EntitySystem } from '../engine/system/system';\r\nimport { Entity } from '../engine/entity/entity';\r\nimport { Game } from '../engine/game';\r\nimport { FightComponent } from '../components/fight-component';\r\nimport { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { GameEvent } from '../engine/events/game-event';\r\nimport { EventType } from '../engine/events/EventType';\r\nimport { SystemArgs } from '../engine/system/system-args';\r\n\r\nexport class FightSystem extends EntitySystem {\r\n    constructor(game:Game){\r\n        super(game);\r\n    }\r\n\r\n    get_entity_direction(origin:Entity, destination:Entity){\r\n        var position1:PositionComponent = <PositionComponent>origin.getComponent(\"position\");\r\n        var position2:PositionComponent = <PositionComponent>destination.getComponent(\"position\");\r\n        var dx:number = position2.x - position1.x;\r\n        var dy:number = position2.y - position1.y;\r\n        var hypotenuse:number = Math.sqrt(dx*dx + dy*dy);\r\n        dx /= hypotenuse;\r\n        dy /= hypotenuse;\r\n        \r\n        return {\r\n            dx:dx,\r\n            dy:dy\r\n        }\r\n    }\r\n\r\n    hypotenuse(e1:Entity, e2:Entity):number{\r\n        var position1:PositionComponent = <PositionComponent>e1.getComponent(\"position\");\r\n        var position2:PositionComponent = <PositionComponent>e2.getComponent(\"position\");\r\n        var dx:number = position2.x - position1.x;\r\n        var dy:number = position2.y - position1.y;\r\n        var hypotenuse:number = Math.sqrt(dx*dx + dy*dy);\r\n        return hypotenuse;\r\n    }\r\n\r\n    apply(args:SystemArgs):void{\r\n        const entity = args.entity;\r\n        var fight:FightComponent = <FightComponent>entity.getComponent(\"fight\", true);\r\n        if(fight == null)return;\r\n        var position:PositionComponent = <PositionComponent>entity.getComponent(\"position\");\r\n        //console.log(entity)\r\n        if(!fight.attack)return;\r\n        var hypotenuse:number = this.hypotenuse(entity, fight.target);\r\n\r\n        var direction = this.get_entity_direction(entity, fight.target);\r\n        if(hypotenuse > fight.range){\r\n            direction.dx *= fight.maxSpeed;\r\n            direction.dy *= fight.maxSpeed;\r\n            position.vx = direction.dx;\r\n            position.vy = direction.dy;\r\n        } else {\r\n            position.vx = 0;\r\n            position.vy = 0;\r\n            if(fight.canFire()){\r\n                entity.emit(GameEvent.create(EventType.fireProjectile,\r\n                    {vx:direction.dx*10,vy:direction.dy*10}));\r\n                fight.reloadTimer--;\r\n            }\r\n        }\r\n    };\r\n    applyEvents(entity:Entity):void{\r\n    }\r\n\r\n    static create(game:Game):EntitySystem{\r\n        return new FightSystem(game);\r\n    };\r\n}"],
  "mappings": "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",
  "names": ["average", "EventType", "i", "args", "time", "metadata", "entityId", "metadata", "position", "buildComponents"]
}
