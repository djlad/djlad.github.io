import { Component } from "../../component/component";
import { IPositionComponent } from "../../component/components/position/iposition-component";
import { GameDependencies } from "../../dependencies/game-dependencies";
import { Entity } from "../../entity/entity";
import { EntityUpdateArgs } from "../../entity/entity-update-args";
import { EventManager } from "../../events/event-manager";
import { IEngineSprite } from "../sprite-dependency/iengine-sprite";
export declare class GenericPositionComponent extends Component implements IPositionComponent {
    engineSprite: IEngineSprite;
    static componentName: string;
    events: EventManager;
    entityId: string;
    constructor(game: GameDependencies, entityId: string);
    private speedMultiplier;
    private _vx;
    get vx(): number;
    set vx(vx: number);
    private _vy;
    get vy(): number;
    set vy(vy: number);
    private _rotate;
    get rotate(): number;
    set rotate(radiansToRotate: number);
    get x(): number;
    get y(): number;
    set x(newX: number);
    set y(newY: number);
    get width(): number;
    set width(w: number);
    get height(): number;
    set height(h: number);
    _x: number;
    _y: number;
    h: number;
    private _width;
    private _height;
    flip: boolean;
    _faceRight: boolean;
    get faceRight(): boolean;
    set faceRight(value: boolean);
    faceX: number;
    faceY: number;
    moved: boolean;
    applyOffsets: boolean;
    get pivotX(): number;
    get pivotY(): number;
    get anchorX(): number;
    get anchorY(): number;
    set pivotX(value: number);
    set pivotY(value: number);
    set anchorX(value: number);
    set anchorY(value: number);
    update(entity: Entity, args: EntityUpdateArgs): void;
    static create(game: GameDependencies, entityId: string): GenericPositionComponent;
}
