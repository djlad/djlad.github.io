{
  "version": 3,
  "sources": ["external-global-plugin:phaser", "../src/engine/system/system.ts", "../src/engine/renderers/render-options.ts", "../src/engine/entity/entity.ts", "../src/engine/component/component.ts", "../src/engine/renderers/sprite-animation.ts", "../src/engine/renderers/implementations/html/html-canvas.ts", "../src/engine/renderers/implementations/html/html-rect-sprite.ts", "../src/engine/renderers/implementations/html/html-sprite.ts", "../src/engine/renderers/sprite-manager.ts", "../src/components/wasd-component.ts", "../src/components/crop-component.ts", "../src/components/projectile-component.ts", "../src/components/fight-component.ts", "../src/components/health-component.ts", "../src/components/neural-fight-component.ts", "../src/components/inventory-component/inventory-item.ts", "../src/components/inventory-component/inventory-item-type.ts", "../src/components/inventory-component/item-registry.ts", "../src/components/inventory-component/inventory-component.ts", "../src/engine/component/component-factory.ts", "../src/components/place-item/place-item-request.ts", "../src/components/place-item/place-item-component.ts", "../src/components/crop-harvester-component.ts", "../src/components/text-component/text-placement.ts", "../src/components/text-component/text-component.ts", "../src/components/particle-componet.ts", "../src/components/primitive-component.ts", "../src/components/transitions/transition-component.ts", "../src/components/tile-component/sprite-id.ts", "../src/components/tile-component/tile.ts", "../src/components/tile-component/tile-component.ts", "../src/components/clickable-component.ts", "../src/engine/phaser-integration/phaser-game.ts", "../src/engine/phaser-integration/main-scene.ts", "../src/components/phaser-components/phaser-position-component.ts", "../src/metadata.ts", "../src/engine/phaser-integration/phaser-sprite-manager.ts", "../src/components/phaser-components/phaser-animation-component.ts", "../src/builders/build-components.ts", "../src/entities/first-entity.ts", "../src/engine/events/EventType.ts", "../src/engine/events/game-event.ts", "../src/systems/wasd-system.ts", "../src/systems/crop-system.ts", "../src/entities/projectile-entity.ts", "../src/entities/particles/particles-entity.ts", "../src/systems/projectile-system.ts", "../src/systems/health-system.ts", "../src/systems/position-system.ts", "../src/systems/neural-fight-system.ts", "../src/engine/entity/entity-factory.ts", "../src/engine/events/key-events.ts", "../src/engine/events/event-manager.ts", "../src/engine/renderers/implementations/html/html-renderer.ts", "../src/engine/system/system-args.ts", "../src/engine/entity/entity-update-args.ts", "../src/engine/game.ts", "../src/builders/sprite-builder.ts", "../src/entities/player-entity.ts", "../src/entities/villager-entity.ts", "../src/entities/crop-entity.ts", "../src/entities/inventory-item-entity.ts", "../src/entities/particles/particle-entity.ts", "../src/entities/clickable-entity.ts", "../src/entities/deer-entity.ts", "../src/entities/ui-panel-entity.ts", "../src/builders/entity-builder.ts", "../src/systems/place-item-system.ts", "../src/systems/inventory-system.ts", "../src/systems/particle-system.ts", "../src/systems/map-builder-system.ts", "../src/systems/click-system.ts", "../src/systems/phaser-systems/phaser-render-system.ts", "../src/game-builders.ts", "../src/game.ts"],
  "sourcesContent": ["module.exports = window.Phaser", "import { Component } from '../component/component';\nimport { Entity } from '../entity/entity';\nimport { Game } from '../game';\nimport { EventManager } from '../events/event-manager';\nimport { SystemArgs } from './system-args';\n\nexport class EntitySystem {\n    /**\n     * System that can be applied to an entity\n     * manipulates one or more components through the component's public interface\n     * Do not change components directly through a system\n     */\n    constructor(game:Game){\n        this.game = game;\n    }\n    targetComponents:Component[];\n    game:Game;\n\n    apply(args:SystemArgs):void{\n        throw \"an entity system did not implement apply method.\";\n    };\n    applyEvents(entity:Entity, eventManager:EventManager):void{\n        throw \"an entity did not implement apply Events\";\n    }\n\n    //static create(game:Game):EntitySystem{\n    //    throw \"an entity system has no create method.\"\n    //};\n}\n\n", "export class RenderOptions {\n    flip:boolean=true;\n    rotate:number=0;//in radians\n    applyOffsets:boolean=true;\n}", "import { ComponentFactory } from '../component/component-factory';\nimport { Component } from '../component/component';\nimport { GameEvent } from '../events/game-event';\nimport { EntityUpdateArgs } from './entity-update-args';\n\nexport abstract class Entity {\n    constructor(componentFactory:ComponentFactory){\n        this.componentFactory = componentFactory;\n        Entity.id++\n        this.id = Entity.id;\n    }\n    static id:number=-1;\n    id:number=-1;\n    components:Component[] = [];\n    componentNameToComponent:{[key:string]:Component} = {};\n    componentFactory:ComponentFactory;\n    targetedEvents:GameEvent[] = [];\n    delayedEvents:GameEvent[] = [];\n    destroyed:boolean = false;\n\n    addComponent(componentName:string):Component{\n        var component:Component = this.componentFactory.createComponent(componentName);\n        this.componentNameToComponent[component.componentName] = component;\n        this.components.push(component);\n        return component;\n    }\n\n    getComponent(componentName:string, allowUndefined:boolean=false):Component{\n        return this.componentNameToComponent[componentName];\n    }\n\n    emit(event:GameEvent, delayed=false){\n        if(delayed){\n            this.delayedEvents.push(event);\n        } else {\n            this.targetedEvents.push(event);\n        }\n    }\n\n    update(args:EntityUpdateArgs){\n        for(var i:number=0;i<this.components.length;i++){\n            this.components[i].update(this, args);\n        }\n    }\n\n    abstract handleEvents(events:{[key:string]:GameEvent}):void;\n    \n    static create():Entity{\n        //var cf:ComponentFactory = ComponentFactory.create();\n        //var entity:Entity = new this(cf);\n        //return entity;\n        return null;\n    }\n}\n\n\n\n\n/*\nexport class PlayerEntity extends Entity{\n    constructor(componentFactory:ComponentFactory){\n        super(componentFactory);\n        this.addComponent(\"animation\");\n        this.addComponent(\"position\");\n    }\n    static create():PlayerEntity{\n        var entity = new PlayerEntity(ComponentFactory.create());\n        return entity;\n    }\n}*/", "import { Entity } from \"../entity/entity\";\nimport { EntityUpdateArgs } from \"../entity/entity-update-args\";\nimport { Game } from \"../game\";\n\nexport abstract class Component {\n    constructor(componentName:string){\n        this.componentName = componentName;\n    }\n    componentName:string;\n    abstract update(entity:Entity, args:EntityUpdateArgs):void;\n    static create(){\n        throw \"Component must implement static create function\";\n    };\n    static createWithGame(game:Game){\n    }\n}", "export class SpriteAnimation{\n    constructor(animationName:string, spriteName:string, spriteNumbers:number[], delay:number){\n        this.spriteNumbers = spriteNumbers;\n        this.animationName = animationName;\n        this.spriteName = spriteName;\n        this.delay = delay;\n    }\n    spriteNumbers:number[];\n    animationName:string;\n    spriteName:string;\n    delay:number;\n\n    static create(animationName:string, spriteName:string, spriteNumbers:number[], delay:number=1){\n        var sa:SpriteAnimation = new SpriteAnimation(\n            animationName,\n            spriteName,\n            spriteNumbers,\n            delay\n        );\n        return sa;\n    }\n}", "export class HtmlCanvas\n{\n    constructor(canvas: HTMLCanvasElement)\n    {\n        this.canvas = canvas;\n        this.ctx = this.canvas.getContext(\"2d\");\n    }\n    canvas:HTMLCanvasElement;\n    ctx:CanvasRenderingContext2D;\n    private static canvas: HtmlCanvas = null;\n    public static createSingleton()\n    {\n        if (canvas != null) return HtmlCanvas.canvas;\n        var canvas:HTMLCanvasElement = <HTMLCanvasElement>document.getElementById(\"canvas\");\n        if (canvas === null){\n            canvas = document.createElement(\"canvas\");\n        }\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        canvas.style.margin = \"0\";\n        canvas.style.padding = \"0\";\n        canvas.style.overflow = \"hidden\";\n        canvas.style.position = \"fixed\";\n        canvas.style.top = \"0px\";\n        canvas.style.left = \"0px\";\n        HtmlCanvas.canvas = new HtmlCanvas(canvas);\n        return HtmlCanvas.canvas;\n    }\n}", "import { Sprite } from \"../../sprite\";\nimport { HtmlCanvas } from \"./html-canvas\";\n\nexport class HtmlRectSprite implements Sprite {\n    constructor(spriteImg:HTMLImageElement, widthImgs:number, heightImgs:number, offsetx:number=0, offsety:number=0, frameWidth:number=0, frameHeight:number=0){\n        this.sprite = spriteImg;\n        this.widthImgs = widthImgs;\n        this.heightImgs = heightImgs;\n        this.offsetx = offsetx;\n        this.offsety = offsety;\n        this.frameWidth = frameWidth;\n        this.frameHeight = frameHeight;\n        this.canvas = HtmlCanvas.createSingleton();\n        this.ctx = HtmlCanvas.createSingleton().ctx;\n    }\n    getRGBs(width:number, height:number, spriteNumber: number): ImageData{\n        let fc = this.frameCoords(spriteNumber);\n        let canvas = document.createElement('canvas');\n        let context = canvas.getContext('2d');\n        if (width == null || height == null)\n        {\n            canvas.width = this.frameWidth;\n            canvas.height = this.frameHeight;\n        } else {\n            canvas.width = width;\n            canvas.height = height;\n        }\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        context.drawImage(this.sprite, fc[0], fc[1], this.frameWidth,\n                          this.frameHeight, 0, 0, canvas.width, canvas.height);\n        let pixelData = context.getImageData(0, 0, canvas.width, canvas.height);\n        return pixelData;\n    }\n    drawImage(spriteNumber: number, x: number, y: number, width: number, height: number): void {\n        let fc = this.frameCoords(spriteNumber);\n        this.ctx.drawImage(this.sprite, fc[0], fc[1], this.frameWidth,\n                          this.frameHeight, x, y, width, height);\n    }\n    ctx: CanvasRenderingContext2D;\n    static spriteDir:string = \"../sprites/\";\n    widthImgs:number;\n    heightImgs:number;\n    frameWidth:number=1;\n    frameHeight:number=1;\n    sprite:HTMLImageElement;\n    canvas: HtmlCanvas;\n    loaded: boolean = false;\n    offsetx: number;\n    offsety: number;\n\n    private setFrameDimensions(sprite:HtmlRectSprite){\n        return function(){\n            sprite.frameWidth = sprite.sprite.width/sprite.widthImgs;\n            sprite.frameHeight = sprite.sprite.height/sprite.heightImgs;\n            sprite.loaded = true;\n        }\n    }\n\n    public frameCoords(spriteNum:number){\n        // var frameWidth:number = this.sprite.width/this.widthImgs;\n        // var frameHeight:number = this.sprite.height/this.heightImgs;\n        var frameWidth:number = this.frameWidth;\n        var frameHeight:number = this.frameHeight;\n        const widthImgs = Math.floor(this.sprite.width/frameWidth);\n        var framex:number = spriteNum%widthImgs * frameWidth;\n        var framey:number = Math.floor(spriteNum/widthImgs) * frameHeight;\n        framex += this.offsetx;\n        framey += this.offsety;\n        return [framex, framey];\n    }\n\n    public static create(fileName:string, widthImgs:number, heightImgs:number, offsetx:number=0, offsety:number=0){\n        var spriteImg:HTMLImageElement = new Image();\n        spriteImg.src = this.spriteDir + fileName;\n        const newSprite = new HtmlRectSprite(spriteImg, widthImgs, heightImgs, offsetx, offsety);\n        spriteImg.onload = newSprite.setFrameDimensions(newSprite);\n        return newSprite;\n    }\n\n    public static createWithDimensions(fileName:string, frameWidth:number, frameHeight:number, offsetx:number=0, offsety:number=0){\n        var spriteImg:HTMLImageElement = new Image();\n        spriteImg.src = this.spriteDir + fileName;\n        const newSprite = new HtmlRectSprite(spriteImg, 0, 0, offsetx, offsety, frameWidth, frameHeight);\n        return newSprite;\n    }\n}", "import { HtmlCanvas } from \"./html-canvas\";\nimport {Sprite} from \"../../sprite\";\nexport class HtmlSprite implements Sprite {\n    constructor(fileName:string){\n        var spriteImg:HTMLImageElement = new Image();\n        spriteImg.src = this.spriteDir + fileName;\n        this.sprite = spriteImg;\n        spriteImg.onload = this.setFrameDimensions(this);\n        this.ctx = HtmlCanvas.createSingleton().ctx;\n    }\n    loaded: boolean;\n    getRGBs(spriteNumber: number): ImageData {\n        throw new Error(\"Method not implemented.\");\n    }\n    spriteDir:string = \"../sprites/\";\n    sprite:HTMLImageElement;\n    ctx:CanvasRenderingContext2D;\n    frameCoordsCalculated: number[][] = []\n    \n    drawImage(spriteNumber: number, x: number, y: number, width: number, height: number): void {\n        let fc = this.frameCoords(spriteNumber);\n        // this.ctx.drawImage(this.sprite, fc[0], fc[1], this.frameWidth,\n                        //   this.frameHeight, x, y, width, height);\n    }\n\n    private setFrameDimensions(sprite:HtmlSprite){\n        return function(){\n            let canvas = document.createElement('canvas');\n            let context = canvas.getContext('2d');\n            canvas.width = sprite.sprite.width;\n            canvas.height = sprite.sprite.height;\n            context.drawImage(sprite.sprite, 0, 0 );\n            let pixelData = context.getImageData(0, 0, sprite.sprite.width, sprite.sprite.height);\n            let averages = []\n            for(let i=0;i<pixelData.data.length;i+=4){\n                let average = (pixelData.data[i] + pixelData.data[i+1] + pixelData.data[i+2] + pixelData.data[i+3])/3;\n                averages.push(average);\n            }\n            let frames = sprite.findFrames(averages, pixelData.width, pixelData.height);\n            frames.forEach(f => {\n                f.sort();\n                let highestY = Math.floor(f[0]/pixelData.width);\n                let lowestY = Math.floor(f[f.length-1]/pixelData.width);\n                let height = lowestY - highestY;\n            });\n        }\n    }\n\n    findFrames(averagedPixelData: number[], width: number, height:number): number[][]{\n        let stack: number[] = [];\n        let claimed = new Set();\n        let results: number[][] = []\n        for(let i=0;i<averagedPixelData.length;i++)\n        {\n            if (claimed.has(i)) continue;\n            let average = averagedPixelData[i];\n            if (average <= 0)continue;\n            stack.push(i);\n            let nextResult:number[] = [i];\n            while (stack.length > 0){\n                if (stack.length > 60000) break;\n                let pixelIndex = stack.pop();\n                let average = averagedPixelData[pixelIndex];\n                if (pixelIndex >= averagedPixelData.length)continue;\n                if (pixelIndex < 0)continue;\n                if (average <= 0)continue;\n                if (claimed.has(pixelIndex)) continue;\n                claimed.add(pixelIndex);\n                nextResult.push(pixelIndex);\n                stack.push(pixelIndex + 1);\n                stack.push(pixelIndex - 1);\n                stack.push(pixelIndex + width);\n                stack.push(pixelIndex - width);\n            }\n            results.push(nextResult);\n        }\n        return results;\n    }\n\n    public frameCoords(spriteNum:number){\n        return this.frameCoordsCalculated[spriteNum];\n    }\n    public static create(fileName: string){\n        return new HtmlSprite(fileName);\n    }\n}", "import { SpriteAnimation } from \"./sprite-animation\";\nimport { HtmlRectSprite } from \"./implementations/html/html-rect-sprite\";\nimport { HtmlSprite } from \"./implementations/html/html-sprite\";\nimport { Sprite } from \"./sprite\";\nimport { ISpriteLoader } from \"./isprite-loader\";\n\nexport class SpriteManager {\n    constructor(spriteDir:string=\"../sprites/\"){}\n    sprites:{ [key: string]: Sprite} = {};//sprite name to sprite\n    animations:{ [key: string]: SpriteAnimation} = {};//animation name to animation\n    RGBs: {[key:string]: ImageData}= {};\n    \n    createSprite(fileName:string, widthImgs:number, heightImgs:number, offsetx:number, offsety:number):HtmlRectSprite{\n        return HtmlRectSprite.create(fileName, widthImgs, heightImgs, offsetx, offsety);\n    }\n\n    addSprite(spriteName:string, sprite:Sprite){\n        this.sprites[spriteName] = sprite;\n    }\n    getSprite(spriteName:string):Sprite{\n        if(! (spriteName in this.sprites)){\n            throw \"sprite \"+spriteName+\" does not exist\";\n        }\n        return this.sprites[spriteName];\n    }\n\n    loadSprite(spriteName:string, fileName:string, widthImgs:number, heightImgs:number, offsetx:number=0, offsety:number=0){\n        var sprite = this.createSprite(fileName, widthImgs, heightImgs, offsetx, offsety);\n        this.addSprite(spriteName, sprite);\n    }\n\n    loadSpriteWithDimensions(spriteName:string, fileName:string, frameWidth:number, frameHeight:number, offsetx:number=0, offsety:number=0){\n        const sprite = HtmlRectSprite.createWithDimensions(fileName, frameWidth, frameHeight, offsetx, offsety);\n        this.addSprite(spriteName, sprite);\n    }\n\n    loadSpriteOverlapping(spriteName:string, fileName:string){\n        let sprite = HtmlSprite.create(fileName);\n    }\n\n    addAnimation(spriteName:string, animationName:string, spriteNumbers:Array<number>, delay=1){\n        var sa:SpriteAnimation = SpriteAnimation.create(animationName, spriteName, spriteNumbers, delay);\n        if (!(spriteName in this.sprites)){\n            throw \"error adding animation \"\n            + animationName \n            + \". spriteName \"\n            + spriteName\n            + \"doesn't exist. sprites must be added through addSprite method first\";\n        }\n        this.animations[animationName] = sa;\n    }\n\n    getAnimation(animationName:string):SpriteAnimation{\n        if(animationName in this.animations){\n            return this.animations[animationName];\n        } else {\n            return null;\n        }\n    }\n\n    getRGBs(animationName:string=null, spriteNumber:number = 0, width:number=null, height:number=null):ImageData{\n        let key = animationName + spriteNumber;\n        if (key in this.RGBs) return this.RGBs[key];\n        let animation = this.animations[animationName];\n        let name = animation.spriteName;\n        let sprite = this.sprites[name];\n        if (!sprite.loaded){\n            return sprite.getRGBs(width, height, spriteNumber);\n        }\n        this.RGBs[key] = sprite.getRGBs(width, height, spriteNumber);\n        return this.RGBs[key];\n    }\n\n    static create():SpriteManager{\n        return new SpriteManager();\n    }\n    private static spriteManager:SpriteManager = null;\n    static singeltonCreate():SpriteManager{\n        if (SpriteManager.spriteManager != null) return SpriteManager.spriteManager;\n        SpriteManager.spriteManager = new SpriteManager();\n        return SpriteManager.spriteManager;\n    }\n}", "import { Component } from \"../engine/component/component\";\n\nexport class WasdComponent extends Component {\n    constructor(){\n        super(\"wasd\");\n    }\n    speed:number=5;\n    dashSpeed: number = 15;\n    dashingTime: number = 0;\n    maxDashingTime: number = 20;\n    dashing: boolean = false;\n    dashWidth: number = 0;\n    dashHeight: number = 0;\n    dashSprite: string = \"\";\n    dashSpriteNumber: number = 0;\n    sprite:string=\"grey\";\n    walkSprite:string=\"greyWalk\";\n    startDashing(){\n        this.dashing = true;\n        this.dashingTime = this.maxDashingTime;\n    }\n    update(){\n    }\n    static create(){\n        return new WasdComponent();\n    }\n}", "import { Component } from '../engine/component/component';\nexport class CropComponent extends Component {\n    constructor(){\n        super(\"crop\");\n        this.growthLengths = [5,5,5];\n        this.growthStage = 0;\n        this.cropName = \"turnip\"\n        this.setCrop(this.cropName)\n    }\n    //growth sprites for each stage\n    growthSprites:string[];\n    //index of current growthSprite in growthSprites\n    //also index of growthLength in growth lengths\n    growthStage:number;\n    growthLengths:number[];\n    timeSinceGrowth:number=0;\n    cropName:string;\n    \n    setSprites(sprites:string[]){\n        this.growthSprites = sprites;\n        this.growthStage = 0;\n    }\n\n    isGrown():boolean{\n        return this.growthStage == this.growthSprites.length-1;\n    }\n\n    setCrop(cropName:string){\n        var cropLength:number = 300;\n        this.growthLengths = [cropLength, cropLength, cropLength];\n        switch(cropName){\n            case \"turnip\":\n                this.growthSprites = [\"turnip0\", \"turnip1\", \"turnip2\"];\n                this.growthLengths = [cropLength, cropLength, cropLength];\n                break;\n            case \"corn\":\n                this.growthSprites = [\"corn0\", \"corn1\", \"corn2\"];\n                this.growthLengths = [cropLength, cropLength, cropLength];\n                break;\n            case \"wheat\":\n                this.growthSprites = [\"wheat0\", \"wheat1\", \"wheat2\"];\n                this.growthLengths = [cropLength, cropLength, cropLength];\n                break;\n            case \"pumpkin\":\n                this.growthSprites = [\"pumpkin0\", \"pumpkin1\", \"pumpkin2\"];\n                this.growthLengths = [cropLength, cropLength, cropLength];\n                break;\n            case \"onion\":\n                this.growthSprites = [\"onion0\", \"onion1\", \"onion2\", \"onion3\", \"onion4\", \"onion5\"];\n                this.growthLengths = [cropLength, cropLength, cropLength, cropLength, cropLength, cropLength];\n                break;\n            case \"tomato\":\n                this.growthSprites = [\"tomato0\", \"tomato1\", \"tomato2\", \"tomato3\"];\n                this.growthLengths = [cropLength, cropLength, cropLength, cropLength];\n                break;\n        }\n        this.growthStage = 0;\n        this.cropName = cropName;\n    }\n\n    update(){\n        if(this.isGrown()){\n            return;\n        }\n        this.timeSinceGrowth++;\n        var gs:number = this.growthStage;\n        var gl:number = this.growthLengths[gs];\n        if (this.timeSinceGrowth > gl){\n            this.growthStage = (this.growthStage+1)%this.growthLengths.length;\n            this.timeSinceGrowth = 0;\n        }\n    };\n\n    static create():CropComponent{\n        return new CropComponent();\n    };\n}", "import { Component } from \"../engine/component/component\";\n\nexport class ProjectileComponent extends Component {\n    constructor(){\n        super(\"projectile\");\n    }\n    lifeSpan:number=90;\n    shooterId:number;\n\n    update(){\n    }\n\n    static create():ProjectileComponent{\n        return new ProjectileComponent();\n    }\n}", "import { Component } from '../engine/component/component';\nimport { Entity } from '../engine/entity/entity';\n\nexport class FightComponent extends Component{\n    constructor(){\n        super(\"fight\");\n    }\n    target:Entity;\n    attack:boolean=false;\n    maxSpeed:number=5;\n    range:number=300;\n    reloadTime:number=30;\n    reloadTimer:number=30;\n\n    attackTarget(){\n    }\n    \n    canFire(){\n        return this.reloadTime === this.reloadTimer;\n    }\n\n    update(){\n        if (this.reloadTimer <= this.reloadTime){\n            this.reloadTimer--;\n        }\n        if(this.reloadTimer <= 0){\n            this.reloadTimer = this.reloadTime;\n        }\n    }\n\n    static create():FightComponent{\n        return new FightComponent();\n    }\n}", "import { Component } from \"../engine/component/component\";\n\n\nexport class HealthComponent extends Component {\n    constructor(){\n        super(\"health\");\n    }\n    health:number=100;\n\n    update(){}\n\n    static create():HealthComponent{\n        return new HealthComponent();\n    }\n}", "import { Component } from \"../engine/component/component\";\n\nexport class NeuralFightComponent extends Component {\n    constructor(){\n        super(\"neural\");\n    }\n\n    update(){}\n\n    static create(){\n        return new NeuralFightComponent();\n    }\n}", "import { InventoryItemType } from \"./inventory-item-type\";\n\nexport class InventoryItem {\n    constructor(){}\n    itemQuantity:number = 0;\n    itemName:string = \"no name\";\n    itemDescription:string = \"no description\";\n    itemSlot:number = -1;\n\n    static create(itemType:InventoryItemType):InventoryItem{\n        let item = new InventoryItem();\n        item.itemName = itemType.itemName;\n        item.itemDescription = itemType.itemDescription;\n        return item;\n    }\n}", "export class InventoryItemType {\n    constructor(itemName:string, itemDescription:string, itemSpriteName:string){\n        InventoryItemType.largestItemId += 1;\n        this.itemId = InventoryItemType.largestItemId;\n        this.itemName = itemName;\n        this.itemDescription = itemDescription;\n        this.itemSpriteName = itemSpriteName;\n    }\n    static largestItemId:number = -1;\n    itemId:number = -1;\n    itemName:string = \"no name\";\n    itemDescription:string = \"no description\";\n    itemSpriteName:string;\n\n    static create(itemName:string, itemSpriteName:string, itemDescription:string)\n    :InventoryItemType{\n        let newItemType:InventoryItemType;\n        newItemType = new InventoryItemType(itemName, itemDescription, itemSpriteName);\n        return newItemType;\n    }\n}", "import { InventoryItemType } from \"./inventory-item-type\";\n\n\nexport class InventoryItemRegistry {\n    constructor(){}\n    itemTypes:{[key:string]:InventoryItemType}={};\n    registerItemType(itemName:string, itemSpriteName:string, description:string){\n        let newItemType:InventoryItemType;\n        newItemType = new InventoryItemType(itemName, description, itemSpriteName);\n        if (itemName in this.itemTypes){\n            throw \"error: item type: \" + itemName+ \" already exists\";\n        }\n        this.itemTypes[itemName] = newItemType;\n    }\n\n    private static singletonRegistry:InventoryItemRegistry;\n\n    static singletonCreate():InventoryItemRegistry{\n        if(this.singletonRegistry)return this.singletonRegistry;\n        let itemRegistry:InventoryItemRegistry = new InventoryItemRegistry();\n        this.singletonRegistry = itemRegistry;\n        this.singletonRegistry.populateItems();\n        return this.singletonRegistry;\n    }\n\n    private populateItems():void{\n        this.registerItemType(\"wheat\", \"wheat2\", \"its a wheat\");\n        this.registerItemType(\"onion\", \"onion5\", \"its an onion\");\n        this.registerItemType(\"corn\", \"corn2\", \"its corn\");\n        this.registerItemType(\"pumpkin\", \"pumpkin2\", \"its a pumpkin\");\n        this.registerItemType(\"turnip\", \"turnip2\", \"its a turnip\");\n        this.registerItemType(\"nothing\", \"nothing\", \"nothing\");\n    }\n}", "import { Component } from \"../../engine/component/component\";\nimport { InventoryItem } from \"./inventory-item\";\nimport { InventoryItemRegistry } from \"./item-registry\";\nimport { Entity } from \"../../engine/entity/entity\";\nimport { GiveItemEventData } from \"./give-item-event-data\";\nimport { InventoryItemType } from \"./inventory-item-type\";\nimport { GameEvent } from \"../../engine/events/game-event\";\nimport { EventType } from \"../../engine/events/EventType\";\nimport { InventoryItemEntity } from \"../../entities/inventory-item-entity\";\nimport { AnimationComponent } from \"../animation-component\";\nimport { TextComponent } from \"../text-component/text-component\";\n\nexport class InventoryComponent extends Component {\n    constructor(itemRegistry:InventoryItemRegistry){\n        super(\"inventory\");\n        this.itemRegistry = itemRegistry;\n        this.itemSlots = new Array<InventoryItem>(10);\n        for(let i:number=0;i<this.itemSlots.length;i++){\n            let itemType:InventoryItemType = this.itemRegistry.itemTypes[\"nothing\"];\n            this.itemSlots[i] = InventoryItem.create(itemType);\n        }\n\n    }\n    private inventory:{[key:string]:InventoryItem} = {};\n    private itemSlots:InventoryItem[] = [];\n    private selectedItemSlot:number=0;\n    private itemRegistry:InventoryItemRegistry;\n    inventoryItemEntities:InventoryItemEntity[] = [];//inventory item entities that appear on screen\n\n    hashInventoryToString():void{\n        let inventoryString:string = \"Inventory:\";\n        for(let i:number=0;i<this.itemSlots.length;i++){\n            let item:InventoryItem;\n            item = this.itemSlots[i];\n            inventoryString += `\\n${item.itemName}: ${item.itemQuantity}`;\n        }\n        inventoryString += \"\\n<---------->\";\n        console.log(inventoryString);\n    }\n\n    inventoryToString():void{\n        let inventoryString:string = \"Inventory:\";\n        for(let i:number=0;i<this.itemSlots.length;i++){\n            let item:InventoryItem;\n            item = this.itemSlots[i];\n            inventoryString += `\\n${item.itemName}: ${item.itemQuantity}`;\n\n        }\n        inventoryString += \"\\n<---------->\";\n        console.log(inventoryString);\n    }\n \n    selectItemSlot(itemSlotNumber:number) {\n        this.selectedItemSlot = itemSlotNumber % this.itemSlots.length;\n    }\n\n    getSelectedItem():InventoryItem{\n        return this.itemSlots[this.selectedItemSlot];\n    }\n\n    addItemToHashTable(itemName:string, quantity:number=1):boolean{\n        if(! (itemName in this.itemRegistry.itemTypes)){\n            console.log(`Warning: itemName ${itemName} is not in the itemRegistry`);\n            return false;\n        }\n        let itemType:InventoryItemType = this.itemRegistry.itemTypes[itemName];\n        if(!(itemName in this.inventory)){\n            this.inventory[itemName] = InventoryItem.create(itemType);\n        }\n        this.inventory[itemName].itemQuantity += quantity;\n        return true;\n    }\n\n    getItems():InventoryItem[]{\n        return this.itemSlots;\n    }\n\n    addItem(itemName:string, quantity:number=1):boolean {\n        if(! (itemName in this.itemRegistry.itemTypes)){\n            console.log(`Warning: itemName ${itemName} is not in the itemRegistry`);\n            return false;\n        }\n        for(let i:number=0;i<this.itemSlots.length;i++) {\n            let itemSlot:InventoryItem = this.itemSlots[i];\n            if (itemSlot.itemName == itemName) {\n                itemSlot.itemQuantity += quantity;\n                return true;\n            }\n        }\n        for(let i:number=0;i<this.itemSlots.length;i++) {\n            let itemSlot:InventoryItem = this.itemSlots[i];\n            if (itemSlot.itemName == \"nothing\") {\n                let itemType:InventoryItemType = this.itemRegistry.itemTypes[itemName]\n                this.itemSlots[i] = InventoryItem.create(itemType);\n                this.itemSlots[i].itemQuantity = 1;\n                return;\n            }\n        }\n        \n        return true;\n    }\n    update(entity:Entity):void{\n        for(let i:number=0;i<this.inventoryItemEntities.length;i++){\n            let inventoryItemEntity:InventoryItemEntity = this.inventoryItemEntities[i];\n            let spriteComponent:AnimationComponent;\n            spriteComponent = <AnimationComponent>inventoryItemEntity.getComponent(\"animation\");\n            let item:InventoryItem = this.itemSlots[i];\n            let itemType:InventoryItemType = this.itemRegistry.itemTypes[item.itemName];\n            spriteComponent.setSprite(itemType.itemSpriteName);\n        }\n    }\n\n    private handleEvents(event:GameEvent):void{\n    }\n\n    static create():InventoryComponent{\n        let inventory:InventoryComponent;\n        inventory = new InventoryComponent(InventoryItemRegistry.singletonCreate());\n        return inventory;\n    }\n}", "import { Component } from \"./component\";\n\nexport class ComponentFactory {\n    constructor(){\n    }\n    componentTypes:{[key:string]:any}={};\n    registerComponent(ComponentClass:any){\n        var obj = ComponentClass.create()\n        if (ComponentClass.prototype instanceof Component){\n            this.componentTypes[obj.componentName] = ComponentClass;\n        } else {\n            console.log(\"component \" + obj.componentName + \" must extend class Component to be registered\");\n        }\n    }\n\n    createComponent(componentName:string){\n        if (!(componentName in this.componentTypes)){\n            throw \"component \"+componentName+\" not registered in componentFactory\";\n        }\n        return this.componentTypes[componentName].create();\n    }\n\n    static create():ComponentFactory{\n        var cf:ComponentFactory = new ComponentFactory();\n        /* cf.registerComponent(AnimationComponent);\n        cf.registerComponent(PositionComponent);\n        cf.registerComponent(WasdComponent);\n        cf.registerComponent(CropComponent);\n        cf.registerComponent(ProjectileComponent);\n        cf.registerComponent(FightComponent);\n        cf.registerComponent(HealthComponent);\n        cf.registerComponent(NeuralFightComponent);*/\n        return cf;\n    }\n}", "import { Entity } from \"../../engine/entity/entity\";\n\nexport class PlaceItemRequest {\n    constructor(entityName:string, coordinates:number[], quantity:number=1,\n                successCallback:(entity:Entity)=>void, relative:boolean=true){\n        this.entityName = entityName;\n        this.coordinates = coordinates;\n        this.quantity = quantity;\n        this.successCallback = successCallback;\n        this.relative = relative;\n    }\n    entityName:string;\n    coordinates:number[];\n    quantity:number;\n    successCallback: (entity: Entity) => void;\n    relative:boolean;\n}", "import { Component } from \"../../engine/component/component\";\nimport { Entity } from \"../../engine/entity/entity\";\nimport { InventoryComponent } from \"../inventory-component/inventory-component\";\nimport { PlaceItemRequest } from \"./place-item-request\";\n/**\n * Allows the user to place items. Items can only be placed on tiles.\n * Tiles are squares of side length this.tileSize. Place item requests\n * describe what item to place and where to place it.\n * PlaceItemSystem will read the requests and do the actual placing\n */\nexport class PlaceItemComponent extends Component {\n    constructor(){\n        super(\"placeItem\");\n    }\n    public placeItemRequests:PlaceItemRequest[]=[];\n    placeItem(  entityName:string, coordinates:number[]=[0, 0],\n                successCallback:(entity:Entity)=>void, relative:boolean=true):void {\n        let placeItemRequest:PlaceItemRequest;\n        placeItemRequest = new PlaceItemRequest(entityName, coordinates, 1, successCallback, relative=true);\n        this.placeItemRequests.push(placeItemRequest);\n    }\n    \n    update(entity: Entity): void {\n        \n    }\n\n    static create():PlaceItemComponent {\n        return new PlaceItemComponent();\n    }\n\n}", "import { Component } from \"../engine/component/component\";\nimport { Entity } from \"../engine/entity/entity\";\n\nexport class CropHarvesterComponent extends Component{\n    harvesting:boolean = false;\n    private harvestTime:number = 0;\n    private timeItTakesToHarvest:number = 10;\n\n    public startHarvest():void {\n        this.harvesting = true;\n        this.harvestTime = this.timeItTakesToHarvest;\n    }\n\n    update(entity: Entity): void {\n        if (this.harvestTime > 0){\n            this.harvestTime -= 1;\n        } else {\n            this.harvesting = false;\n        }\n    }\n\n    static create():CropHarvesterComponent{\n        return new CropHarvesterComponent(\"cropHarvester\");\n    }\n}", "export class TextPlacement{\n    constructor(textValue:string, offsetX:number, offsetY:number){\n        this.textValue = textValue;\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n    }\n    offsetX:number;\n    offsetY:number;\n    textValue:string;\n}", "import { Component } from \"../../engine/component/component\";\nimport { TextPlacement } from \"./text-placement\";\n\nexport class TextComponent extends Component {\n    constructor(){\n        super(\"text\");\n    }\n    textPlacements:TextPlacement[]=[];\n    addTextPlacement(text:string, offsetX:number=0, offsetY:number=0){\n        this.textPlacements.push(new TextPlacement(text, offsetX, offsetY));\n    }\n\n    setText(value:string, index:number=0){\n        if(index >= 0 && index < this.textPlacements.length){\n            this.textPlacements[index].textValue = value;\n        }\n    }\n\n    update(){}\n    static create(){\n        return new TextComponent();\n    }\n}", "import { Component } from \"../engine/component/component\";\nimport { Entity } from \"../engine/entity/entity\";\nimport { ParticleEntity } from \"../entities/particles/particle-entity\";\nimport { PositionComponent } from \"./position-component\";\n\nexport class ParticleComponent extends Component{\n    constructor(){\n        super(\"particles\");\n    }\n    particles: Entity[] = []\n    targetParticles: number = 10;\n    time: number = 0;\n    maxSpeed: number = 50;\n    paths = [\n        /*(center: PositionComponent, position: PositionComponent) => {\n            let dx = center.x - position.x;\n            let dy = center.y - position.y;\n            if (Math.abs(position.vx) < this.maxSpeed) position.vx += dx/Math.abs(dx) * .1;\n            if (Math.abs(position.vy) < this.maxSpeed) position.vy += dy/Math.abs(dy) * .1;\n        },*/\n        /*(center: PositionComponent, position: PositionComponent) => {\n            let dx = center.x - position.x;\n            let dy = center.y - position.y;\n            if (Math.abs(position.vx) < this.maxSpeed) position.vx += dx/Math.abs(dx) * .2;\n            if (dy > 50)position.vy = 1\n            if (dy < -50)position.vy = -1\n        }*/\n        /*(center: PositionComponent, position: PositionComponent) => {\n            let dx = center.x - position.x;\n            let dy = center.y - position.y;\n            position.vx += dx/Math.abs(dx) * .2;\n            position.vy += dy/Math.abs(dy) * .2;\n            // position.x += 1;\n            // center.x += 1;\n        }*/\n        /*(center:PositionComponent, position: PositionComponent, time: number) => {\n            let f = ()=>10 * Math.sin(.05 * time);\n            let f2 = ()=>40 * Math.cos(.2 * time);\n            position.y = center.y +  10*f();\n            position.x = center.x + f2();\n        },*/\n        /*(center:PositionComponent, position: PositionComponent, time: number) => {\n            let f = ()=>Math.sin(.05 * time/3);\n            let f2 = ()=>40 * Math.cos(.2 * time/2);\n            position.h = -2 + center.h - 2*center.width/3 +  30*f();\n            position.x = center.x + f2();\n            position.y = center.y - 1\n        },\n        (center:PositionComponent, position: PositionComponent, time: number) => {\n            let f = ()=>Math.sin(.05 * time/3);\n            let f2 = ()=>40 * Math.cos(.2 * time/2);\n            position.h = -2 + center.h - 2*center.width/3 +  30*f();\n            position.x = center.x - f2();\n            position.y = center.y + 1\n        },*/\n        (center:PositionComponent, position: PositionComponent, time: number) => {\n            let f = ()=>40 * Math.sin(.2 * time/2);\n            let f2 = ()=>40 * Math.cos(.2 * time/2);\n            position.h = -2 + center.h - 2*center.width/3 +  f();\n            position.x = center.x - f2();\n            position.y = center.y + 1\n        }\n    ]\n    addParticle(particle: Entity){\n        this.particles.push(particle);\n    }\n    update(entity: Entity): void {\n        for(let i:number=0;i<this.particles.length;i++){\n            let particle = this.particles[i];\n            let path = this.paths[i%this.paths.length];\n            let center = <PositionComponent>entity.getComponent(\"position\");\n            let particlePosition = <PositionComponent>particle.getComponent(\"position\");\n            path(center, particlePosition, -(this.time + i * 10));\n        }\n    }\n    public static create(): ParticleComponent {\n        return new ParticleComponent();\n    }\n}", "import { Component } from \"../engine/component/component\";\nimport { Entity } from \"../engine/entity/entity\";\n\nexport class PrimitiveComponent extends Component {\n    update(entity: Entity): void {\n    }\n    public static create(): PrimitiveComponent {\n        return new PrimitiveComponent(\"primitive\");\n    }\n}", "import { Component } from \"../../engine/component/component\";\nimport { Entity } from \"../../engine/entity/entity\";\nimport {AnimationComponent} from \"../animation-component\";\nexport class TransitionComponent extends Component{\n    constructor(){\n        super(\"transition\");\n    }\n    time: number=0;\n    reference: ImageData = null;\n    current: ImageData = null;\n    targetAnimationName: string = \"fireball\";\n    targetSpriteNumber: number = 0;\n    target: ImageData;\n    running: boolean = false;\n    speed: number = 15;\n    update(entity: Entity): void {\n        if (!this.running) return;\n        let animation = <AnimationComponent>entity.getComponent(\"animation\", true);\n        if (animation == null) return;\n        this.reference = animation.getRGBs();\n        this.target = animation.getRGBs(this.targetAnimationName, this.targetSpriteNumber, this.reference.width, this.reference.height);\n        if (this.targetAnimationName == null){\n            let newTarget = new ImageData(this.reference.width, this.reference.height);\n            for (let i=0;i<this.target.data.length;i++){\n                newTarget.data[i] = 0;\n            }\n            this.target = newTarget;\n        }\n        if (this.current == null){\n            // check if sprites are loaded length == 4 means it's a place holder of 1 pixel\n            if (this.reference.data.length == 4 || this.target.data.length == 4) return;\n            this.current = new ImageData(this.reference.width, this.reference.height);\n            for(let i=0;i<this.reference.data.length;i++){\n                this.current.data[i] = this.reference.data[i];\n            }\n        }\n        let noChanges = true;\n        for(let i=0;i<this.reference.data.length;i++){\n            let target = this.target.data[i];\n            if (this.current.data[i] < target){\n                this.current.data[i] += this.speed;\n            } else if (this.current.data[i] > target){\n                this.current.data[i] -= this.speed;\n            }\n            let distance = Math.abs(this.current.data[i] - target);\n            if (distance < this.speed){\n                this.current.data[i] = target;\n            } else {\n                noChanges = false;\n            }\n        }\n        animation.setFilter(this.current);\n        if (noChanges){\n            animation.isFiltered = false;\n            this.running = false;\n        }\n    }\n    public start(targetAnimationName:string = \"fireball\", targetSpriteNumber:number, resetCurrent:boolean=true):void{\n        this.running = true;\n        this.time = 300;\n        this.targetAnimationName = targetAnimationName;\n        if (resetCurrent) this.current = null;\n        this.targetSpriteNumber = targetSpriteNumber;\n    }\n    public static create(): TransitionComponent{\n        return new TransitionComponent();\n    }\n}", "export class SpriteId{\n    spriteName: string;\n    spriteNumber: number;\n    static create(spriteName:string, spriteNumber:number){\n        const spriteId = new SpriteId();\n        spriteId.spriteName = spriteName;\n        spriteId.spriteNumber = spriteNumber;\n        return spriteId;\n    }\n}", "import { SpriteId } from \"./sprite-id\";\n\nexport class Tile{\n    spriteIds:SpriteId[]=[];\n    tileX: number;\n    tileY: number;\n    public static create(spriteName: string, spriteNumber: number, tileX:number, tileY:number): Tile{\n        let tile = new Tile();\n        tile.spriteIds.push(SpriteId.create(\n            spriteName,\n            spriteNumber\n        ));\n        tile.tileX = tileX;\n        tile.tileY = tileY;\n        return tile;\n    }\n}", "import { Component } from \"../../engine/component/component\";\nimport { Entity } from \"../../engine/entity/entity\";\nimport { HtmlCanvas } from \"../../engine/renderers/implementations/html/html-canvas\";\nimport { Tile } from \"./tile\";\n\nexport class TileComponent extends Component{\n    constructor(){\n        super(\"tile\");\n    }\n    update(entity: Entity): void {\n    }\n\n    tileWidth: number = 64;\n    tiles: Tile[] = [];\n    tileSpriteNames: string[] = [\"grass\", \"soil\"]\n    public static create(): TileComponent{\n        let tc = new TileComponent();\n        let spriteName = \"grass\";\n        // let mapWidth = 2;\n        let mapWidth = 50;\n        let centerOffset = mapWidth/2-5;\n        let xlow = 4;\n        let xhigh = xlow + 6\n        let ylow = 3;\n        let yhigh = ylow + 6;\n        // return tc;\n        for(let i=0;i<mapWidth*mapWidth;i++){\n            let x = i%mapWidth-centerOffset;\n            let y = Math.floor(i/mapWidth)-centerOffset;\n            if (x >= xlow && x <= xhigh && y >= ylow && y <= yhigh) {\n                if (x==xlow && y == ylow) tc.tiles.push(Tile.create(\"soil\", 6, x, y));\n                else if (x==xhigh && y == ylow) tc.tiles.push(Tile.create(\"soil\", 8, x, y));\n                else if (x==xlow && y == yhigh) tc.tiles.push(Tile.create(\"soil\", 12, x, y));\n                else if (x==xhigh && y == yhigh) tc.tiles.push(Tile.create(\"soil\", 14, x, y));\n                else if (x==xlow) tc.tiles.push(Tile.create(\"soil\", 9, x, y));\n                else if (x==xhigh) tc.tiles.push(Tile.create(\"soil\", 11, x, y));\n                else if (y==ylow) tc.tiles.push(Tile.create(\"soil\", 7, x, y));\n                else if (y==yhigh) tc.tiles.push(Tile.create(\"soil\", 13, x, y));\n                else\n                tc.tiles.push(Tile.create(\"soil\", 10, x, y));\n                continue;\n            }\n            tc.tiles.push(Tile.create(spriteName, 14+Math.ceil(Math.random()*3), x, y));\n        }\n        return tc;\n    }\n    createBuilder():void{\n        let tileSetSpriteNames = [\"grass\", \"soil\"];\n    }\n    \n    coordToTile(x:number, y:number):Tile[]{\n        let tileX = Math.floor((x+.5*this.tileWidth)/this.tileWidth);\n        let tileY = Math.ceil(y/this.tileWidth);\n        return this.tiles.filter((tile)=>tile.tileX == tileX && tile.tileY == tileY)\n    }\n    private tileCoordToReal(tileWidth: number, coord: number): number{\n        return coord * tileWidth;        \n    }\n}", "import { Component } from \"../engine/component/component\";\nimport { Entity } from \"../engine/entity/entity\";\n\nexport class ClickableComponent extends Component{\n    constructor(){\n        super(\"click\");\n    }\n    update(entity: Entity): void {}\n    private callback:(()=>void)[] = [];\n    addListener(callback:()=>void) {\n        this.callback.push(callback);\n    }\n    click(){\n        this.callback.forEach((callback)=>{\n            callback();\n        });\n    }\n    \n    static create():ClickableComponent{\n        return new ClickableComponent();\n    };\n}", "import * as Phaser from \"phaser\";\nimport { MainScene } from \"./main-scene\";\n\n\nexport class PhaserGame {\n    constructor(){\n        this.config = {\n            type: Phaser.WEBGL,\n            width:window.innerWidth,\n            height:window.innerHeight,\n            scene: MainScene,\n            fps: {\n                target:60,\n                forceSetTimeOut: true\n            },\n            physics: {\n                default:\"arcade\",\n                arcade: {\n                },\n                matter:{\n                    gravity:false,\n                    debug: {\n                        showBody: true,\n                        showStaticBody: true\n                    }\n                },\n            }\n        }\n    }\n    config:Phaser.Types.Core.GameConfig;\n    game: Phaser.Game;\n    mainScene: MainScene = new MainScene();\n\n    public start(){\n        this.game = new Phaser.Game(this.config);\n        this.mainScene.addCreator((scene)=>{\n            console.log(\"creator for canvas\");\n            const canvas:HTMLCanvasElement = <HTMLCanvasElement>this.game.canvas;\n            canvas.style.margin = \"0\";\n            canvas.style.padding = \"0\";\n            canvas.style.overflow = \"hidden\";\n            canvas.style.position = \"fixed\";\n            canvas.style.top = \"0px\";\n            canvas.style.left = \"0px\";\n        });\n        this.game.scene.add(\"mainReal\", this.mainScene);\n        this.game.scene.switch(\"main\", \"mainReal\");\n    }\n\n    setUpdater(updater:(delta:number)=>void){\n        this.mainScene.setUpdater(updater);\n    }\n\n    private static phaserGame:PhaserGame = null; \n\n    public static createSingleton(){\n        if (PhaserGame.phaserGame == null){\n            PhaserGame.phaserGame = new PhaserGame();\n        }\n        return PhaserGame.phaserGame;\n    }\n}", "import { Scene } from \"phaser\";\nexport class MainScene extends Scene {\n    constructor(){\n        super({key:\"main\"})\n    }\n    private updater: (delta:number)=>void = ()=>{};\n    private creators: ((scene:Scene)=>void)[] = [];\n    private loaders: ((scene:Scene)=>void)[] = [];\n    setUpdater(updateFunction:(delta:number)=>void){\n        this.updater = updateFunction;\n    }\n    addCreator(creator:(scene:Phaser.Scene)=>void){\n        this.creators.push(creator);\n    }\n    addPreloader(loader:(scene:Phaser.Scene)=>void){\n        this.loaders.push(loader);\n    }\n    preload(){\n        console.log(\"loading \" + this.loaders.length);\n        this.loaders.forEach((loader)=>{\n            loader(this)}\n        );\n    }\n    create(){\n        console.log(`creating main scene with ${this.creators.length} creators`);\n        this.creators.forEach((creator)=>{creator(this)});\n    }\n    update(time: number, delta: number): void {\n        this.updater(delta);\n    }\n}", "import { Component } from \"../../engine/component/component\";\nimport { Entity } from \"../../engine/entity/entity\";\nimport { EntityUpdateArgs } from \"../../engine/entity/entity-update-args\";\nimport { PhaserGame } from \"../../engine/phaser-integration/phaser-game\";\n\n\nexport class PhaserPositionComponent extends Component {\n    private phaserGame: PhaserGame;\n    // public phaserObject: Phaser.Physics.Matter.Sprite\n    public phaserObject: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody;\n    constructor(phaser:PhaserGame){\n        super(\"position\");\n        this.phaserGame = phaser;\n        this.phaserGame.mainScene.addCreator((scene)=>{\n            this.phaserObject = scene.physics.add.sprite(this.x, this.y, \"victorian\", 72);\n            this.phaserObject.displayWidth = this.width;\n            this.phaserObject.displayHeight = this.height;\n        });\n    }\n    private speedMultiplier:number=50;\n    private _vx:number=0;\n    get vx():number{\n        return this._vx;\n    }\n    set vx(vx:number){\n        if (this.phaserObject?.body?.velocity != null && this.phaserObject.body.velocity.x != vx){\n            this.phaserObject.setFlipX(!this.faceRight)\n            this.phaserObject.setVelocityX(vx*this.speedMultiplier);\n        }\n        this._vx = vx;\n        if(vx == 0){\n            if(this.faceY !== 0){\n                this.faceX = vx;\n            }\n        } else {\n            this.faceX = vx;\n            if(this.faceY !== 0 && this.vy == 0){\n                this.faceY = 0;\n            }\n        }\n    }\n    private _vy:number=0;\n    get vy():number{\n        return this._vy;\n    }\n    set vy(vy:number){\n        if (this.phaserObject?.body?.velocity != null && this.phaserObject.body.velocity.y != vy){\n            this.phaserObject.setVelocityY(vy*this.speedMultiplier);\n        }\n        this._vy = vy;\n        if(vy == 0){\n            if(this.faceX !== 0){\n                this.faceY = vy;\n            }\n        } else {\n            this.faceY = vy;\n            if(this.faceX !== 0 && this.vx == 0){\n                this.faceX = 0;\n            }\n        }\n    }\n    private _rotate:number=0;\n    get rotate():number{\n        return this._rotate;\n    }\n    set rotate(radiansToRotate:number){\n        this._rotate = radiansToRotate%(2*Math.PI);\n    }\n    x:number=0;\n    y:number=0;\n    h: number=0;\n    width:number=100;\n    height:number=100;\n    faceRight:boolean=true;\n    faceX:number=0;\n    faceY:number=0;\n    moved:boolean=false;\n    applyOffsets:boolean=true;\n\n\n\n    update(entity:Entity, args:EntityUpdateArgs):void{\n        const delta = args.delta;\n        this.x += this.vx * delta;\n        this.y += this.vy * delta;\n        this.moved = !(this.vx == 0 && this.vy == 0);\n    }\n\n    static create():PhaserPositionComponent{\n        return new PhaserPositionComponent(PhaserGame.createSingleton());\n    }\n}", "export const metadata:any = {\"sprites/arm.png\":{\"height\":32,\"width\":32,\"type\":\"png\"},\"sprites/BearSprites.webp\":{\"height\":384,\"width\":384,\"type\":\"webp\"},\"sprites/blond.png\":{\"height\":259,\"width\":64,\"type\":\"png\"},\"sprites/blondWalk.png\":{\"height\":336,\"width\":317,\"type\":\"png\"},\"sprites/crops.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/deer/deer female calciumtrice.png\":{\"height\":160,\"width\":160,\"type\":\"png\"},\"sprites/deer/deer male calciumtrice.png\":{\"height\":160,\"width\":160,\"type\":\"png\"},\"sprites/fantasysprites.png\":{\"height\":512,\"width\":384,\"type\":\"png\"},\"sprites/fantasysprites/CompSpriteC.png\":{\"height\":166,\"width\":96,\"type\":\"png\"},\"sprites/fantasysprites/DwarfSprites.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/fantasysprites/DwarfSprites2.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/fantasysprites/EnemySpriteSheet1.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/fantasysprites/FDwarfSheet.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/fantasysprites/PeopleSpriteSheet2.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/fantasysprites/PeopleSpriteSheet3.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/fantasysprites/SpriteCompD.png\":{\"height\":188,\"width\":96,\"type\":\"png\"},\"sprites/fireball.png\":{\"height\":512,\"width\":512,\"type\":\"png\"},\"sprites/greg.png\":{\"height\":96,\"width\":64,\"type\":\"png\"},\"sprites/greyactions.png\":{\"height\":96,\"width\":64,\"type\":\"png\"},\"sprites/scrops.png\":{\"height\":672,\"width\":391,\"type\":\"png\"},\"sprites/sword-7Soul1.png\":{\"height\":192,\"width\":256,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/character/grab_sheet.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/character/sword_sheet_128.png\":{\"height\":504,\"width\":768,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magic/magic_firelion_big.png\":{\"height\":512,\"width\":512,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magic/magic_firelion_sheet.png\":{\"height\":256,\"width\":256,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magic/magic_iceshield_sheet.png\":{\"height\":512,\"width\":512,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magic/magic_snakebite_sheet.png\":{\"height\":512,\"width\":512,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magic/magic_torrentacle.png\":{\"height\":512,\"width\":512,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magic/turtleshell_front.png\":{\"height\":512,\"width\":512,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magic/turtleshell_side.png\":{\"height\":512,\"width\":512,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magics_preview.gif\":{\"height\":128,\"width\":128,\"type\":\"gif\"},\"sprites/tilesets/submission_daneeklu/tileset_preview.png\":{\"height\":576,\"width\":768,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/farming_fishing.png\":{\"height\":640,\"width\":640,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/fence_alt.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/fence.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/grass.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/grassalt.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/hole.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/plants.png\":{\"height\":384,\"width\":288,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/plowed_soil.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/reed.png\":{\"height\":320,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/sand.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/sandwater.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/tallgrass.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/wheat.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/youngwheat.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/ui_preview.png\":{\"height\":192,\"width\":224,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/ui/scrollsandblocks.png\":{\"height\":320,\"width\":544,\"type\":\"png\"},\"sprites/victoriansprites.png\":{\"height\":384,\"width\":384,\"type\":\"png\"}}", "import { HtmlRectSprite } from \"../renderers/implementations/html/html-rect-sprite\";\nimport { HtmlSprite } from \"../renderers/implementations/html/html-sprite\";\nimport { ISpriteLoader } from \"../renderers/isprite-loader\";\nimport { Sprite } from \"../renderers/sprite\";\nimport { SpriteAnimation } from \"../renderers/sprite-animation\";\nimport { PhaserGame } from \"./phaser-game\";\nimport { metadata } from \"../../metadata\";\n\nexport class PhaserSpriteManager implements ISpriteLoader{\n    constructor(spriteDir:string=\"../sprites/\"){\n        this.phaserGame = PhaserGame.createSingleton();\n        this.spriteDir = spriteDir;\n    }\n    private spriteDir: string;\n    private phaserGame: PhaserGame;\n    private spriteNameToPath:{[index:string]: string} = {};\n    private path(fileName:string){\n        return this.spriteDir + fileName;\n    }\n    \n    loadSprite(spriteName:string, fileName:string, widthImgs:number, heightImgs:number, offsetx:number=0, offsety:number=0){\n        this.phaserGame.mainScene.addPreloader(()=>{\n            const path: string = this.path(fileName)\n            const width:number = metadata[path.replace(\"../\", \"\")].width;\n            const height:number = metadata[path.replace(\"../\", \"\")].height;\n            const frameWidth = width/widthImgs;\n            const frameHeight = height/heightImgs;\n            this.phaserGame.mainScene.load.spritesheet(spriteName, path, {\n                frameWidth:frameWidth,\n                frameHeight:frameHeight\n            });\n            // this.spriteNameToPath[spriteName] = path;\n        });\n    }\n\n    loadSpriteWithDimensions(spriteName:string, fileName:string, frameWidth:number, frameHeight:number, offsetx:number=0, offsety:number=0){\n    }\n\n    loadSpriteOverlapping(spriteName:string, fileName:string){\n    }\n\n    addAnimation(spriteName:string, animationName:string, spriteNumbers:Array<number>, delay=1){\n        this.phaserGame.mainScene.addCreator(()=>{\n            const anims = this.phaserGame.mainScene.anims;\n            anims.create(\n                {\n                    key:animationName,\n                    frames: anims.generateFrameNumbers(spriteName, {\n                        frames: spriteNumbers                    \n                    }),\n                    frameRate: Math.floor(30 / delay),\n                    repeat:-1 \n                }\n            )\n        });\n    }\n\n    getAnimation(animationName:string):SpriteAnimation{\n        // to remove\n        return SpriteAnimation.create(animationName, \"\", [], 0);\n    }\n\n    getRGBs(animationName:string=null, spriteNumber:number = 0, width:number=null, height:number=null):ImageData{\n        return new ImageData(0, 0);\n    }\n\n    static create():PhaserSpriteManager{\n        return new PhaserSpriteManager();\n    }\n    private static spriteManager:PhaserSpriteManager = null;\n    static singeltonCreate():PhaserSpriteManager{\n        if (PhaserSpriteManager.spriteManager != null) return PhaserSpriteManager.spriteManager;\n        PhaserSpriteManager.spriteManager = new PhaserSpriteManager();\n        return PhaserSpriteManager.spriteManager;\n    }\n}", "import { Game } from \"../../engine/game\";\nimport { Component } from \"../../engine/component/component\";\nimport { Entity } from \"../../engine/entity/entity\";\nimport { EntityUpdateArgs } from \"../../engine/entity/entity-update-args\";\nimport { SpriteAnimation } from \"../../engine/renderers/sprite-animation\";\nimport { SpriteManager } from \"../../engine/renderers/sprite-manager\";\nimport { PhaserSpriteManager } from \"../../engine/phaser-integration/phaser-sprite-manager\";\nimport { ISpriteLoader } from \"../../engine/renderers/isprite-loader\";\nimport { PhaserGame } from \"../../engine/phaser-integration/phaser-game\";\n\nexport class PhaserAnimationComponent extends Component {\n    phaserGame: PhaserGame;\n    animationName: string;\n    animationNameUpdated: boolean = false;\n    fakeImageData: ImageData = new ImageData(1,1);\n    constructor(animationName:string, delay:number, spriteManager:ISpriteLoader){\n        console.log(\"added phaser anim component\");\n        super(\"animation\");\n        this.phaserGame = PhaserGame.createSingleton();\n    }\n\n    getSpriteNumber(){\n    }\n\n    getRGBs(animationName:string=null, spriteNumber:number = 0, width:number=null, height:number=null,):ImageData{\n        return this.fakeImageData;\n    }\n    \n    setFilter(pixelData: ImageData) {\n    }\n\n    setSprite(animationName:string){\n        // console.log(`${animationName} updated to`);\n        if(animationName == this.animationName) return;\n        this.animationName = animationName;\n        this.animationNameUpdated = true;\n    }\n\n    setSpriteNumber(spriteName:string, spriteNumber:number){\n    }\n\n    update(entity:Entity, args:EntityUpdateArgs):void{\n    }\n\n    static create():PhaserAnimationComponent{\n        var spriteManager:ISpriteLoader = PhaserSpriteManager.singeltonCreate();\n        // var spriteManager:SpriteManager = createSpriteManager();\n        var ac:PhaserAnimationComponent = new PhaserAnimationComponent(\"blond\", 2, spriteManager);\n        return ac;\n    }\n}", "import { PositionComponent } from '../components/position-component';\nimport { AnimationComponent } from '../components/animation-component';\nimport { WasdComponent } from '../components/wasd-component';\nimport { CropComponent } from '../components/crop-component';\nimport { ProjectileComponent } from '../components/projectile-component';\nimport { FightComponent } from '../components/fight-component';\nimport { HealthComponent } from '../components/health-component';\nimport { NeuralFightComponent } from '../components/neural-fight-component';\nimport { Game } from '../engine/game';\nimport { InventoryComponent } from '../components/inventory-component/inventory-component';\nimport { ComponentFactory } from '../engine/component/component-factory';\nimport { PlaceItemComponent } from '../components/place-item/place-item-component';\nimport { CropHarvesterComponent } from '../components/crop-harvester-component';\nimport { TextComponent } from '../components/text-component/text-component';\nimport { ParticleComponent } from '../components/particle-componet';\nimport { PrimitiveComponent } from '../components/primitive-component';\nimport { TransitionComponent } from '../components/transitions/transition-component';\nimport { TileComponent } from '../components/tile-component/tile-component';\nimport { ClickableComponent } from '../components/clickable-component';\nimport { PhaserPositionComponent } from '../components/phaser-components/phaser-position-component';\nimport { PhaserAnimationComponent } from '../components/phaser-components/phaser-animation-component';\n\nexport function createComponentFactory():ComponentFactory{\n    var cf:ComponentFactory = new ComponentFactory();\n    // cf.registerComponent(AnimationComponent);\n    cf.registerComponent(PhaserAnimationComponent);\n    cf.registerComponent(PhaserPositionComponent);\n    // cf.registerComponent(PositionComponent);\n    cf.registerComponent(WasdComponent);\n    cf.registerComponent(CropComponent);\n    cf.registerComponent(ProjectileComponent);\n    cf.registerComponent(FightComponent);\n    cf.registerComponent(HealthComponent);\n    cf.registerComponent(NeuralFightComponent);\n    cf.registerComponent(InventoryComponent);\n    cf.registerComponent(PlaceItemComponent);\n    cf.registerComponent(CropHarvesterComponent);\n    cf.registerComponent(TextComponent);\n    cf.registerComponent(ParticleComponent);\n    cf.registerComponent(PrimitiveComponent);\n    cf.registerComponent(TransitionComponent);\n    cf.registerComponent(TileComponent);\n    cf.registerComponent(ClickableComponent);\n    return cf;\n}\n\nexport function buildComponents(game:Game):void{\n    game.registerComponent(AnimationComponent);\n    game.registerComponent(PositionComponent);\n    game.registerComponent(WasdComponent);\n    game.registerComponent(CropComponent);\n    game.registerComponent(ProjectileComponent);\n    game.registerComponent(FightComponent);\n    game.registerComponent(HealthComponent);\n    game.registerComponent(NeuralFightComponent);\n    game.registerComponent(InventoryComponent);\n    game.registerComponent(ParticleComponent);\n    game.registerComponent(PrimitiveComponent);\n    game.registerComponent(TransitionComponent);\n    game.registerComponent(TileComponent);\n    game.registerComponent(ClickableComponent);\n}", "import { Entity } from '../engine/entity/entity';\nimport { PositionComponent } from '../components/position-component';\nimport { ComponentFactory } from '../engine/component/component-factory';\nimport { createComponentFactory } from '../builders/build-components';\nimport { GameEvent } from '../engine/events/game-event';\nimport {TileComponent} from '../components/tile-component/tile-component';\n\nexport class FirstEntity extends Entity{\n    /**\n     * this is an empty entity that will always be the first \n     * entity in the game.entities array. if a system wants to know if it is being applied \n     * to the first entity it can check if it is this entity.\n     */\n    constructor(cf:ComponentFactory){\n        super(cf);\n        var position:PositionComponent = <PositionComponent>this.addComponent(\"position\");\n        position.y = -9999999;\n        var tiles = <TileComponent>this.addComponent(\"tile\");\n    }\n\n    handleEvents(events:{[key:string]:GameEvent}){\n        console.log(events);\n    }\n\n    static create():FirstEntity{\n        let cf:ComponentFactory = createComponentFactory();\n        var entity = new FirstEntity(cf);\n        return entity;\n    }\n}", "\nexport enum EventType {\n    wDown,\n    aDown,\n    sDown,\n    dDown,\n\n    wUp,\n    aUp,\n    sUp,\n    dUp,\n\n    spaceDown,\n    spaceUp,\n\n    iUp,// show inventory\n    iDown,\n\n    pDown,// console.log game object\n    pUp,\n\n    fDown,\n    fUp,\n\n    jUp,\n    kUp,\n    lUp,\n    hUp,\n    semicolonUp,\n    tildUp,\n    \n    jDown,\n    kDown,\n    lDown,\n    hDown,\n    semicolonDown,\n    tildDown,\n\n    mouseUp,\n    mouseDown,\n\n    collision,\n    fireProjectile,\n\n    inflictDamage,\n\n    changeVelocity,\n\n    giveItem,\n\n    dash\n}", "import { EventType } from \"./EventType\";\n\nexport class GameEvent {\n    constructor(eventName:EventType, eventData:{}, componentTarget:string=null){\n        this.eventName = eventName;\n        this.eventData = eventData;\n        this.eventDescription = EventType[eventName];\n    }\n    eventName:EventType;\n    eventDescription:string;\n    eventData:any;\n    componentTarget:string;\n\n    static create(eventName:EventType, eventData:{}=null):GameEvent{\n        var ge:GameEvent = new GameEvent(eventName, eventData);\n        return ge;\n    }\n}", "import { EntitySystem } from '../engine/system/system';\nimport { Entity } from '../engine/entity/entity';\nimport { WasdComponent } from '../components/wasd-component';\nimport { PositionComponent } from '../components/position-component';\nimport { AnimationComponent } from '../components/animation-component';\nimport { Game } from '../engine/game';\nimport { InventoryComponent } from '../components/inventory-component/inventory-component';\nimport { EventManager } from '../engine/events/event-manager';\nimport { GameEvent } from '../engine/events/game-event';\nimport { EventType } from '../engine/events/EventType';\nimport { PlaceItemRequest } from '../components/place-item/place-item-request';\nimport { PlaceItemComponent } from '../components/place-item/place-item-component';\nimport { CropHarvesterComponent } from '../components/crop-harvester-component';\nimport { CropComponent } from '../components/crop-component';\nimport { Component } from '../engine/component/component';\nimport { TransitionComponent } from '../components/transitions/transition-component';\n\nexport class WasdSystem extends EntitySystem {\n    constructor(game:Game){\n        super(game);\n    }\n    static create(game:Game):WasdSystem{\n        var wasd:WasdSystem = new WasdSystem(game);\n        //eventManager.addListener(EventType.wDown, function(){console.log(\"w down\")});\n        return wasd;\n    }\n\n    apply(){}\n\n    applyEvents(entity:Entity, eventManager:EventManager){\n        var events:GameEvent[] = eventManager.events;\n        var event:GameEvent;\n        var wasdComponent:WasdComponent= <WasdComponent>entity.getComponent(\"wasd\", true);\n        if (wasdComponent == null)return;\n        var position:PositionComponent = <PositionComponent>entity.getComponent(\"position\");\n        var animation:AnimationComponent = <AnimationComponent>entity.getComponent(\"animation\");\n        var transition:TransitionComponent = <TransitionComponent>entity.getComponent(\"transition\");\n        \n        var speed:number = wasdComponent.speed;\n        var sprite:string = wasdComponent.sprite;\n        var walkSprite:string = wasdComponent.walkSprite;\n        if (events.length > 0){\n            //console.log(events)\n        }\n        for (var i=0;i<events.length;i++){\n            event = events[i];\n            //console.log(event)\n            // console.log(event.eventName);\n            switch(event.eventName){\n                case EventType.wDown:\n                    if (wasdComponent.dashing)break;\n                    animation.setSprite(walkSprite);\n                    position.vy = -speed;\n                break;\n                case EventType.wUp:\n                    if (wasdComponent.dashing)break;\n                    animation.setSprite(sprite);\n                    position.vy = 0;\n                break;\n                case EventType.aDown:\n                    if (wasdComponent.dashing)break;\n                    position.faceRight = false;\n                    animation.setSprite(walkSprite);\n                    position.vx = -speed;\n                break;\n                case EventType.aUp:\n                    if (wasdComponent.dashing)break;\n                    animation.setSprite(sprite);\n                    position.vx = 0;\n                break;\n                case EventType.sDown:\n                    if (wasdComponent.dashing)break;\n                    animation.setSprite(walkSprite);\n                    position.vy = speed;\n                break;\n                case EventType.sUp:\n                    if (wasdComponent.dashing)break;\n                    animation.setSprite(sprite);\n                    position.vy = 0;\n                break;\n                case EventType.dDown:\n                    if (wasdComponent.dashing)break;\n                    position.faceRight = true;\n                    animation.setSprite(walkSprite);\n                    position.vx = speed;\n                break;\n                case EventType.dUp:\n                    if (wasdComponent.dashing)break;\n                    animation.setSprite(sprite);\n                    position.vx = 0;\n                break;\n                case EventType.spaceUp:\n                    this.dash(wasdComponent, position, animation, transition);\n                break;\n                case EventType.spaceUp:\n                    // position = <PositionComponent>entity.getComponent(\"position\");\n                    // let placeItem:PlaceItemComponent;\n                    // placeItem = <PlaceItemComponent>entity.getComponent(\"placeItem\");\n                    // placeItem.placeItem(\"crop\", [0, 0], (entity:Entity)=>{\n                    //     let crop:CropComponent = <CropComponent>entity.getComponent(\"crop\");\n                    //     crop.setCrop(\"onion\")\n                    // });\n                break;\n                case EventType.fUp:\n                    let cropHarvester:CropHarvesterComponent;\n                    cropHarvester = <CropHarvesterComponent>entity.getComponent(\"cropHarvester\", true);\n                    cropHarvester.startHarvest();\n                break;\n                case EventType.pUp:\n                    //console.log(\"p up\")\n                    console.log(this.game);\n                break;\n                case EventType.iUp:\n                    let inventory:InventoryComponent;\n                    inventory = <InventoryComponent>entity.getComponent(\"inventory\", true);\n                    inventory.inventoryToString();\n                break;\n                case EventType.jUp:\n                    var ge:GameEvent = GameEvent.create(EventType.fireProjectile);\n                    entity.emit(ge);\n                break;\n            }\n        }\n        this.updateDashing(entity, wasdComponent, position, animation, transition);\n    }\n    private updateDashing(entity: Entity, wasdComponent: WasdComponent, position: PositionComponent, animation: AnimationComponent, transition: TransitionComponent){\n        if (!wasdComponent.dashing)return;\n        if (wasdComponent.dashingTime == Math.floor(wasdComponent.maxDashingTime/2)){\n            transition.start(wasdComponent.dashSprite, wasdComponent.dashSpriteNumber, false);\n        }\n        if (wasdComponent.dashingTime == 0){\n            wasdComponent.dashing = false;\n            position.vx = 0;\n            position.vy = 0;\n            position.h = 0;\n            return;\n        }\n        wasdComponent.dashingTime -= 1; \n        position.vx = Math.sign(position.faceX) * wasdComponent.dashSpeed;\n        position.vy = Math.sign(position.faceY) * wasdComponent.dashSpeed;\n    }\n    private dash(wasdComponent:WasdComponent, position:PositionComponent, animation:AnimationComponent, transition:TransitionComponent){\n        if(wasdComponent.dashing)return;\n        wasdComponent.startDashing();\n        wasdComponent.dashWidth = position.width;\n        wasdComponent.dashHeight = position.height;\n        wasdComponent.dashSprite = animation.animationName;\n        wasdComponent.dashSpriteNumber = animation.getSpriteNumber();\n        transition.start(null, 32);\n    }\n}", "import { EntitySystem } from '../engine/system/system';\nimport { Entity } from '../engine/entity/entity';\nimport { AnimationComponent } from '../components/animation-component';\nimport { CropComponent } from '../components/crop-component';\nimport { ProjectileEntity } from '../entities/projectile-entity';\nimport { PlayerEntity } from '../entities/player-entity';\nimport { PositionComponent } from '../components/position-component';\nimport { Game } from '../engine/game';\nimport { InventoryComponent } from '../components/inventory-component/inventory-component';\nimport { GameEvent } from '../engine/events/game-event';\nimport { EventType } from '../engine/events/EventType';\nimport { CropHarvesterComponent } from '../components/crop-harvester-component';\nimport { SystemArgs } from '../engine/system/system-args';\n\nexport class CropSystem extends EntitySystem {\n    constructor(game:Game){\n        super(game);\n    }\n    apply(args:SystemArgs):void{\n        const entity = args.entity;\n        var a:AnimationComponent = <AnimationComponent>entity.getComponent(\"animation\", true);\n        var c:CropComponent = <CropComponent>entity.getComponent(\"crop\", true);\n        var p:PositionComponent = <PositionComponent>entity.getComponent(\"position\", true);\n        if(a==null||c==null){\n            return;\n        }\n        if (c.timeSinceGrowth == 0 || c.timeSinceGrowth==1){\n            a.setSprite(c.growthSprites[c.growthStage]);\n        }\n    };\n\n    applyEvents(entity:Entity):void{\n        var c:CropComponent = <CropComponent>entity.getComponent(\"crop\", true);\n        if(c==null)return;\n\n        var event:GameEvent;\n        for(var i:number=0;i<entity.targetedEvents.length;i++){\n            event = entity.targetedEvents[i];\n            this.handleEvent(event, entity);\n        }\n    };\n    static create(game:Game):EntitySystem{\n        return new CropSystem(game);\n    };\n\n    private handleCollision(event:GameEvent, entity:Entity){\n        if(!(event.eventData instanceof Entity)){\n            return;\n        }\n        let collidedEntity:Entity = <Entity>event.eventData;\n        let cropHarvester:CropHarvesterComponent;\n        try {\n            cropHarvester = <CropHarvesterComponent>collidedEntity.getComponent(\"cropHarvester\");\n        } catch {\n            return;\n        }\n        if(!cropHarvester.harvesting) {\n            return;\n        }\n\n        let crop:CropComponent = <CropComponent>entity.getComponent(\"crop\");\n        let playerInventory:InventoryComponent;\n        playerInventory = <InventoryComponent>collidedEntity.getComponent(\"inventory\");\n        if(crop.isGrown()){\n            playerInventory.addItem(crop.cropName, 1);\n        }\n        this.game.destroy(entity);\n\n    }\n\n    private handleEvent(event:GameEvent, entity:Entity):void{\n        switch (event.eventName){\n            case EventType.collision:\n                this.handleCollision(event, entity);\n                break;\n        }\n    }\n}", "import { Entity } from '../engine/entity/entity';\nimport { AnimationComponent } from '../components/animation-component';\nimport { PositionComponent } from '../components/position-component';\nimport { ComponentFactory } from '../engine/component/component-factory';\nimport { createComponentFactory } from '../builders/build-components';\nimport { GameEvent } from '../engine/events/game-event';\n\nexport class ProjectileEntity extends Entity {\n    constructor(cf:ComponentFactory){\n        super(cf);\n        var animation:AnimationComponent = <AnimationComponent>this.addComponent(\"animation\");\n        var position:PositionComponent = <PositionComponent>this.addComponent(\"position\");\n        this.addComponent(\"projectile\");\n        animation.setSprite(\"fireball\");\n    }\n    handleEvents(events:{[key:string]:GameEvent}):void{\n    };\n\n    static create(){\n        let cf:ComponentFactory = createComponentFactory();\n        var pe:ProjectileEntity = new ProjectileEntity(cf);\n        return pe;\n    }\n}", "import { createComponentFactory } from \"../../builders/build-components\";\nimport { PositionComponent } from \"../../components/position-component\";\nimport { ComponentFactory } from \"../../engine/component/component-factory\";\nimport { Entity } from \"../../engine/entity/entity\";\nimport { GameEvent } from \"../../engine/events/game-event\";\n\nexport class ParticlesEntity extends Entity{\n    constructor(cf: ComponentFactory){\n        super(cf);\n        let position = <PositionComponent>this.addComponent(\"position\");\n        position.width = 10;\n        this.addComponent(\"particles\");\n    }\n    handleEvents(events: { [key: string]: GameEvent; }): void {\n    }\n    public static create(): Entity {\n        let cf:ComponentFactory = createComponentFactory();\n        return new ParticlesEntity(cf);\n    }\n}", "import { EntitySystem } from '../engine/system/system';\nimport { Game } from '../engine/game';\nimport { Entity } from '../engine/entity/entity';\nimport { PositionComponent } from '../components/position-component';\nimport { ProjectileComponent } from '../components/projectile-component';\nimport { ProjectileEntity } from '../entities/projectile-entity';\nimport { GameEvent } from '../engine/events/game-event';\nimport { EventType } from '../engine/events/EventType';\nimport { PrimitiveComponent } from '../components/primitive-component';\nimport { ParticlesEntity } from '../entities/particles/particles-entity';\nimport { SystemArgs } from '../engine/system/system-args';\n\nexport class ProjectileSystem extends EntitySystem {\n\n    constructor(game:Game){\n        super(game);\n    }\n\n    apply(args:SystemArgs){\n        const entity = args.entity;\n        var position:PositionComponent = <PositionComponent> entity.getComponent(\"position\", true);\n        var projectileComponent:ProjectileComponent = <ProjectileComponent>entity.getComponent(\"projectile\", true);\n        //console.log(projectileComponent)\n        if(position == null)return\n        if(projectileComponent == null)return\n        projectileComponent.lifeSpan--;\n        if (projectileComponent.lifeSpan == 0){\n            //position.y -= 50;\n            this.game.destroy(entity);\n        }\n    }\n\n    fireProjectile(entity:Entity, vx:number=null, vy:number=null){\n        let projectile:ProjectileEntity = <ProjectileEntity>this.game.addEntity(\"projectile\");\n        let projectileComponent:ProjectileComponent = <ProjectileComponent>projectile.getComponent(\"projectile\");\n        let projPosition:PositionComponent = <PositionComponent>projectile.getComponent(\"position\");\n        \n        var position:PositionComponent = <PositionComponent>entity.getComponent(\"position\");\n\n        projectileComponent.shooterId = entity.id;\n        projPosition.x = position.x;\n        projPosition.y = position.y;\n        \n        if(vx !== null && vy !== null){\n            projPosition.vx = vx;\n            projPosition.vy = vy;\n        } else {\n            projPosition.vx = position.faceX;\n            projPosition.vy = position.faceY;\n        }\n        projPosition.faceRight = position.faceRight;\n    }\n\n    applyEvents(entity:Entity){\n        var events:GameEvent[] = entity.targetedEvents;\n        var event:GameEvent;\n        for(var i=0;i<events.length;i++){\n            event = events[i];\n            switch(event.eventName){\n                case EventType.fireProjectile:\n                    if(event.eventData !== null){\n                        this.fireProjectile(entity, event.eventData.vx, event.eventData.vy);\n                    } else {\n                        this.fireProjectile(entity);\n                    }\n                break;\n                case EventType.collision:\n                    var isProj = entity instanceof ProjectileEntity;\n                    if(!isProj)break;\n                    var projectile:ProjectileComponent = <ProjectileComponent>entity.getComponent(\"projectile\");\n                    var isShooter = projectile.shooterId === event.eventData.id;\n                    var isSelf = entity.id === event.eventData.id;\n                    var isProjectile = event.eventData instanceof ProjectileEntity;\n                    var collidedId:number = event.eventData.id;\n                    var collided:Entity = this.game.getById(collidedId);\n                    var hitParticle = event.eventData instanceof ParticlesEntity;\n                    /*console.log(entity)\n                    console.log(event.eventData)\n                    console.log(isShooter)\n                    console.log(\"-\")*/\n                    if(!isShooter && !isSelf && !isProjectile && !hitParticle){\n                        var ge = GameEvent.create(EventType.inflictDamage)\n                        collided.emit(ge, true);\n                        //console.log(other.id)\n                        //console.log(other.targetedEvents.length);\n                        this.game.destroy(entity);\n                    }\n                break;\n            }\n        }\n    }\n\n    static create(game:Game):ProjectileSystem{\n        return new ProjectileSystem(game);\n    }\n}", "import { EntitySystem } from '../engine/system/system';\nimport { Entity } from '../engine/entity/entity';\nimport { Game } from '../engine/game';\nimport { HealthComponent } from '../components/health-component';\nimport { GameEvent } from '../engine/events/game-event';\nimport { EventType } from '../engine/events/EventType';\nimport { SystemArgs } from '../engine/system/system-args';\nexport class HealthSystem extends EntitySystem{\n    constructor(game:Game){\n        super(game)\n    }\n    apply(args:SystemArgs){\n\n    }\n    applyEvents(entity:Entity){\n        var health:HealthComponent = <HealthComponent>entity.getComponent(\"health\", true);\n        if(health == null)return;\n\n        var events:GameEvent[] = entity.targetedEvents;\n        var event:GameEvent;\n        //console.log(entity)\n        //console.log(health)\n        //console.log(entity.targetedEvents.length)\n        for(var i=0;i<events.length;i++){\n            event = events[i];\n            switch(event.eventName){\n                case EventType.inflictDamage:\n                    //console.log('health')\n                    this.handleDamage(entity, event);\n                break;\n            }\n        }\n        entity.targetedEvents = [];\n    }\n    handleDamage(entity:Entity, event:GameEvent){\n        if(event.eventData === null){\n            event.eventData = {damage:50};\n        }\n        var health:HealthComponent = <HealthComponent>entity.getComponent(\"health\", true);\n        health.health -= event.eventData.damage;\n        if (health.health < 0){\n            this.game.destroy(entity);\n        }\n    }\n    static create(game:Game){\n        return new HealthSystem(game);\n    }\n}", "import { EntitySystem } from '../engine/system/system';\nimport { Game } from '../engine/game';\nimport { Entity } from '../engine/entity/entity';\nimport { PositionComponent } from '../components/position-component';\nimport { GameEvent } from '../engine/events/game-event';\nimport { EventType } from '../engine/events/EventType';\nimport { SystemArgs } from '../engine/system/system-args';\n//import * as Synaptic from \"synaptic\";\n\nexport class PositionSystem extends EntitySystem{\n    /**\n     * used for drawing animation components\n     */\n    constructor(game:Game){\n        super(game);\n    }\n    static create(game:Game):PositionSystem {\n        return new PositionSystem(game);\n    }\n\n    apply(args:SystemArgs) {\n        //console.log(Synaptic)\n    }\n    applyEvents(entity:Entity){\n        var position:PositionComponent = <PositionComponent>entity.getComponent(\"position\");\n        if(position === null)return;\n        var events:GameEvent[] = entity.targetedEvents;\n        var event:GameEvent;\n        for(var i=0;i<events.length;i++){\n            event = events[i];\n            switch(event.eventName){\n                case EventType.changeVelocity:\n                    if(\"vx\" in event.eventData){\n                        position.vx = event.eventData.vx;\n                    }\n                    if(\"vy\" in event.eventData){\n                        position.vy = event.eventData.vy;\n                    }\n                break;\n            }\n        }\n    }\n}", "import { EntitySystem } from '../engine/system/system';\nimport { Entity } from '../engine/entity/entity';\nimport { Game } from '../engine/game';\nimport { NeuralFightComponent } from '../components/neural-fight-component';\nimport { GameEvent } from '../engine/events/game-event';\nimport { SystemArgs } from '../engine/system/system-args';\n\ndeclare var synaptic:any;\n\nexport class NeuralFightSystem extends EntitySystem{\n    constructor(game:Game){\n        super(game);\n    }\n\n    static create(game:Game){\n        return new NeuralFightSystem(game);\n    }\n\n    apply(args:SystemArgs){\n        const entity = args.entity;\n        var neural:NeuralFightComponent = <NeuralFightComponent>entity.getComponent(\"neural\", true);\n        if(neural == null){\n            return;\n        }\n        //console.log()\n    }\n\n    applyEvents(entity:Entity){\n        var events:GameEvent[] = entity.targetedEvents;\n        var event:GameEvent;\n        for(var i=0;i<events.length;i++){\n            event = events[i];\n        }\n    }\n}\n", "import { Entity } from './entity';\nimport { ComponentFactory } from '../component/component-factory';\n\nexport class EntityFactory {\n    constructor(componentFactory:ComponentFactory){\n        this.componentFactory = componentFactory;\n    }\n    entityTypes:{[key:string]:any}={};\n    componentFactory:ComponentFactory;\n\n    registerEntity(componentName:string, EntityClass:any){\n        if (EntityClass.prototype instanceof Entity){\n            this.entityTypes[componentName] = EntityClass;\n        } else {\n            console.log(\"EntityClass must extend class Entity\");\n        }\n    }\n\n    registerComponent(componentClass:any){\n        this.componentFactory.registerComponent(componentClass);\n    }\n\n    create(entityName:string){\n        let entityClass = this.entityTypes[entityName];\n        return this.entityTypes[entityName].create();\n    }\n\n    static create():EntityFactory{\n        let componentFactory:ComponentFactory = ComponentFactory.create();\n        let ef:EntityFactory = new EntityFactory(componentFactory);\n        return ef;\n    }\n}", "import { EventType } from \"./EventType\";\n\nexport class KeyEvents\n{\n    downKey: EventType;\n    upKey: EventType;\n    keyCode: number;\n    constructor(downKey:EventType, upKey:EventType, keyCode:number){\n        this.downKey = downKey;\n        this.upKey = upKey;\n        this.keyCode = keyCode;\n    }\n    public static create(controlEvent:EventType, controlReleaseEvent:EventType, controlKeyNumber:number){\n        return new KeyEvents(controlEvent, controlReleaseEvent, controlKeyNumber);\n    }\n}\n\nfunction getKeyEvents()\n{\n    let results = []\n    results.push(KeyEvents.create(EventType.wDown, EventType.wUp, 87));\n    results.push(KeyEvents.create(EventType.aDown, EventType.aUp, 65));\n    results.push(KeyEvents.create(EventType.sDown, EventType.sUp, 83));\n    results.push(KeyEvents.create(EventType.dDown, EventType.dUp, 68));\n    results.push(KeyEvents.create(EventType.spaceDown, EventType.spaceUp, 32));\n    results.push(KeyEvents.create(EventType.pDown, EventType.pUp, 80));\n    results.push(KeyEvents.create(EventType.iDown, EventType.iUp, 73));\n    results.push(KeyEvents.create(EventType.fDown, EventType.fUp, 70));\n    results.push(KeyEvents.create(EventType.jDown, EventType.jUp, 74));\n    results.push(KeyEvents.create(EventType.kDown, EventType.kUp, 75));\n    results.push(KeyEvents.create(EventType.lDown, EventType.lUp, 76));\n    results.push(KeyEvents.create(EventType.semicolonDown, EventType.semicolonDown, 186));\n    results.push(KeyEvents.create(EventType.tildDown, EventType.tildUp, 192));\n    return results;\n}\n\nexport let keyEvents = getKeyEvents();", "import { GameEvent } from \"./game-event\";\nimport { EventType } from \"./EventType\";\nimport { keyEvents } from \"./key-events\";\n\nexport class EventManager {\n    constructor(){\n        this.keys = this.createKeyListener();\n    }\n\n    keys:boolean[] = Array(1000);\n    keysReleased:boolean[] = Array(1000);\n    //events:{[key:string]:GameEvent[]} = {};\n    events:GameEvent[] = [];\n    callbacks:{[key:string]:((event:GameEvent)=>void)[]} = {};\n\n\n    createKeyListener(){\n        var keys:boolean[] = Array(1000);\n        window.addEventListener(\"keydown\", function(e){\n            keys[e.keyCode] = true;\n        })\n        window.addEventListener(\"keyup\", function(e){\n            keys[e.keyCode] = false;\n            //console.log(e.keyCode)\n        })\n        let canvas = document.getElementById(\"canvas\");\n        window.addEventListener(\"mouseup\", (e)=>{\n            const rect = canvas.getBoundingClientRect()\n            const x = e.clientX - rect.left\n            const y = e.clientY - rect.top\n            console.log(\"x: \" + x + \" y: \" + y)\n            this.emit(EventType.mouseUp, {x,y});\n        })\n        return keys;\n    }\n\n    update(){\n        // this.events = [];\n        for(var i:number=0;i<keyEvents.length;i++){\n            let keyEvent = keyEvents[i];\n            if(this.keys[keyEvent.keyCode]){\n                //emit key down event\n                this.emit(keyEvent.downKey);\n                this.keysReleased[keyEvent.keyCode] = true;\n            } else {\n                if(this.keysReleased[keyEvent.keyCode]){\n                    //emit key up event\n                    this.emit(keyEvent.upKey);\n                    this.keysReleased[keyEvent.keyCode] = false;\n                }\n            }\n        }\n    }\n\n    emit(eventName:EventType, eventData:{}={}){\n        var ge:GameEvent = new GameEvent(eventName, eventData);\n        this.events.push(ge);\n    }\n\n    fireCallbacks(){\n        //used with addListener\n        //unused currently\n        var events:GameEvent[];\n        var callbacks:((event:GameEvent)=>void)[];\n        for (let i=0;i<this.events.length;i++){\n            let event = this.events[i];\n            //get listener callbacks listening to this event\n            if (!(event.eventName in this.callbacks)) continue;\n            callbacks = this.callbacks[event.eventName];\n            callbacks.forEach((callback)=>{\n                callback(event);\n            })\n        }\n        this.events = [];\n    }\n\n    addListener(eventName:EventType, callback:(event:GameEvent)=>void){\n        //used with fireCallbacks\n        //unused currently\n        if (!(eventName in this.callbacks)){\n            this.callbacks[eventName] = [];\n        }\n        this.callbacks[eventName].push(callback);\n    }\n\n    \n    createEvent(eventName:EventType){\n        if(eventName in this.events)return;\n        this.events = [];\n        this.callbacks[eventName] = [];\n    }\n\n    static create(){\n        var em:EventManager = new EventManager();\n        em.createEvent(EventType.wDown);\n        em.createEvent(EventType.aDown);\n        em.createEvent(EventType.sDown);\n        em.createEvent(EventType.dDown);\n        return em;\n    }\n}", "import { SpriteManager} from \"../../sprite-manager\";\nimport { HtmlRectSprite } from \"./html-rect-sprite\";\nimport { Renderer } from \"../../render\";\nimport { RenderOptions } from \"../../render-options\";\nimport { SpriteAnimation } from \"../../sprite-animation\";\nimport { HtmlCanvas } from \"./html-canvas\";\nimport { Sprite } from \"../../sprite\";\n\nexport class HtmlRenderer implements Renderer {\n    canvas:HTMLCanvasElement;\n    ctx:CanvasRenderingContext2D;\n    public readonly offset:number[];\n    public spriteManager:SpriteManager;\n    // offScreenCanvas: OffscreenCanvas;\n    constructor(context:HtmlCanvas, spriteManager:SpriteManager){\n        this.canvas = context.canvas;\n        // this.offScreenCanvas = new OffscreenCanvas(this.canvas.width, this.canvas.height);\n        this.ctx = context.ctx;\n        this.spriteManager = spriteManager;\n        this.offset = [0, 0];\n        this.ctx.font = \"30px Arial\";\n    }\n    getOffset(): number[] {\n        return this.offset;\n    }\n    \n    setOffset(offset:number[]){\n        if(offset.length>2){\n            console.log(\"warning incorrect number of offsets\");\n            return;\n        }\n        this.offset[0] = offset[0] - this.canvas.width/2;\n        this.offset[1] = offset[1] - this.canvas.height/2;\n    }\n\n    cbox(){\n        this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);\n        // this.ctx.fillStyle = \"#00ffff\";\n        // this.ctx.fillStyle = \"#7CFC00\";\n        // this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height);\n    }\n    \n    spriteFilter(filter: ImageData, x: number, y: number, width: number, height: number, spriteNumber: number, options: RenderOptions): void {\n        let flip:boolean = options.flip;\n        // let sprite:Sprite = <Sprite>this.spriteManager.getSprite(spriteName);\n        x = x - width/2;//draw at middle of sprite\n        y = y - height;//draw at bottom of sprite\n        if (options.applyOffsets){\n            x -= this.offset[0]; //offset all drawings to the left\n            y -= this.offset[1];\n        }\n        let flipTranslation:number = 2*(x+width/2);\n        if(flip){\n            this.ctx.translate(flipTranslation, 0);\n            this.ctx.scale(-1,1);\n        }\n        if(options.rotate){\n            this.ctx.rotate(options.rotate);\n        }\n\n        let canvas = document.createElement(\"canvas\");\n        canvas.width = filter.width;\n        canvas.height = filter.height;\n        let context = canvas.getContext(\"2d\");\n        context.putImageData(filter, 0, 0);\n        this.ctx.drawImage(canvas, 0, 0, filter.width, filter.height, x, y , width, height);\n\n        if(options.rotate){\n            this.ctx.rotate(-options.rotate);\n        }\n        if (flip){\n            this.ctx.scale(-1,1);\n            this.ctx.translate(-flipTranslation,0);\n        }\n    }\n\n    sprite(spriteName:string, x:number, y:number, width:number, height:number, spriteNumber:number, options:RenderOptions):void{\n        let flip:boolean = options.flip;\n        let sprite:Sprite = <Sprite>this.spriteManager.getSprite(spriteName);\n        let fc = sprite.frameCoords(spriteNumber);\n        x = x - width/2;//draw at middle of sprite\n        y = y - height;//draw at bottom of sprite\n        if (options.applyOffsets){\n            x -= this.offset[0]; //offset all drawings to the left\n            y -= this.offset[1];\n        }\n        let flipTranslation:number = 2*(x+width/2);\n        if(flip){\n            this.ctx.translate(flipTranslation, 0);\n            this.ctx.scale(-1,1);\n        }\n        if(options.rotate){\n            this.ctx.rotate(options.rotate);\n        }\n        if (x+width > -100 && x < this.canvas.width && y+height > -100 && (y-height)<this.canvas.height)\n        {\n            sprite.drawImage(spriteNumber, x, y, width, height);\n        }\n\n        if(options.rotate){\n            this.ctx.rotate(-options.rotate);\n        }\n        if (flip){\n            this.ctx.scale(-1,1);\n            this.ctx.translate(-flipTranslation,0);\n        }\n    }\n\n    text(text:string, x:number, y:number, size:number=10):void{\n        x -= this.offset[0]; //offset all drawings to the left\n        y -= this.offset[1];\n        this.ctx.fillText(text, x, y);\n    }\n\n    circle(x: number, y: number, r: number): void {\n        this.ctx.beginPath();\n        this.ctx.fillStyle = \"#690055\";\n        // this.ctx.fillStyle = \"black\";\n        this.ctx.globalAlpha = .6;\n        this.ctx.arc(x - this.offset[0], y - this.offset[1], r*2, 0, 2 * Math.PI);\n        this.ctx.fill();\n        this.ctx.beginPath();\n        this.ctx.fillStyle = \"black\";\n        // this.ctx.fillStyle = \"#690055\";\n        this.ctx.globalAlpha = 1;\n        this.ctx.arc(x - this.offset[0], y - this.offset[1], r*1, 0, 2 * Math.PI);\n        this.ctx.fill();\n        this.ctx.globalAlpha = 1;\n        // this.ctx.stroke();\n    }\n\n    line(x1: number, y1: number, x2: number, y2: number): void {\n        this.ctx.beginPath();\n        this.ctx.moveTo(x1, y1);\n        this.ctx.lineTo(x2, y2);\n        this.ctx.stroke();\n    }\n\n    static create():HtmlRenderer{\n        let canvas = HtmlCanvas.createSingleton();\n        var spriteManager:SpriteManager = SpriteManager.singeltonCreate();\n        //var spriteManager:SpriteManager = createSpriteManager();\n        return new HtmlRenderer(canvas, spriteManager);\n    }\n}", "import { Entity } from \"../entity/entity\";\nimport { EventManager } from \"../events/event-manager\";\n\nexport class SystemArgs{\n    entity:Entity;\n    eventManager:EventManager;\n    delta:number;\n    fullFramesPassed:number;\n}", "export class EntityUpdateArgs{\n    delta: number;\n    fullFramePassed:number;\n}", "import { Entity } from './entity/entity';\nimport { EntityFactory } from './entity/entity-factory';\nimport { EntitySystem } from './system/system';\nimport { EventManager } from './events/event-manager';\nimport { Renderer } from './renderers/render';\nimport { HtmlRenderer } from './renderers/implementations/html/html-renderer';\nimport { SpriteManager } from './renderers/sprite-manager';\nimport { PositionComponent } from '../components/position-component';\nimport { SystemArgs } from './system/system-args';\nimport { EntityUpdateArgs } from './entity/entity-update-args';\nimport { PhaserGame } from './phaser-integration/phaser-game';\nimport { ISpriteLoader } from './renderers/isprite-loader';\n\nexport class Game {\n    constructor(entityFactory:EntityFactory, renderer:Renderer, eventManager:EventManager, spriteManager:ISpriteLoader){\n        this.entityFactory = entityFactory;\n        this.renderer = renderer;\n        this.eventManager = eventManager;\n        this.spriteManager = spriteManager;\n    }\n\n    static create():Game{\n        const renderer = HtmlRenderer.create();\n        var game = new Game(EntityFactory.create(), renderer, EventManager.create(), renderer.spriteManager);\n        return game;\n    }\n    \n    static createCustom(spriteManager:ISpriteLoader):Game{\n        var game = new Game(EntityFactory.create(), HtmlRenderer.create(), EventManager.create(), spriteManager);\n        return game;\n    }\n\n    private _entities:Entity[] = [];\n    get entities():Entity[]{\n        return this._entities;\n    }\n    set entities(entities:Entity[]){\n        //console.log(entities)\n        this._entities = entities;\n    }\n    //entitiesX:Entity[] = [];\n    entityFactory:EntityFactory;\n    systems:EntitySystem[] = [];\n    renderer:Renderer;\n    eventManager:EventManager;\n    intervalId:number;\n    spriteManager:ISpriteLoader;\n    performance: number;\n    frameTime: number;\n    targetFps: number = 60;\n    counter: number = 0;\n    lastTime = performance.now();\n    frameTracker:number = 0;\n    phaserGame:PhaserGame;\n    update(delta:number, framesPassed:number){\n        // this.renderer.cbox();\n        this.performance = performance.now();\n        this.eventManager.update();\n        for(var i=0;i<this.entities.length;i++){\n            const args = new EntityUpdateArgs();\n            args.delta = delta;\n            args.fullFramePassed = framesPassed;\n            this.entities[i].update(args);\n            for(var systemi=0;systemi<this.systems.length;systemi++){\n                const args = new SystemArgs();\n                args.entity = this.entities[i];\n                args.eventManager = this.eventManager;\n                args.fullFramesPassed = framesPassed;\n                this.systems[systemi].apply(args);\n            }\n        }\n\n        var numEvents:number;\n        for(var i=0;i<this.entities.length;i++){\n            for(var systemi=0;systemi<this.systems.length;systemi++){\n                this.systems[systemi].applyEvents(this.entities[i], this.eventManager);\n            }\n            this.entities[i].targetedEvents = this.entities[i].delayedEvents;\n            this.entities[i].delayedEvents = [];\n        }\n        \n        this.eventManager.fireCallbacks();\n        \n        this.entities.sort(function(a:Entity,b:Entity){\n            var pa:PositionComponent = <PositionComponent>a.getComponent(\"position\");\n            var pb:PositionComponent = <PositionComponent>b.getComponent(\"position\");\n            return pa.y - pb.y;\n        });\n        this.cleanDestroyedEntities();\n        if (this.counter%10==0){\n            this.frameTime = 100*(performance.now() - this.performance)/(1000/this.targetFps)\n        }else performance.now();\n        this.renderer.text(Math.floor(this.frameTime).toString(),0,0, 1000);\n        this.counter = (this.counter + 1)%100;\n    }\n    step(delta:number){\n        delta = delta/(1000/this.targetFps);\n        this.frameTracker += delta;\n        if (this.frameTracker > 1){\n            this.update(delta, Math.floor(this.frameTracker));\n            this.frameTracker = 0;\n        } else {\n            this.update(delta, 0);\n        }\n    }\n    private loop(time:number){\n        const delta = (time - this.lastTime)/(1000/this.targetFps);\n        this.step(delta);\n        this.lastTime = time;\n        window.requestAnimationFrame((time)=>{this.loop(time)});\n    }\n    start():number{\n        console.log(\"starting game\")\n        window.requestAnimationFrame(()=>{\n            this.loop(this.lastTime);\n        });\n        return 0;\n    }\n\n    stop(){\n        clearInterval(this.intervalId);\n    }\n\n    addEntity(entityName:string){\n        var entity:Entity = this.entityFactory.create(entityName);\n        this.entities.push(entity);\n        //this.entitiesX.push(entity);\n        return entity;\n    }\n\n    getById(entityId:number):Entity{\n        var entity:Entity;\n        for(var i=0;i<this.entities.length;i++){\n            entity = this.entities[i];\n            if(entityId == entity.id)return entity\n        }\n        return null;\n    }\n\n    destroy(entity:Entity){\n        entity.destroyed = true;\n    }\n\n    cleanDestroyedEntities(){\n        if(this.entities.filter((entity)=>entity.destroyed).length == 0)return;\n        let newEntities:Entity[] = [];\n        for(let i:number=0;i<this.entities.length;i++){\n            if(!this.entities[i].destroyed){\n                newEntities.push(this.entities[i]);\n            } else {\n                delete this.entities[i];\n            }\n        }\n        delete this.entities;\n        this.entities = newEntities;\n    }\n\n    addSystem(system:EntitySystem):void{\n        this.systems.push(system);\n    }\n\n    registerEntity(entityName:string, EntityClass:any):void{\n        this.entityFactory.registerEntity(entityName, EntityClass);\n    }\n\n    registerComponent(EntityClass:any):void{\n        this.entityFactory.registerComponent(EntityClass);\n    }\n}", "/**\n * add sprites to the game here using the game object's spriteManager\n */\n\nimport { SpriteManager } from \"../engine/renderers/sprite-manager\";\nimport { Game } from \"../engine/game\";\nimport { ISpriteLoader } from \"../engine/renderers/isprite-loader\";\n\nexport function populateSpriteManager(spriteManager:ISpriteLoader):ISpriteLoader{\n    var sm:ISpriteLoader = spriteManager;\n    sm.loadSprite(\"blondDress\", \"blond.png\", 4, 8);\n    sm.loadSprite(\"nothing\", \"blond.png\", 100, 100);\n    sm.addAnimation(\"nothing\", \"nothing\", [0], 10);\n    \n    sm.loadSprite(\"blond\", \"blondWalk.png\", 4, 2);\n    sm.addAnimation(\"blond\", \"blondWalk\", [4,5,6,7], 5);\n    sm.addAnimation(\"blond\", \"blond\", [4], 5);\n   \n    sm.loadSprite(\"fantasySprites\", \"fantasysprites.png\", 12,8);\n    sm.addAnimation(\"fantasySprites\", \"redHair\", [24,25,26,25], 6);\n\n    sm.loadSprite(\"crops\", \"crops.png\", 12, 8);\n    sm.addAnimation(\"crops\", \"turnip0\", [0]);\n    sm.addAnimation(\"crops\", \"turnip1\", [1]);\n    sm.addAnimation(\"crops\", \"turnip2\", [2]);\n\n    sm.addAnimation(\"crops\", \"corn0\", [30]);\n    sm.addAnimation(\"crops\", \"corn1\", [31]);\n    sm.addAnimation(\"crops\", \"corn2\", [32]);\n    \n    sm.addAnimation(\"crops\", \"wheat0\", [33]);\n    sm.addAnimation(\"crops\", \"wheat1\", [34]);\n    sm.addAnimation(\"crops\", \"wheat2\", [35]);\n    \n    sm.addAnimation(\"crops\", \"pumpkin0\", [54]);\n    sm.addAnimation(\"crops\", \"pumpkin1\", [55]);\n    sm.addAnimation(\"crops\", \"pumpkin2\", [56]);\n\n    sm.loadSprite(\"scrops\", \"scrops.png\", 24, 23);\n    sm.addAnimation(\"scrops\", \"onion0\", [0]);\n    sm.addAnimation(\"scrops\", \"onion1\", [1]);\n    sm.addAnimation(\"scrops\", \"onion2\", [2]);\n    sm.addAnimation(\"scrops\", \"onion3\", [3]);\n    sm.addAnimation(\"scrops\", \"onion4\", [4]);\n    sm.addAnimation(\"scrops\", \"onion5\", [5]);\n    sm.addAnimation(\"scrops\", \"onion\", [6]);\n\n    var cn = 24 * 8 + 18;\n    sm.addAnimation(\"scrops\", \"corn\", [cn]);\n\n    sm.loadSprite(\"victorian\",\"victoriansprites.png\", 12, 8);\n    sm.addAnimation(\"victorian\", \"bluecloak\", [24]);\n    sm.addAnimation(\"victorian\", \"bluecloakwalk\", [24, 25, 26, 25], 5);\n    \n    cn = 12 * 6;\n    sm.addAnimation(\"victorian\", \"grey\", [cn], 5);\n    sm.addAnimation(\"victorian\", \"greyWalk\", [cn, cn+1, cn+2, cn+1], 5);\n\n    cn = 8*4;\n    sm.loadSprite(\"fireball\", \"fireball.png\", 8, 8);\n    sm.addAnimation(\"fireball\", \"fireball\", [cn, cn+1,cn+2, cn+3, cn+4, cn+5, cn+6,cn+7])\n\n    sm.loadSprite(\"tilesetcrops\", \"tilesets/submission_daneeklu/tilesets/plants.png\", 9, 6);\n\n    cn = 6;\n    sm.addAnimation(\"tilesetcrops\", \"tomato0\", [cn + 0]);\n    sm.addAnimation(\"tilesetcrops\", \"tomato1\", [cn + 9]);\n    sm.addAnimation(\"tilesetcrops\", \"tomato2\", [cn + 18]);\n    sm.addAnimation(\"tilesetcrops\", \"tomato3\", [cn + 27]);\n    sm.addAnimation(\"tilesetcrops\", \"tomato4\", [cn + 36]);\n\n    sm.loadSprite(\"arm\", \"arm.png\", 1, 1);\n    sm.addAnimation(\"arm\", \"arm0\", [1]);\n    \n    sm.loadSpriteOverlapping(\"swords\", \"sword-7Soul1.png\");\n    // sm.addAnimation(\"swordAs\", \"arrowsword\", [0], 30)\n    sm.loadSprite(\"dwarves\", \"fantasysprites/DwarfSprites2.png\", 12, 8);\n    sm.addAnimation(\"dwarves\", \"dwarfopeneyes\", [35]);\n    sm.addAnimation(\"dwarves\", \"dwarfopeneyesWalk\", [33, 35, 34, 35], 5);\n    \n    sm.loadSprite(\"goblins\", \"fantasysprites/EnemySpriteSheet1.png\", 12, 8);\n    sm.addAnimation(\"goblins\", \"speargoblin\", [35]);\n    sm.addAnimation(\"goblins\", \"speargoblinWalk\", [33, 35, 34, 35], 5);\n\n    sm.loadSprite(\"grass\", \"tilesets/submission_daneeklu/tilesets/grass.png\", 3, 6);\n    sm.loadSprite(\"soil\", \"tilesets/submission_daneeklu/tilesets/plowed_soil.png\", 3, 6);\n\n    sm.loadSprite(\"people3\", \"fantasysprites/PeopleSpriteSheet2.png\", 12, 8);\n    sm.addAnimation(\"people3\", \"brownpuffgirl\", [80]);\n    sm.addAnimation(\"people3\", \"brownpuffgirlwalk\", [79, 80, 81], 5);\n\n    sm.loadSprite(\"victorian2\", \"BearSprites.webp\", 12, 8);\n    sm.addAnimation(\"victorian2\", \"nun\", [79], 5);\n    sm.addAnimation(\"victorian2\", \"nunwalk\", [78,79,80, 79], 5);\n\n    sm.loadSprite(\"greg\", \"greg.png\", 2,2);\n    sm.addAnimation(\"greg\", \"greg\", [0]);\n    sm.addAnimation(\"greg\", \"gregwalk\", [1,0,3,0], 10);\n\n    sm.loadSprite(\"greyaction\", \"greyactions.png\", 2,2);\n    sm.addAnimation(\"greyaction\", \"greythrow\", [0,1,2],5)\n\n    sm.loadSprite(\"deer\", \"deer/deer male calciumtrice.png\", 5, 5);\n    sm.addAnimation(\"deer\", \"deer\", [0,1,2,3,4,5,6,7,8],10)\n\n    sm.loadSpriteWithDimensions(\"woodpanelui\", \"tilesets/submission_daneeklu/ui/scrollsandblocks.png\", 96, 96, 0, 128);\n    // sm.loadSpriteWithDimensions(\"woodpanelui\", \"tilesets/submission_daneeklu/ui/scrollsandblocks.png\", 10,10);\n    sm.addAnimation(\"woodpanelui\", \"woodpanelsunken\", [0]);\n\n    return sm;\n}\n\nexport function buildSprites(game:Game):void{\n    populateSpriteManager(game.spriteManager);\n}", "import { Entity } from '../engine/entity/entity';\nimport { PositionComponent } from '../components/position-component';\nimport { WasdComponent } from '../components/wasd-component';\nimport { AnimationComponent } from '../components/animation-component';\nimport { ComponentFactory } from '../engine/component/component-factory';\nimport { createComponentFactory } from '../builders/build-components';\nimport { InventoryComponent } from '../components/inventory-component/inventory-component';\nimport { PlaceItemComponent } from '../components/place-item/place-item-component';\nimport { GameEvent } from '../engine/events/game-event';\nimport { CropHarvesterComponent } from '../components/crop-harvester-component';\nimport { ParticleComponent } from '../components/particle-componet';\n\nexport class PlayerEntity extends Entity{\n    constructor(componentFactory:ComponentFactory){\n        super(componentFactory);\n        var animation:AnimationComponent = <AnimationComponent>this.addComponent(\"animation\");\n        var position:PositionComponent = <PositionComponent>this.addComponent(\"position\");\n        var wasd:WasdComponent = <WasdComponent>this.addComponent(\"wasd\");\n        var inventory:InventoryComponent = <InventoryComponent>this.addComponent(\"inventory\");\n        let placeItem:PlaceItemComponent = <PlaceItemComponent>this.addComponent(\"placeItem\");\n        let cropHarvester:CropHarvesterComponent;\n        cropHarvester = <CropHarvesterComponent>this.addComponent(\"cropHarvester\");\n        let particles = <ParticleComponent>this.addComponent(\"particles\");\n        particles.targetParticles = 0;\n        this.addComponent(\"transition\");\n        \n        var sprite:string = \"grey\";\n        // var sprite:string = \"greythrow\";\n        var walkSprite:string = \"greyWalk\";\n        // var sprite:string = \"greg\";\n        // var walkSprite:string = \"gregwalk\";\n        // var sprite:string = \"blond\";\n        // var walkSprite:string = \"blondWalk\";\n        // var sprite:string = \"dwarfopeneyes\";\n        // var walkSprite:string = \"dwarfopeneyesWalk\";\n        // var sprite:string = \"speargoblin\";\n        // var walkSprite:string = \"speargoblinWalk\";\n        \n        animation.setSprite(sprite)\n        wasd.sprite = sprite;\n        wasd.walkSprite = walkSprite;\n        position.width = 32;\n        position.height = 48;\n        let multi = 2.4\n        position.width *= multi\n        position.height *= multi\n    }\n\n    handleEvents(events:{[key:string]:GameEvent}){\n    }\n\n    static create():PlayerEntity{\n        let cf:ComponentFactory = createComponentFactory();\n        var entity = new PlayerEntity(cf);\n        return entity;\n    }\n}", "import { Entity } from '../engine/entity/entity';\nimport { PositionComponent } from '../components/position-component';\nimport { AnimationComponent } from '../components/animation-component';\nimport { FightComponent } from '../components/fight-component';\nimport { HealthComponent } from '../components/health-component';\nimport { NeuralFightSystem } from '../systems/neural-fight-system';\nimport { NeuralFightComponent } from '../components/neural-fight-component';\nimport { ComponentFactory } from '../engine/component/component-factory';\nimport { createComponentFactory } from '../builders/build-components';\nimport { GameEvent } from '../engine/events/game-event';\n\nexport class VillagerEntity extends Entity{\n    constructor(cf:ComponentFactory){\n        super(cf);\n        var animation:AnimationComponent = <AnimationComponent>this.addComponent(\"animation\");\n        var position:PositionComponent = <PositionComponent>this.addComponent(\"position\");\n        var fight:FightComponent = <FightComponent>this.addComponent(\"fight\");\n        var health:HealthComponent = <HealthComponent>this.addComponent(\"health\");\n        var neural:NeuralFightComponent = <NeuralFightComponent>this.addComponent(\"neural\");\n        \n        position.width = 70;\n        /*animation.setSprite(\"brownpuffgirl\");\n        \n        position.height = 32;\n        let multiplier = 2.5;\n        position.height *= multiplier * 1.1;\n        position.width *= multiplier;*/\n    }\n\n    handleEvents(events:{[key:string]:GameEvent}){\n    }\n\n    static create():VillagerEntity{\n        let cf:ComponentFactory = createComponentFactory();\n        var entity = new VillagerEntity(cf);\n        return entity;\n    }\n}", "import { Entity } from '../engine/entity/entity';\nimport { AnimationComponent } from '../components/animation-component';\nimport { PositionComponent } from '../components/position-component';\nimport { ComponentFactory } from '../engine/component/component-factory';\nimport { createComponentFactory } from '../builders/build-components';\nimport { GameEvent } from '../engine/events/game-event';\nimport { CropComponent } from '../components/crop-component';\n\nexport class CropEntity extends Entity{\n    constructor(cf:ComponentFactory){\n        super(cf);\n        var position:PositionComponent = <PositionComponent>this.addComponent(\"position\");\n        let animation:AnimationComponent = <AnimationComponent>this.addComponent(\"animation\");\n        let crop:CropComponent = <CropComponent>this.addComponent(\"crop\");\n        if(crop.growthSprites.length > 0) {\n            animation.setSprite(crop.growthSprites[0]);\n        }\n    }\n\n    handleEvents(events:{[key:string]:GameEvent}){\n    }\n    \n    static create(){\n        let cf:ComponentFactory = createComponentFactory();\n        return new CropEntity(cf);\n    }\n}", "import { Entity } from \"../engine/entity/entity\";\nimport { ComponentFactory } from \"../engine/component/component-factory\";\nimport { GameEvent } from \"../engine/events/game-event\";\nimport { createComponentFactory } from \"../builders/build-components\";\nimport { TextComponent } from \"../components/text-component/text-component\";\n\nexport class InventoryItemEntity extends Entity {\n    handleEvents(events: {[key: string]:GameEvent}): void {\n    }\n    constructor(cf:ComponentFactory){\n        super(cf);\n        this.addComponent(\"position\");\n        this.addComponent(\"animation\");\n        let text:TextComponent = <TextComponent>this.addComponent(\"text\");\n        text.addTextPlacement(\"\", 0, 0);\n    }\n    static create():InventoryItemEntity {\n        return new InventoryItemEntity(createComponentFactory());\n    }\n}", "import { createComponentFactory } from \"../../builders/build-components\";\nimport { PositionComponent } from \"../../components/position-component\";\nimport { ComponentFactory } from \"../../engine/component/component-factory\";\nimport { Entity } from \"../../engine/entity/entity\";\nimport { GameEvent } from \"../../engine/events/game-event\";\n\nexport class ParticleEntity extends Entity {\n    constructor(cf: ComponentFactory){\n        super(cf);\n        let position = this.addComponent(\"position\");\n        this.addComponent(\"primitive\");\n    }\n    handleEvents(events: { [key: string]: GameEvent; }): void {\n    }\n    public static create(): Entity {\n        let cf:ComponentFactory = createComponentFactory();\n        return new ParticleEntity(cf);\n    }\n}", "import { createComponentFactory } from \"../builders/build-components\";\nimport { AnimationComponent } from \"../components/animation-component\";\nimport { PositionComponent } from \"../components/position-component\";\nimport { ComponentFactory } from \"../engine/component/component-factory\";\nimport { Entity } from \"../engine/entity/entity\";\nimport { GameEvent } from \"../engine/events/game-event\";\n\nexport class ClickableEntity extends Entity {\n    constructor(cf:ComponentFactory){\n        super(cf);\n        var position:PositionComponent = <PositionComponent>this.addComponent(\"position\");\n        let animation:AnimationComponent = <AnimationComponent>this.addComponent(\"animation\");\n        this.addComponent(\"click\");\n    }\n    handleEvents(events: { [key: string]: GameEvent; }): void {\n    }\n    static create(){\n        let cf:ComponentFactory = createComponentFactory();\n        return new ClickableEntity(cf);\n    }\n}", "import { Entity } from '../engine/entity/entity';\nimport { PositionComponent } from '../components/position-component';\nimport { AnimationComponent } from '../components/animation-component';\nimport { FightComponent } from '../components/fight-component';\nimport { HealthComponent } from '../components/health-component';\nimport { NeuralFightSystem } from '../systems/neural-fight-system';\nimport { NeuralFightComponent } from '../components/neural-fight-component';\nimport { ComponentFactory } from '../engine/component/component-factory';\nimport { createComponentFactory } from '../builders/build-components';\nimport { GameEvent } from '../engine/events/game-event';\n\nexport class DeerEntity extends Entity{\n    constructor(cf:ComponentFactory){\n        super(cf);\n        var animation:AnimationComponent = <AnimationComponent>this.addComponent(\"animation\");\n        var position:PositionComponent = <PositionComponent>this.addComponent(\"position\");\n        animation.setSprite(\"deer\");\n        \n        position.width = 110;\n        position.height = 110;\n    }\n\n    handleEvents(events:{[key:string]:GameEvent}){\n    }\n\n    static create():DeerEntity{\n        let cf:ComponentFactory = createComponentFactory();\n        var entity = new DeerEntity(cf);\n        return entity;\n    }\n}", "import { createComponentFactory } from \"../builders/build-components\";\nimport { AnimationComponent } from \"../components/animation-component\";\nimport { PositionComponent } from \"../components/position-component\";\nimport { ComponentFactory } from \"../engine/component/component-factory\";\nimport { Entity } from \"../engine/entity/entity\";\nimport { GameEvent } from \"../engine/events/game-event\";\n\nexport class UIPanelEntity extends Entity {\n    constructor(cf:ComponentFactory){\n        super(cf);\n        let animation:AnimationComponent = <AnimationComponent>this.addComponent(\"animation\");\n        var position:PositionComponent = <PositionComponent>this.addComponent(\"position\");\n        position.applyOffsets = false;\n        animation.setSprite(\"woodpanelsunken\");\n    }\n    handleEvents(events: { [key: string]: GameEvent; }): void {\n    }\n    static create(){\n        let cf:ComponentFactory = createComponentFactory();\n        return new UIPanelEntity(cf);\n    }\n}", "import { PlayerEntity } from \"../entities/player-entity\";\nimport { VillagerEntity } from \"../entities/villager-entity\";\nimport { CropEntity } from \"../entities/crop-entity\";\nimport { FirstEntity } from \"../entities/first-entity\";\nimport { ProjectileEntity } from \"../entities/projectile-entity\";\nimport { Game } from \"../engine/game\";\nimport { InventoryItemEntity } from \"../entities/inventory-item-entity\";\nimport { ParticleEntity } from \"../entities/particles/particle-entity\";\nimport { ParticlesEntity } from \"../entities/particles/particles-entity\";\nimport { ClickableEntity } from \"../entities/clickable-entity\";\nimport { DeerEntity } from \"../entities/deer-entity\";\nimport { UIPanelEntity } from \"../entities/ui-panel-entity\";\n\n\nexport function buildEntities(game:Game):void{\n    game.registerEntity(\"player\", PlayerEntity);\n    game.registerEntity(\"villager\", VillagerEntity);\n    game.registerEntity(\"crop\", CropEntity);\n    game.registerEntity(\"first\", FirstEntity);\n    game.registerEntity(\"projectile\", ProjectileEntity);\n    game.registerEntity(\"inventoryItem\", InventoryItemEntity);\n    game.registerEntity(\"particle\", ParticleEntity);\n    game.registerEntity(\"particles\", ParticlesEntity);\n    game.registerEntity(\"click\", ClickableEntity);\n    game.registerEntity(\"deer\", DeerEntity);\n    game.registerEntity(\"uipanel\", UIPanelEntity);\n}", "import { EntitySystem } from \"../engine/system/system\";\nimport { Game } from \"../engine/game\";\nimport { Entity } from \"../engine/entity/entity\";\nimport { PlaceItemComponent } from \"../components/place-item/place-item-component\";\nimport { PlaceItemRequest } from \"../components/place-item/place-item-request\";\nimport { PositionComponent } from \"../components/position-component\";\nimport { SystemArgs } from \"../engine/system/system-args\";\n\nexport class PlaceItemSystem extends EntitySystem {\n    constructor(game:Game){\n        super(game);\n    }\n\n    apply(args:SystemArgs):void {\n        const entity = args.entity;\n        let placeItem:PlaceItemComponent = <PlaceItemComponent>entity.getComponent(\"placeItem\", true);\n        if (placeItem == null)return;\n        let requests:PlaceItemRequest[] = placeItem.placeItemRequests\n        for(let i:number=0;i<requests.length;i++){\n            let placeItemRequest:PlaceItemRequest = requests[i];\n            if (placeItemRequest.relative){\n                let position:PositionComponent;\n                try{\n                    position = <PositionComponent>entity.getComponent(\"position\");\n                    placeItemRequest.coordinates[0] += position.x;\n                    placeItemRequest.coordinates[1] += position.y;\n                } catch {}\n            }\n            this.placeItem(placeItemRequest);\n        }\n        placeItem.placeItemRequests = [];\n    }\n\n    applyEvents() {\n\n    }\n    private tileSize:number=50;\n    private realCoordinatesToTileCoordinates(coordinates:number[]):number[] {\n        let tileCoords:number[] = coordinates.map((coordinate) => {\n           return (Math.floor(coordinate / this.tileSize)) * this.tileSize;\n        });\n        return tileCoords;\n    }\n    private placeItem(placeItemRequest:PlaceItemRequest):Entity{\n        let realCoordinates = placeItemRequest.coordinates;\n        let tileCoordinates = this.realCoordinatesToTileCoordinates(realCoordinates);\n        let x:number = tileCoordinates[0];\n        let y:number = tileCoordinates[1];\n        let newEntity:Entity;\n        newEntity = this.game.addEntity(placeItemRequest.entityName);\n        let position:PositionComponent = <PositionComponent>newEntity.getComponent(\"position\", true);\n        if(position == null){\n            return;\n        }\n        position.x = x;\n        position.y = y;\n        placeItemRequest.successCallback(newEntity);\n        return newEntity;\n    }\n    static create(game:Game):PlaceItemSystem {\n        return new PlaceItemSystem(game);\n    }\n\n}", "import { EntitySystem } from \"../engine/system/system\";\nimport { Game } from \"../engine/game\";\nimport { Entity } from \"../engine/entity/entity\";\nimport { InventoryComponent } from \"../components/inventory-component/inventory-component\";\nimport { InventoryItemEntity } from \"../entities/inventory-item-entity\";\nimport { PositionComponent } from \"../components/position-component\";\nimport { TextComponent } from \"../components/text-component/text-component\";\nimport { InventoryItem } from \"../components/inventory-component/inventory-item\";\nimport { SystemArgs } from \"../engine/system/system-args\";\n\nexport class InventorySystem extends EntitySystem {\n    constructor(game:Game){\n        super(game);\n    }\n    static create(game:Game) {\n        return new InventorySystem(game);\n    }\n\n    apply(args:SystemArgs):void{\n        const entity = args.entity;\n        let inventory:InventoryComponent = <InventoryComponent>entity.getComponent(\"inventory\", true);\n        let entityPosition:PositionComponent = <PositionComponent>entity.getComponent(\"position\", true);\n        if(inventory == null)return;\n        if(entityPosition == null)return;\n        if(inventory.inventoryItemEntities.length == 0){\n            for(let i:number=0;i<10;i++){\n                inventory\n                .inventoryItemEntities\n                .push(this.game.addEntity(\"inventoryItem\"));\n            }\n        }\n        let itemSlots:InventoryItem[] = inventory.getItems();\n        for(let i:number=0;i<inventory.inventoryItemEntities.length;i++){\n            let inventoryItem:InventoryItemEntity;\n            let itemPosition:PositionComponent;\n            inventoryItem = inventory.inventoryItemEntities[i];\n            itemPosition = <PositionComponent>inventoryItem.getComponent(\"position\");\n            if(itemPosition == null){\n                console.log(\"Warning: inventory item lost position component\");\n                continue;\n            }\n            itemPosition.x = entityPosition.x - 4*100 - 50 + i * 100 + entityPosition.vx;\n            itemPosition.y = entityPosition.y + 350 + entityPosition.vy;\n            itemPosition.x -= entityPosition.vx;\n            itemPosition.y -= entityPosition.vy;\n            \n            let text:TextComponent = <TextComponent>inventoryItem.getComponent(\"text\");\n            if(itemSlots[i].itemQuantity != 0 ){\n                text.setText(itemSlots[i].itemQuantity.toString());\n            }\n        }\n    }\n\n    applyEvents(entity:Entity):void{\n\n    }\n}", "import { Entity } from \"../engine/entity/entity\";\nimport { EventManager } from \"../engine/events/event-manager\";\nimport { Game } from \"../engine/game\";\nimport { EntitySystem } from \"../engine/system/system\";\nimport {ParticleComponent} from \"../components/particle-componet\";\nimport { PositionComponent } from \"../components/position-component\";\nimport { SystemArgs } from \"../engine/system/system-args\";\n\nexport class ParticleSystem extends EntitySystem{\n    constructor(game:Game){\n        super(game);\n    }\n\n    static create(game:Game){\n        return new ParticleSystem(game);\n    }\n\n    addParticles(center: ParticleComponent, centerPosition: PositionComponent){\n        if (center.particles.length >= center.targetParticles)return;\n        while(center.particles.length < center.targetParticles){\n            center.particles.push(this.game.addEntity(\"particle\"));\n            let position = <PositionComponent>center.particles[center.particles.length-1].getComponent(\"position\");\n            position.x = centerPosition.x - Math.random()*30;\n            position.y = centerPosition.y - Math.random()*30;\n            // position.vx = Math.random()*.5;\n            // position.vy = Math.random()*.5;\n        }\n    }\n\n    updateParticles(entity: Entity){\n        let particles = <ParticleComponent> entity.getComponent(\"particles\", true);\n        let position = <PositionComponent> entity.getComponent(\"position\", true);\n        particles.time = (particles.time + 1) % 1000;\n        \n        for(let i:number = 0; i<particles.particles.length; i++){\n            let particle = particles.particles[i];\n            let method = particles.paths[i];\n            let particlePosition = <PositionComponent>particle.getComponent(\"primitive\");\n        }\n    }\n\n    apply(args:SystemArgs): void {\n        const entity = args.entity;\n        let particles = <ParticleComponent> entity.getComponent(\"particles\", true);\n        let position = <PositionComponent> entity.getComponent(\"position\", true);\n        if (position == null || particles == null) return;\n        this.addParticles(particles, position);\n        this.updateParticles(entity);\n    }\n\n    applyEvents(entity: Entity, eventManager: EventManager): void {\n        \n    }\n}", "import { AnimationComponent } from \"../components/animation-component\";\nimport { ClickableComponent } from \"../components/clickable-component\";\nimport { PositionComponent } from \"../components/position-component\";\nimport { SpriteId } from \"../components/tile-component/sprite-id\";\nimport { Tile } from \"../components/tile-component/tile\";\nimport { TileComponent } from \"../components/tile-component/tile-component\";\nimport { Entity } from \"../engine/entity/entity\";\nimport { EventManager } from \"../engine/events/event-manager\";\nimport { EventType } from \"../engine/events/EventType\";\nimport { GameEvent } from \"../engine/events/game-event\";\nimport { Game } from \"../engine/game\";\nimport { EntitySystem } from \"../engine/system/system\";\nimport { SystemArgs } from \"../engine/system/system-args\";\nimport { ClickableEntity } from \"../entities/clickable-entity\";\n\nexport class MapBuilderSystem extends EntitySystem{\n    private clicks:GameEvent[] = [];\n    private openBuilder:boolean = false;\n    private tilePallete:ClickableEntity[] = [];\n    private selectedSpriteId: SpriteId = SpriteId.create(\"soil\", 0);\n    constructor(game:Game){\n        super(game);\n        this.game.eventManager.addListener(EventType.mouseUp, (data)=>{\n            if(!this.openBuilder)return;\n            this.clicks.push(data);\n        });\n        this.game.eventManager.addListener(EventType.tildUp, (data)=>{\n            this.openBuilder = !this.openBuilder;\n            this.createPalleteEntities();\n        });\n    }\n    apply(args:SystemArgs): void {\n        const entity = args.entity;\n        let tileComponent = <TileComponent>entity.getComponent(\"tile\", true);\n        if (tileComponent == null) return;\n        if (!this.openBuilder)return;\n        if (this.clicks.length == 0)return;\n        let event = this.clicks.pop();\n        let x = event.eventData.x;\n        let y = event.eventData.y;\n        let tileToChange = this.mouseCoordToTile(x, y, tileComponent);\n        const tileCopy = JSON.parse(JSON.stringify(this.selectedSpriteId));\n        tileToChange.spriteIds.push(tileCopy);\n    }\n    createPalleteEntities(){\n        let entity = this.game.getById(0);\n        let tileComponent = <TileComponent>entity.getComponent(\"tile\", true);\n        let tileWidth = tileComponent.tileWidth/1.5;\n        const panel = this.game.addEntity('uipanel');\n        // const panel = this.game.addEntity(\"villager\");\n        const panelPosition = <PositionComponent>panel.getComponent(\"position\");\n        panelPosition.width = tileWidth*6;\n        panelPosition.height = tileWidth * 11;\n        panelPosition.x = panelPosition.width/2;\n        panelPosition.y = -panelPosition.height;\n        panelPosition.h = 2*panelPosition.height;\n\n\n        for(let i=0;i<tileComponent.tileSpriteNames.length-0;i++){\n            for(let i2=0;i2<25;i2++){\n                let spriteName = tileComponent.tileSpriteNames[i];\n                let tileButton = <ClickableEntity>this.game.addEntity(\"click\");\n                this.tilePallete.push(tileButton);\n                let animation = <AnimationComponent>tileButton.getComponent(\"animation\");\n                let position = <PositionComponent>tileButton.getComponent(\"position\");\n                let clickable = <ClickableComponent>tileButton.getComponent(\"click\");\n                animation.setSpriteNumber(spriteName, i2);\n                position.width = tileWidth;\n                position.height = tileWidth;\n                position.x = ((i2%5) * tileWidth) + tileWidth/2;\n                position.y = Math.floor(((i*24)+i2)/5) * tileWidth;\n                position.x+=panelPosition.width/2 - 5*tileWidth/2;\n                position.y+=panelPosition.height/2 - 5*tileWidth/2 - tileWidth;\n                position.applyOffsets = false;\n                clickable.addListener(()=>{\n                    console.log(\"clicking: \"+ spriteName + i2.toString());\n                    this.selectedSpriteId.spriteName = spriteName;\n                    this.selectedSpriteId.spriteNumber = i2;\n                });\n            }\n        }\n    }\n    mouseCoordToTile(x:number, y:number, tileComponent:TileComponent){\n        let xOffset = this.game.renderer.offset[0];\n        let yOffset = this.game.renderer.offset[1];\n        return tileComponent.coordToTile(x + xOffset, y + yOffset)[0];\n    }\n    applyEvents(entity: Entity, eventManager: EventManager): void {\n        \n    }\n    static create(game:Game):MapBuilderSystem{\n        return new MapBuilderSystem(game);\n    }\n}", "import { ClickableComponent } from \"../components/clickable-component\";\nimport { PositionComponent } from \"../components/position-component\";\nimport { Entity } from \"../engine/entity/entity\";\nimport { EventManager } from \"../engine/events/event-manager\";\nimport { EventType } from \"../engine/events/EventType\";\nimport { GameEvent } from \"../engine/events/game-event\";\nimport { Game } from \"../engine/game\";\nimport { HtmlRenderer } from \"../engine/renderers/implementations/html/html-renderer\";\nimport { EntitySystem } from \"../engine/system/system\";\nimport { ClickableEntity } from \"../entities/clickable-entity\";\nimport { Renderer } from '../engine/renderers/render';\nimport { FirstEntity } from \"../entities/first-entity\";\nimport { SystemArgs } from \"../engine/system/system-args\";\n\nexport class ClickSystem extends EntitySystem{\n    constructor(game:Game){\n        super(game);\n        this.game.eventManager.addListener(EventType.mouseUp, (data)=>{\n            this.clicks.push(data);\n        });\n        this.renderer = game.renderer;\n    }\n    clicks: GameEvent[] = [];\n    clicksToProcessThisLoop: GameEvent[] = [];\n    renderer: Renderer;\n    private clearClicksAndMoveClicksToProcess(){\n        for (let i=0;i<this.clicksToProcessThisLoop.length;i++){\n            this.clicksToProcessThisLoop.pop();\n        }\n        let numClicks = this.clicks.length;\n        for (let i=0;i<numClicks;i++){\n            this.clicksToProcessThisLoop.push(this.clicks.pop());\n        }\n    }\n\n    apply(args:SystemArgs): void {\n        const entity = args.entity;\n        if(entity instanceof FirstEntity)this.clearClicksAndMoveClicksToProcess();\n        let clickable = <ClickableComponent>entity.getComponent(\"click\", true);\n        let position = <PositionComponent>entity.getComponent(\"position\", true);\n        if (clickable == null)return;\n        if (position == null)return;\n        this.clicksToProcessThisLoop.forEach((event)=>{\n            let x = event?.eventData.x;\n            let y = event?.eventData.y;\n            if (x == null || y == null)return;\n            if (this.pointInPosition(x, y, position)){\n                clickable.click();\n            }\n        });\n    }\n\n    applyEvents(entity: Entity, eventManager: EventManager): void {\n        \n    }\n\n    pointInPosition(x:number, y:number, position:PositionComponent):boolean{\n        if (position.applyOffsets){\n            let offset = this.renderer.getOffset();\n            x += offset[0];\n            y += offset[1];\n        }\n        let leftx = position.x - position.width/2;\n        let rightx = position.x + position.width/2;\n        let topy = position.y - position.height;\n        let bottomy = position.y;\n        return x > leftx && x < rightx && y > topy && y < bottomy;\n    }\n\n    static create(game:Game):ClickSystem{\n        return new ClickSystem(game);\n    }\n}", "import { Game } from \"../../engine/game\";\nimport { AnimationComponent } from \"../../components/animation-component\";\nimport { PositionComponent } from \"../../components/position-component\";\nimport { PrimitiveComponent } from \"../../components/primitive-component\";\nimport { TextComponent } from \"../../components/text-component/text-component\";\nimport { TextPlacement } from \"../../components/text-component/text-placement\";\nimport { TileComponent } from \"../../components/tile-component/tile-component\";\nimport { Entity } from \"../../engine/entity/entity\";\nimport { Renderer } from \"../../engine/renderers/render\";\nimport { RenderOptions } from \"../../engine/renderers/render-options\";\nimport { EntitySystem } from \"../../engine/system/system\";\nimport { SystemArgs } from \"../../engine/system/system-args\";\nimport { FirstEntity } from \"../../entities/first-entity\";\nimport { PhaserPositionComponent } from \"../../components/phaser-components/phaser-position-component\";\nimport { PhaserAnimationComponent } from \"../../components/phaser-components/phaser-animation-component\";\n\nexport class PhaserRenderSystem extends EntitySystem{\n    /**\n     * used for drawing animation components\n     */\n    constructor(game:Game){\n        super(game);\n    }\n\n    static create(game:Game):PhaserRenderSystem{\n        return new PhaserRenderSystem(game);\n    }\n\n    apply(args:SystemArgs){\n        this.setPhaserAnimations(args.entity);\n    }\n    renderTileSet(entity: FirstEntity) {\n    }\n\n    private tileCoordToReal(tileWidth: number, coord: number): number{\n        return coord * tileWidth;\n    }\n\n    renderText(entity:Entity){\n    }\n\n    setPhaserAnimations(entity:Entity){\n        var a:PhaserAnimationComponent = <PhaserAnimationComponent>entity.getComponent(\"animation\", true);\n        var p:PhaserPositionComponent = <PhaserPositionComponent>entity.getComponent(\"position\", true);\n        if (a == null || p == null)return;\n        if (!a.animationNameUpdated)return;\n        a.animationNameUpdated = false;\n        let options:RenderOptions = new RenderOptions();//rotate flip apply offsets config.\n        if (p?.phaserObject == null) return;\n        // console.log(`changing animation to ${a.animationName}`);\n        p.phaserObject.anims.play(a.animationName);\n        p.phaserObject.displayWidth = p.width;\n        p.phaserObject.displayHeight = p.height;\n    }\n\n    renderPrimitive(entity:Entity){\n    }\n\n    centerCameraOn(entity:Entity){\n    }\n\n    applyEvents(){}\n}", "import { buildEntities } from \"./builders/entity-builder\";\nimport { buildSprites } from \"./builders/sprite-builder\";\nimport { PhaserGame } from \"./engine/phaser-integration/phaser-game\";\nimport { ClickSystem } from \"./systems/click-system\";\nimport { CollisionSystem } from \"./systems/collision-system\";\nimport { CropSystem } from \"./systems/crop-system\";\nimport { HealthSystem } from \"./systems/health-system\";\nimport { InventorySystem } from \"./systems/inventory-system\";\nimport { MapBuilderSystem } from \"./systems/map-builder-system\";\nimport { NeuralFightSystem } from \"./systems/neural-fight-system\";\nimport { ParticleSystem } from \"./systems/particle-system\";\nimport { PlaceItemSystem } from \"./systems/place-item-system\";\nimport { PositionSystem } from \"./systems/position-system\";\nimport { ProjectileSystem } from \"./systems/projectile-system\";\nimport { WasdSystem } from \"./systems/wasd-system\";\nimport { Game } from './engine/game';\nimport { AnimationComponent } from \"./components/animation-component\";\nimport { ClickableComponent } from \"./components/clickable-component\";\nimport { CropComponent } from \"./components/crop-component\";\nimport { FightComponent } from \"./components/fight-component\";\nimport { HealthComponent } from \"./components/health-component\";\nimport { InventoryComponent } from \"./components/inventory-component/inventory-component\";\nimport { NeuralFightComponent } from \"./components/neural-fight-component\";\nimport { ParticleComponent } from \"./components/particle-componet\";\nimport { PositionComponent } from \"./components/position-component\";\nimport { PrimitiveComponent } from \"./components/primitive-component\";\nimport { ProjectileComponent } from \"./components/projectile-component\";\nimport { TileComponent } from \"./components/tile-component/tile-component\";\nimport { TransitionComponent } from \"./components/transitions/transition-component\";\nimport { WasdComponent } from \"./components/wasd-component\";\nimport { PhaserPositionComponent } from \"./components/phaser-components/phaser-position-component\";\nimport { PhaserSpriteManager } from \"./engine/phaser-integration/phaser-sprite-manager\";\nimport { PhaserAnimationComponent } from \"./components/phaser-components/phaser-animation-component\";\nimport { PhaserRenderSystem } from \"./systems/phaser-systems/phaser-render-system\";\nfunction sharedComponents(game:Game){\n    game.registerComponent(WasdComponent);\n    game.registerComponent(CropComponent);\n    game.registerComponent(ProjectileComponent);\n    game.registerComponent(FightComponent);\n    game.registerComponent(HealthComponent);\n    game.registerComponent(NeuralFightComponent);\n    game.registerComponent(InventoryComponent);\n    game.registerComponent(ParticleComponent);\n    game.registerComponent(PrimitiveComponent);\n    game.registerComponent(TransitionComponent);\n    game.registerComponent(TileComponent);\n    game.registerComponent(ClickableComponent);\n\n}\nfunction buildComponents(game:Game){\n    console.log(\"building game components\");\n    game.registerComponent(AnimationComponent);\n    game.registerComponent(PositionComponent);\n    sharedComponents(game);\n}\n\nfunction buildPhaserComponents(game:Game){\n    console.log(\"building phaser game components\");\n    game.registerComponent(PhaserAnimationComponent);\n    game.registerComponent(PhaserPositionComponent);\n    sharedComponents(game);\n}\n\nexport function createPhaserGame():Game{\n    console.log(\"creating phaser game\");\n    const phaserSpriteManager = PhaserSpriteManager.singeltonCreate();\n    let game:Game = Game.createCustom(phaserSpriteManager);\n    game.addSystem(WasdSystem.create(game));\n    game.addSystem(CropSystem.create(game));\n    // game.addSystem(CollisionSystem.create(game));\n    game.addSystem(ProjectileSystem.create(game));\n    // game.addSystem(FightSystem.create(game));\n    game.addSystem(HealthSystem.create(game));\n    game.addSystem(PositionSystem.create(game));\n    game.addSystem(NeuralFightSystem.create(game));\n    game.addSystem(PlaceItemSystem.create(game));\n    game.addSystem(InventorySystem.create(game));\n    game.addSystem(ParticleSystem.create(game));\n    game.addSystem(PhaserRenderSystem.create(game));\n    game.addSystem(MapBuilderSystem.create(game));\n    game.addSystem(ClickSystem.create(game));\n\n    buildSprites(game);\n    buildEntities(game);\n    buildPhaserComponents(game);\n    const phaserGame = PhaserGame.createSingleton();\n    phaserGame.mainScene.addCreator((scene)=>{\n        phaserGame.setUpdater((delta)=>{\n            const frameStart = performance.now();\n            game.step(delta);\n            const stepTime = (performance.now() - frameStart)\n            if (stepTime > 2){\n                // console.log(`stepTime: ${stepTime}`);\n            }\n        });\n    })\n    return game;\n}", "import { PositionComponent } from './components/position-component';\nimport { AnimationComponent } from './components/animation-component';\nimport { CropEntity } from './entities/crop-entity';\nimport { CropComponent } from './components/crop-component';\nimport { RenderSystem } from './systems/render-system';\nimport { WasdSystem } from './systems/wasd-system';\nimport { CropSystem } from './systems/crop-system';\nimport { CollisionSystem } from './systems/collision-system';\nimport { ProjectileEntity } from './entities/projectile-entity';\nimport { ProjectileSystem } from './systems/projectile-system';\nimport { FightComponent } from './components/fight-component';\nimport { HealthSystem } from './systems/health-system';\nimport { PositionSystem } from './systems/position-system';\n\nimport { NeuralFightSystem } from './systems/neural-fight-system';\nimport { Game } from './engine/game';\nimport { buildSprites } from './builders/sprite-builder';\nimport { buildEntities } from './builders/entity-builder';\nimport { buildComponents } from './builders/build-components';\nimport { FightSystem } from './systems/fight-system';\nimport { PlaceItemSystem } from './systems/place-item-system';\nimport { InventorySystem } from './systems/inventory-system';\nimport { ParticleSystem } from './systems/particle-system';\nimport { ParticleEntity } from './entities/particles/particle-entity';\nimport { ParticleComponent } from './components/particle-componet';\nimport { MapBuilderSystem } from './systems/map-builder-system';\nimport { ClickSystem } from './systems/click-system';\nimport { PhaserGame } from './engine/phaser-integration/phaser-game';\nimport { createPhaserGame } from './game-builders';\nimport { PhaserPositionComponent } from './components/phaser-components/phaser-position-component';\n\ndeclare var synaptic:any;\nexport declare var g:Game;\n\nfunction createGame():Game{\n    let game:Game = Game.create()\n    game.addSystem(WasdSystem.create(game));\n    game.addSystem(CropSystem.create(game));\n    game.addSystem(CollisionSystem.create(game));\n    game.addSystem(ProjectileSystem.create(game));\n    // game.addSystem(FightSystem.create(game));\n    game.addSystem(HealthSystem.create(game));\n    game.addSystem(PositionSystem.create(game));\n    game.addSystem(NeuralFightSystem.create(game));\n    game.addSystem(PlaceItemSystem.create(game));\n    game.addSystem(InventorySystem.create(game));\n    game.addSystem(ParticleSystem.create(game));\n    game.addSystem(RenderSystem.create(game));\n    game.addSystem(MapBuilderSystem.create(game));\n    game.addSystem(ClickSystem.create(game));\n\n    buildSprites(game)\n    buildEntities(game);\n    buildComponents(game);\n    return game;\n}\n\nfunction startGame(){\n    // let game:Game = createGame();\n    let game:Game = createPhaserGame();\n    game.entityFactory.componentFactory.createComponent(\"animation\");\n    game.addEntity(\"first\");\n    const player = makePlayer();\n    const phaserGame = PhaserGame.createSingleton();\n    phaserGame.mainScene.addCreator(()=>{\n        const playerPosition = <PhaserPositionComponent>player.getComponent(\"position\");\n        const playerPhaserObj = playerPosition.phaserObject;\n        game.phaserGame = phaserGame;\n        game.phaserGame.mainScene.cameras.main.startFollow(playerPhaserObj);\n    })\n\n    var villager = game.addEntity(\"villager\");\n    var component = <PositionComponent>villager.getComponent(\"position\");\n    let ac = <AnimationComponent>villager.getComponent(\"animation\");\n    ac.setSprite(\"blond\");\n    component.x = 150;\n    component.y = 300;\n    component.vx = 0;\n    // component.height/=2\n    // component.width/=2\n    // ac.setSprite(\"grey\");\n    // component.height = 60\n    \n    var deer = game.addEntity(\"deer\");\n    let deerPos = <PositionComponent>deer.getComponent(\"position\");\n    let deerAC = <AnimationComponent>deer.getComponent(\"animation\");\n    deerPos.x = 500;\n    deerPos.y = 100;\n\n    let particle: ParticleEntity = <ParticleEntity> game.addEntity(\"particles\");\n    let particleC = <ParticleComponent>particle.getComponent(\"particles\");\n    particleC.targetParticles = 4;\n    let pPos = <PositionComponent>particle.getComponent(\"position\");\n    pPos.x = 150;\n    pPos.y = 400;\n    \n\n    placeField(350,300, \"wheat\", 50, 5)\n    placeField(650,300, \"corn\", 50)\n    placeField(350,600, \"turnip\", 50)\n    placeField(650,600, \"onion\", 50)\n    // setTimeout(makePlayer, 1000);\n    function placeField(x:number,y:number, cropName:string, d:number=50, width:number=5){\n        var crop:CropEntity;\n        var cc:CropComponent;\n\n        for(var i:number=0;i<width;i++){\n            for(var i2:number=0;i2<width;i2++){\n                crop = addCrop(x+i*d, y+i2*d);\n                cc = <CropComponent>crop.getComponent(\"crop\");\n                cc.setCrop(cropName);\n            }\n        }\n    }\n\n    function addCrop(x:number,y:number){\n        var crop = game.addEntity(\"crop\");\n        var component = <PositionComponent>crop.getComponent(\"position\");\n        component.x = x;\n        component.y = y;\n        return crop\n    }\n\n    function makePlayer(){\n        var player = game.addEntity(\"player\");\n        var pc= <PositionComponent>player.getComponent(\"position\");\n        var ac = <AnimationComponent>player.getComponent(\"animation\");\n        pc.x = 300;\n        pc.y = 380;\n        return player;\n    }\n    // let intervalId:number = game.start();\n    phaserGame.start();\n    return game;\n}\nif (typeof window !== 'undefined')\n{\n    //@ts-ignore\n    window.game = startGame();\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,aAAO,UAAU,OAAO;AAAA;AAAA;;;ACMjB,MAAM,eAAN,MAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMtB,YAAY,MAAU;AAClB,WAAK,OAAO;AAAA,IAChB;AAAA,IAIA,MAAM,MAAqB;AACvB,YAAM;AAAA,IACV;AAAA,IACA,YAAY,QAAe,cAA+B;AACtD,YAAM;AAAA,IACV;AAAA;AAAA;AAAA;AAAA,EAKJ;;;AC5BO,MAAM,gBAAN,MAAoB;AAAA,IAApB;AACH,kBAAa;AACb,oBAAc;AACd;AAAA,0BAAqB;AAAA;AAAA,EACzB;;;ACCO,MAAe,UAAf,MAAsB;AAAA,IACzB,YAAY,kBAAkC;AAM9C,gBAAU;AACV,wBAAyB,CAAC;AAC1B,sCAAoD,CAAC;AAErD,4BAA6B,CAAC;AAC9B,2BAA4B,CAAC;AAC7B,uBAAoB;AAXhB,WAAK,mBAAmB;AACxB,cAAO;AACP,WAAK,KAAK,QAAO;AAAA,IACrB;AAAA,IAUA,aAAa,eAA+B;AACxC,UAAI,YAAsB,KAAK,iBAAiB,gBAAgB,aAAa;AAC7E,WAAK,yBAAyB,UAAU,aAAa,IAAI;AACzD,WAAK,WAAW,KAAK,SAAS;AAC9B,aAAO;AAAA,IACX;AAAA,IAEA,aAAa,eAAsB,iBAAuB,OAAgB;AACtE,aAAO,KAAK,yBAAyB,aAAa;AAAA,IACtD;AAAA,IAEA,KAAK,OAAiB,UAAQ,OAAM;AAChC,UAAG,SAAQ;AACP,aAAK,cAAc,KAAK,KAAK;AAAA,MACjC,OAAO;AACH,aAAK,eAAe,KAAK,KAAK;AAAA,MAClC;AAAA,IACJ;AAAA,IAEA,OAAO,MAAsB;AACzB,eAAQ,IAAS,GAAE,IAAE,KAAK,WAAW,QAAO,KAAI;AAC5C,aAAK,WAAW,CAAC,EAAE,OAAO,MAAM,IAAI;AAAA,MACxC;AAAA,IACJ;AAAA,IAIA,OAAO,SAAe;AAIlB,aAAO;AAAA,IACX;AAAA,EACJ;AAhDO,MAAe,SAAf;AAMH,EANkB,OAMX,KAAU;;;ACPd,MAAe,YAAf,MAAyB;AAAA,IAC5B,YAAY,eAAqB;AAC7B,WAAK,gBAAgB;AAAA,IACzB;AAAA,IAGA,OAAO,SAAQ;AACX,YAAM;AAAA,IACV;AAAA,IACA,OAAO,eAAe,MAAU;AAAA,IAChC;AAAA,EACJ;;;ACfO,MAAM,kBAAN,MAAqB;AAAA,IACxB,YAAY,eAAsB,YAAmB,eAAwB,OAAa;AACtF,WAAK,gBAAgB;AACrB,WAAK,gBAAgB;AACrB,WAAK,aAAa;AAClB,WAAK,QAAQ;AAAA,IACjB;AAAA,IAMA,OAAO,OAAO,eAAsB,YAAmB,eAAwB,QAAa,GAAE;AAC1F,UAAI,KAAqB,IAAI;AAAA,QACzB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;;;ACrBO,MAAM,cAAN,MACP;AAAA,IACI,YAAY,QACZ;AACI,WAAK,SAAS;AACd,WAAK,MAAM,KAAK,OAAO,WAAW,IAAI;AAAA,IAC1C;AAAA,IAIA,OAAc,kBACd;AACI,UAAI,UAAU;AAAM,eAAO,YAAW;AACtC,UAAI,SAA8C,SAAS,eAAe,QAAQ;AAClF,UAAI,WAAW,MAAK;AAChB,iBAAS,SAAS,cAAc,QAAQ;AAAA,MAC5C;AACA,aAAO,QAAQ,OAAO;AACtB,aAAO,SAAS,OAAO;AACvB,aAAO,MAAM,SAAS;AACtB,aAAO,MAAM,UAAU;AACvB,aAAO,MAAM,WAAW;AACxB,aAAO,MAAM,WAAW;AACxB,aAAO,MAAM,MAAM;AACnB,aAAO,MAAM,OAAO;AACpB,kBAAW,SAAS,IAAI,YAAW,MAAM;AACzC,aAAO,YAAW;AAAA,IACtB;AAAA,EACJ;AA5BO,MAAM,aAAN;AASH,EATS,WASM,SAAqB;;;ACNjC,MAAM,kBAAN,MAAuC;AAAA,IAC1C,YAAY,WAA4B,WAAkB,YAAmB,UAAe,GAAG,UAAe,GAAG,aAAkB,GAAG,cAAmB,GAAE;AAsC3J,wBAAkB;AAClB,yBAAmB;AAGnB,oBAAkB;AAzCd,WAAK,SAAS;AACd,WAAK,YAAY;AACjB,WAAK,aAAa;AAClB,WAAK,UAAU;AACf,WAAK,UAAU;AACf,WAAK,aAAa;AAClB,WAAK,cAAc;AACnB,WAAK,SAAS,WAAW,gBAAgB;AACzC,WAAK,MAAM,WAAW,gBAAgB,EAAE;AAAA,IAC5C;AAAA,IACA,QAAQ,OAAc,QAAe,cAAgC;AACjE,UAAI,KAAK,KAAK,YAAY,YAAY;AACtC,UAAI,SAAS,SAAS,cAAc,QAAQ;AAC5C,UAAI,UAAU,OAAO,WAAW,IAAI;AACpC,UAAI,SAAS,QAAQ,UAAU,MAC/B;AACI,eAAO,QAAQ,KAAK;AACpB,eAAO,SAAS,KAAK;AAAA,MACzB,OAAO;AACH,eAAO,QAAQ;AACf,eAAO,SAAS;AAAA,MACpB;AACA,cAAQ,UAAU,GAAG,GAAG,OAAO,OAAO,OAAO,MAAM;AACnD,cAAQ;AAAA,QAAU,KAAK;AAAA,QAAQ,GAAG,CAAC;AAAA,QAAG,GAAG,CAAC;AAAA,QAAG,KAAK;AAAA,QAChC,KAAK;AAAA,QAAa;AAAA,QAAG;AAAA,QAAG,OAAO;AAAA,QAAO,OAAO;AAAA,MAAM;AACrE,UAAI,YAAY,QAAQ,aAAa,GAAG,GAAG,OAAO,OAAO,OAAO,MAAM;AACtE,aAAO;AAAA,IACX;AAAA,IACA,UAAU,cAAsB,GAAW,GAAW,OAAe,QAAsB;AACvF,UAAI,KAAK,KAAK,YAAY,YAAY;AACtC,WAAK,IAAI;AAAA,QAAU,KAAK;AAAA,QAAQ,GAAG,CAAC;AAAA,QAAG,GAAG,CAAC;AAAA,QAAG,KAAK;AAAA,QACjC,KAAK;AAAA,QAAa;AAAA,QAAG;AAAA,QAAG;AAAA,QAAO;AAAA,MAAM;AAAA,IAC3D;AAAA,IAaQ,mBAAmB,QAAsB;AAC7C,aAAO,WAAU;AACb,eAAO,aAAa,OAAO,OAAO,QAAM,OAAO;AAC/C,eAAO,cAAc,OAAO,OAAO,SAAO,OAAO;AACjD,eAAO,SAAS;AAAA,MACpB;AAAA,IACJ;AAAA,IAEO,YAAY,WAAiB;AAGhC,UAAI,aAAoB,KAAK;AAC7B,UAAI,cAAqB,KAAK;AAC9B,YAAM,YAAY,KAAK,MAAM,KAAK,OAAO,QAAM,UAAU;AACzD,UAAI,SAAgB,YAAU,YAAY;AAC1C,UAAI,SAAgB,KAAK,MAAM,YAAU,SAAS,IAAI;AACtD,gBAAU,KAAK;AACf,gBAAU,KAAK;AACf,aAAO,CAAC,QAAQ,MAAM;AAAA,IAC1B;AAAA,IAEA,OAAc,OAAO,UAAiB,WAAkB,YAAmB,UAAe,GAAG,UAAe,GAAE;AAC1G,UAAI,YAA6B,IAAI,MAAM;AAC3C,gBAAU,MAAM,KAAK,YAAY;AACjC,YAAM,YAAY,IAAI,gBAAe,WAAW,WAAW,YAAY,SAAS,OAAO;AACvF,gBAAU,SAAS,UAAU,mBAAmB,SAAS;AACzD,aAAO;AAAA,IACX;AAAA,IAEA,OAAc,qBAAqB,UAAiB,YAAmB,aAAoB,UAAe,GAAG,UAAe,GAAE;AAC1H,UAAI,YAA6B,IAAI,MAAM;AAC3C,gBAAU,MAAM,KAAK,YAAY;AACjC,YAAM,YAAY,IAAI,gBAAe,WAAW,GAAG,GAAG,SAAS,SAAS,YAAY,WAAW;AAC/F,aAAO;AAAA,IACX;AAAA,EACJ;AAlFO,MAAM,iBAAN;AAoCH,EApCS,eAoCF,YAAmB;;;ACrCvB,MAAM,aAAN,MAAmC;AAAA,IACtC,YAAY,UAAgB;AAW5B,uBAAmB;AAGnB,mCAAoC,CAAC;AAbjC,UAAI,YAA6B,IAAI,MAAM;AAC3C,gBAAU,MAAM,KAAK,YAAY;AACjC,WAAK,SAAS;AACd,gBAAU,SAAS,KAAK,mBAAmB,IAAI;AAC/C,WAAK,MAAM,WAAW,gBAAgB,EAAE;AAAA,IAC5C;AAAA,IAEA,QAAQ,cAAiC;AACrC,YAAM,IAAI,MAAM,yBAAyB;AAAA,IAC7C;AAAA,IAMA,UAAU,cAAsB,GAAW,GAAW,OAAe,QAAsB;AACvF,UAAI,KAAK,KAAK,YAAY,YAAY;AAAA,IAG1C;AAAA,IAEQ,mBAAmB,QAAkB;AACzC,aAAO,WAAU;AACb,YAAI,SAAS,SAAS,cAAc,QAAQ;AAC5C,YAAI,UAAU,OAAO,WAAW,IAAI;AACpC,eAAO,QAAQ,OAAO,OAAO;AAC7B,eAAO,SAAS,OAAO,OAAO;AAC9B,gBAAQ,UAAU,OAAO,QAAQ,GAAG,CAAE;AACtC,YAAI,YAAY,QAAQ,aAAa,GAAG,GAAG,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM;AACpF,YAAI,WAAW,CAAC;AAChB,iBAAQ,IAAE,GAAE,IAAE,UAAU,KAAK,QAAO,KAAG,GAAE;AACrC,cAAI,WAAW,UAAU,KAAK,CAAC,IAAI,UAAU,KAAK,IAAE,CAAC,IAAI,UAAU,KAAK,IAAE,CAAC,IAAI,UAAU,KAAK,IAAE,CAAC,KAAG;AACpG,mBAAS,KAAK,OAAO;AAAA,QACzB;AACA,YAAI,SAAS,OAAO,WAAW,UAAU,UAAU,OAAO,UAAU,MAAM;AAC1E,eAAO,QAAQ,OAAK;AAChB,YAAE,KAAK;AACP,cAAI,WAAW,KAAK,MAAM,EAAE,CAAC,IAAE,UAAU,KAAK;AAC9C,cAAI,UAAU,KAAK,MAAM,EAAE,EAAE,SAAO,CAAC,IAAE,UAAU,KAAK;AACtD,cAAI,SAAS,UAAU;AAAA,QAC3B,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,IAEA,WAAW,mBAA6B,OAAe,QAA0B;AAC7E,UAAI,QAAkB,CAAC;AACvB,UAAI,UAAU,oBAAI,IAAI;AACtB,UAAI,UAAsB,CAAC;AAC3B,eAAQ,IAAE,GAAE,IAAE,kBAAkB,QAAO,KACvC;AACI,YAAI,QAAQ,IAAI,CAAC;AAAG;AACpB,YAAI,UAAU,kBAAkB,CAAC;AACjC,YAAI,WAAW;AAAE;AACjB,cAAM,KAAK,CAAC;AACZ,YAAI,aAAsB,CAAC,CAAC;AAC5B,eAAO,MAAM,SAAS,GAAE;AACpB,cAAI,MAAM,SAAS;AAAO;AAC1B,cAAI,aAAa,MAAM,IAAI;AAC3B,cAAIA,WAAU,kBAAkB,UAAU;AAC1C,cAAI,cAAc,kBAAkB;AAAO;AAC3C,cAAI,aAAa;AAAE;AACnB,cAAIA,YAAW;AAAE;AACjB,cAAI,QAAQ,IAAI,UAAU;AAAG;AAC7B,kBAAQ,IAAI,UAAU;AACtB,qBAAW,KAAK,UAAU;AAC1B,gBAAM,KAAK,aAAa,CAAC;AACzB,gBAAM,KAAK,aAAa,CAAC;AACzB,gBAAM,KAAK,aAAa,KAAK;AAC7B,gBAAM,KAAK,aAAa,KAAK;AAAA,QACjC;AACA,gBAAQ,KAAK,UAAU;AAAA,MAC3B;AACA,aAAO;AAAA,IACX;AAAA,IAEO,YAAY,WAAiB;AAChC,aAAO,KAAK,sBAAsB,SAAS;AAAA,IAC/C;AAAA,IACA,OAAc,OAAO,UAAiB;AAClC,aAAO,IAAI,WAAW,QAAQ;AAAA,IAClC;AAAA,EACJ;;;AC/EO,MAAM,iBAAN,MAAoB;AAAA,IACvB,YAAY,YAAiB,eAAc;AAC3C,qBAAmC,CAAC;AACpC;AAAA,wBAA+C,CAAC;AAChD;AAAA,kBAAiC,CAAC;AAAA,IAHU;AAAA,IAK5C,aAAa,UAAiB,WAAkB,YAAmB,SAAgB,SAA8B;AAC7G,aAAO,eAAe,OAAO,UAAU,WAAW,YAAY,SAAS,OAAO;AAAA,IAClF;AAAA,IAEA,UAAU,YAAmB,QAAc;AACvC,WAAK,QAAQ,UAAU,IAAI;AAAA,IAC/B;AAAA,IACA,UAAU,YAAyB;AAC/B,UAAG,EAAG,cAAc,KAAK,UAAS;AAC9B,cAAM,YAAU,aAAW;AAAA,MAC/B;AACA,aAAO,KAAK,QAAQ,UAAU;AAAA,IAClC;AAAA,IAEA,WAAW,YAAmB,UAAiB,WAAkB,YAAmB,UAAe,GAAG,UAAe,GAAE;AACnH,UAAI,SAAS,KAAK,aAAa,UAAU,WAAW,YAAY,SAAS,OAAO;AAChF,WAAK,UAAU,YAAY,MAAM;AAAA,IACrC;AAAA,IAEA,yBAAyB,YAAmB,UAAiB,YAAmB,aAAoB,UAAe,GAAG,UAAe,GAAE;AACnI,YAAM,SAAS,eAAe,qBAAqB,UAAU,YAAY,aAAa,SAAS,OAAO;AACtG,WAAK,UAAU,YAAY,MAAM;AAAA,IACrC;AAAA,IAEA,sBAAsB,YAAmB,UAAgB;AACrD,UAAI,SAAS,WAAW,OAAO,QAAQ;AAAA,IAC3C;AAAA,IAEA,aAAa,YAAmB,eAAsB,eAA6B,QAAM,GAAE;AACvF,UAAI,KAAqB,gBAAgB,OAAO,eAAe,YAAY,eAAe,KAAK;AAC/F,UAAI,EAAE,cAAc,KAAK,UAAS;AAC9B,cAAM,4BACJ,gBACA,kBACA,aACA;AAAA,MACN;AACA,WAAK,WAAW,aAAa,IAAI;AAAA,IACrC;AAAA,IAEA,aAAa,eAAqC;AAC9C,UAAG,iBAAiB,KAAK,YAAW;AAChC,eAAO,KAAK,WAAW,aAAa;AAAA,MACxC,OAAO;AACH,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,IAEA,QAAQ,gBAAqB,MAAM,eAAsB,GAAG,QAAa,MAAM,SAAc,MAAe;AACxG,UAAI,MAAM,gBAAgB;AAC1B,UAAI,OAAO,KAAK;AAAM,eAAO,KAAK,KAAK,GAAG;AAC1C,UAAI,YAAY,KAAK,WAAW,aAAa;AAC7C,UAAI,OAAO,UAAU;AACrB,UAAI,SAAS,KAAK,QAAQ,IAAI;AAC9B,UAAI,CAAC,OAAO,QAAO;AACf,eAAO,OAAO,QAAQ,OAAO,QAAQ,YAAY;AAAA,MACrD;AACA,WAAK,KAAK,GAAG,IAAI,OAAO,QAAQ,OAAO,QAAQ,YAAY;AAC3D,aAAO,KAAK,KAAK,GAAG;AAAA,IACxB;AAAA,IAEA,OAAO,SAAsB;AACzB,aAAO,IAAI,eAAc;AAAA,IAC7B;AAAA,IAEA,OAAO,kBAA+B;AAClC,UAAI,eAAc,iBAAiB;AAAM,eAAO,eAAc;AAC9D,qBAAc,gBAAgB,IAAI,eAAc;AAChD,aAAO,eAAc;AAAA,IACzB;AAAA,EACJ;AA5EO,MAAM,gBAAN;AAsEH,EAtES,cAsEM,gBAA8B;;;AC1E1C,MAAM,gBAAN,cAA4B,UAAU;AAAA,IACzC,cAAa;AACT,YAAM,MAAM;AAEhB,mBAAa;AACb,uBAAoB;AACpB,yBAAsB;AACtB,4BAAyB;AACzB,qBAAmB;AACnB,uBAAoB;AACpB,wBAAqB;AACrB,wBAAqB;AACrB,8BAA2B;AAC3B,oBAAc;AACd,wBAAkB;AAAA,IAXlB;AAAA,IAYA,eAAc;AACV,WAAK,UAAU;AACf,WAAK,cAAc,KAAK;AAAA,IAC5B;AAAA,IACA,SAAQ;AAAA,IACR;AAAA,IACA,OAAO,SAAQ;AACX,aAAO,IAAI,cAAc;AAAA,IAC7B;AAAA,EACJ;;;ACzBO,MAAM,gBAAN,cAA4B,UAAU;AAAA,IACzC,cAAa;AACT,YAAM,MAAM;AAYhB,6BAAuB;AAXnB,WAAK,gBAAgB,CAAC,GAAE,GAAE,CAAC;AAC3B,WAAK,cAAc;AACnB,WAAK,WAAW;AAChB,WAAK,QAAQ,KAAK,QAAQ;AAAA,IAC9B;AAAA,IAUA,WAAW,SAAiB;AACxB,WAAK,gBAAgB;AACrB,WAAK,cAAc;AAAA,IACvB;AAAA,IAEA,UAAiB;AACb,aAAO,KAAK,eAAe,KAAK,cAAc,SAAO;AAAA,IACzD;AAAA,IAEA,QAAQ,UAAgB;AACpB,UAAI,aAAoB;AACxB,WAAK,gBAAgB,CAAC,YAAY,YAAY,UAAU;AACxD,cAAO,UAAS;AAAA,QACZ,KAAK;AACD,eAAK,gBAAgB,CAAC,WAAW,WAAW,SAAS;AACrD,eAAK,gBAAgB,CAAC,YAAY,YAAY,UAAU;AACxD;AAAA,QACJ,KAAK;AACD,eAAK,gBAAgB,CAAC,SAAS,SAAS,OAAO;AAC/C,eAAK,gBAAgB,CAAC,YAAY,YAAY,UAAU;AACxD;AAAA,QACJ,KAAK;AACD,eAAK,gBAAgB,CAAC,UAAU,UAAU,QAAQ;AAClD,eAAK,gBAAgB,CAAC,YAAY,YAAY,UAAU;AACxD;AAAA,QACJ,KAAK;AACD,eAAK,gBAAgB,CAAC,YAAY,YAAY,UAAU;AACxD,eAAK,gBAAgB,CAAC,YAAY,YAAY,UAAU;AACxD;AAAA,QACJ,KAAK;AACD,eAAK,gBAAgB,CAAC,UAAU,UAAU,UAAU,UAAU,UAAU,QAAQ;AAChF,eAAK,gBAAgB,CAAC,YAAY,YAAY,YAAY,YAAY,YAAY,UAAU;AAC5F;AAAA,QACJ,KAAK;AACD,eAAK,gBAAgB,CAAC,WAAW,WAAW,WAAW,SAAS;AAChE,eAAK,gBAAgB,CAAC,YAAY,YAAY,YAAY,UAAU;AACpE;AAAA,MACR;AACA,WAAK,cAAc;AACnB,WAAK,WAAW;AAAA,IACpB;AAAA,IAEA,SAAQ;AACJ,UAAG,KAAK,QAAQ,GAAE;AACd;AAAA,MACJ;AACA,WAAK;AACL,UAAI,KAAY,KAAK;AACrB,UAAI,KAAY,KAAK,cAAc,EAAE;AACrC,UAAI,KAAK,kBAAkB,IAAG;AAC1B,aAAK,eAAe,KAAK,cAAY,KAAG,KAAK,cAAc;AAC3D,aAAK,kBAAkB;AAAA,MAC3B;AAAA,IACJ;AAAA,IAEA,OAAO,SAAsB;AACzB,aAAO,IAAI,cAAc;AAAA,IAC7B;AAAA,EACJ;;;AC1EO,MAAM,sBAAN,cAAkC,UAAU;AAAA,IAC/C,cAAa;AACT,YAAM,YAAY;AAEtB,sBAAgB;AAAA,IADhB;AAAA,IAIA,SAAQ;AAAA,IACR;AAAA,IAEA,OAAO,SAA4B;AAC/B,aAAO,IAAI,oBAAoB;AAAA,IACnC;AAAA,EACJ;;;ACZO,MAAM,iBAAN,cAA6B,UAAS;AAAA,IACzC,cAAa;AACT,YAAM,OAAO;AAGjB,oBAAe;AACf,sBAAgB;AAChB,mBAAa;AACb,wBAAkB;AAClB,yBAAmB;AAAA,IANnB;AAAA,IAQA,eAAc;AAAA,IACd;AAAA,IAEA,UAAS;AACL,aAAO,KAAK,eAAe,KAAK;AAAA,IACpC;AAAA,IAEA,SAAQ;AACJ,UAAI,KAAK,eAAe,KAAK,YAAW;AACpC,aAAK;AAAA,MACT;AACA,UAAG,KAAK,eAAe,GAAE;AACrB,aAAK,cAAc,KAAK;AAAA,MAC5B;AAAA,IACJ;AAAA,IAEA,OAAO,SAAuB;AAC1B,aAAO,IAAI,eAAe;AAAA,IAC9B;AAAA,EACJ;;;AC9BO,MAAM,kBAAN,cAA8B,UAAU;AAAA,IAC3C,cAAa;AACT,YAAM,QAAQ;AAElB,oBAAc;AAAA,IADd;AAAA,IAGA,SAAQ;AAAA,IAAC;AAAA,IAET,OAAO,SAAwB;AAC3B,aAAO,IAAI,gBAAgB;AAAA,IAC/B;AAAA,EACJ;;;ACZO,MAAM,uBAAN,cAAmC,UAAU;AAAA,IAChD,cAAa;AACT,YAAM,QAAQ;AAAA,IAClB;AAAA,IAEA,SAAQ;AAAA,IAAC;AAAA,IAET,OAAO,SAAQ;AACX,aAAO,IAAI,qBAAqB;AAAA,IACpC;AAAA,EACJ;;;ACVO,MAAM,gBAAN,MAAoB;AAAA,IACvB,cAAa;AACb,0BAAsB;AACtB,sBAAkB;AAClB,6BAAyB;AACzB,sBAAkB;AAAA,IAJJ;AAAA,IAMd,OAAO,OAAO,UAAyC;AACnD,UAAI,OAAO,IAAI,cAAc;AAC7B,WAAK,WAAW,SAAS;AACzB,WAAK,kBAAkB,SAAS;AAChC,aAAO;AAAA,IACX;AAAA,EACJ;;;ACfO,MAAM,qBAAN,MAAwB;AAAA,IAC3B,YAAY,UAAiB,iBAAwB,gBAAsB;AAQ3E,oBAAgB;AAChB,sBAAkB;AAClB,6BAAyB;AATrB,yBAAkB,iBAAiB;AACnC,WAAK,SAAS,mBAAkB;AAChC,WAAK,WAAW;AAChB,WAAK,kBAAkB;AACvB,WAAK,iBAAiB;AAAA,IAC1B;AAAA,IAOA,OAAO,OAAO,UAAiB,gBAAuB,iBACpC;AACd,UAAI;AACJ,oBAAc,IAAI,mBAAkB,UAAU,iBAAiB,cAAc;AAC7E,aAAO;AAAA,IACX;AAAA,EACJ;AApBO,MAAM,oBAAN;AAQH,EARS,kBAQF,gBAAuB;;;ACL3B,MAAM,wBAAN,MAA4B;AAAA,IAC/B,cAAa;AACb,uBAA2C,CAAC;AAAA,IAD9B;AAAA,IAEd,iBAAiB,UAAiB,gBAAuB,aAAmB;AACxE,UAAI;AACJ,oBAAc,IAAI,kBAAkB,UAAU,aAAa,cAAc;AACzE,UAAI,YAAY,KAAK,WAAU;AAC3B,cAAM,uBAAuB,WAAU;AAAA,MAC3C;AACA,WAAK,UAAU,QAAQ,IAAI;AAAA,IAC/B;AAAA,IAIA,OAAO,kBAAuC;AAC1C,UAAG,KAAK;AAAkB,eAAO,KAAK;AACtC,UAAI,eAAqC,IAAI,sBAAsB;AACnE,WAAK,oBAAoB;AACzB,WAAK,kBAAkB,cAAc;AACrC,aAAO,KAAK;AAAA,IAChB;AAAA,IAEQ,gBAAoB;AACxB,WAAK,iBAAiB,SAAS,UAAU,aAAa;AACtD,WAAK,iBAAiB,SAAS,UAAU,cAAc;AACvD,WAAK,iBAAiB,QAAQ,SAAS,UAAU;AACjD,WAAK,iBAAiB,WAAW,YAAY,eAAe;AAC5D,WAAK,iBAAiB,UAAU,WAAW,cAAc;AACzD,WAAK,iBAAiB,WAAW,WAAW,SAAS;AAAA,IACzD;AAAA,EACJ;;;ACrBO,MAAM,qBAAN,cAAiC,UAAU;AAAA,IAC9C,YAAY,cAAmC;AAC3C,YAAM,WAAW;AASrB,WAAQ,YAAyC,CAAC;AAClD,WAAQ,YAA4B,CAAC;AACrC,WAAQ,mBAAwB;AAEhC,mCAA8C,CAAC;AAZ3C,WAAK,eAAe;AACpB,WAAK,YAAY,IAAI,MAAqB,EAAE;AAC5C,eAAQ,IAAS,GAAE,IAAE,KAAK,UAAU,QAAO,KAAI;AAC3C,YAAI,WAA6B,KAAK,aAAa,UAAU,SAAS;AACtE,aAAK,UAAU,CAAC,IAAI,cAAc,OAAO,QAAQ;AAAA,MACrD;AAAA,IAEJ;AAAA;AAAA,IAOA,wBAA4B;AACxB,UAAI,kBAAyB;AAC7B,eAAQ,IAAS,GAAE,IAAE,KAAK,UAAU,QAAO,KAAI;AAC3C,YAAI;AACJ,eAAO,KAAK,UAAU,CAAC;AACvB,2BAAmB;AAAA,EAAK,KAAK,aAAa,KAAK;AAAA,MACnD;AACA,yBAAmB;AACnB,cAAQ,IAAI,eAAe;AAAA,IAC/B;AAAA,IAEA,oBAAwB;AACpB,UAAI,kBAAyB;AAC7B,eAAQ,IAAS,GAAE,IAAE,KAAK,UAAU,QAAO,KAAI;AAC3C,YAAI;AACJ,eAAO,KAAK,UAAU,CAAC;AACvB,2BAAmB;AAAA,EAAK,KAAK,aAAa,KAAK;AAAA,MAEnD;AACA,yBAAmB;AACnB,cAAQ,IAAI,eAAe;AAAA,IAC/B;AAAA,IAEA,eAAe,gBAAuB;AAClC,WAAK,mBAAmB,iBAAiB,KAAK,UAAU;AAAA,IAC5D;AAAA,IAEA,kBAA+B;AAC3B,aAAO,KAAK,UAAU,KAAK,gBAAgB;AAAA,IAC/C;AAAA,IAEA,mBAAmB,UAAiB,WAAgB,GAAU;AAC1D,UAAG,EAAG,YAAY,KAAK,aAAa,YAAW;AAC3C,gBAAQ,IAAI,qBAAqB,qCAAqC;AACtE,eAAO;AAAA,MACX;AACA,UAAI,WAA6B,KAAK,aAAa,UAAU,QAAQ;AACrE,UAAG,EAAE,YAAY,KAAK,YAAW;AAC7B,aAAK,UAAU,QAAQ,IAAI,cAAc,OAAO,QAAQ;AAAA,MAC5D;AACA,WAAK,UAAU,QAAQ,EAAE,gBAAgB;AACzC,aAAO;AAAA,IACX;AAAA,IAEA,WAA0B;AACtB,aAAO,KAAK;AAAA,IAChB;AAAA,IAEA,QAAQ,UAAiB,WAAgB,GAAW;AAChD,UAAG,EAAG,YAAY,KAAK,aAAa,YAAW;AAC3C,gBAAQ,IAAI,qBAAqB,qCAAqC;AACtE,eAAO;AAAA,MACX;AACA,eAAQ,IAAS,GAAE,IAAE,KAAK,UAAU,QAAO,KAAK;AAC5C,YAAI,WAAyB,KAAK,UAAU,CAAC;AAC7C,YAAI,SAAS,YAAY,UAAU;AAC/B,mBAAS,gBAAgB;AACzB,iBAAO;AAAA,QACX;AAAA,MACJ;AACA,eAAQ,IAAS,GAAE,IAAE,KAAK,UAAU,QAAO,KAAK;AAC5C,YAAI,WAAyB,KAAK,UAAU,CAAC;AAC7C,YAAI,SAAS,YAAY,WAAW;AAChC,cAAI,WAA6B,KAAK,aAAa,UAAU,QAAQ;AACrE,eAAK,UAAU,CAAC,IAAI,cAAc,OAAO,QAAQ;AACjD,eAAK,UAAU,CAAC,EAAE,eAAe;AACjC;AAAA,QACJ;AAAA,MACJ;AAEA,aAAO;AAAA,IACX;AAAA,IACA,OAAO,QAAmB;AACtB,eAAQ,IAAS,GAAE,IAAE,KAAK,sBAAsB,QAAO,KAAI;AACvD,YAAI,sBAA0C,KAAK,sBAAsB,CAAC;AAC1E,YAAI;AACJ,0BAAsC,oBAAoB,aAAa,WAAW;AAClF,YAAI,OAAqB,KAAK,UAAU,CAAC;AACzC,YAAI,WAA6B,KAAK,aAAa,UAAU,KAAK,QAAQ;AAC1E,wBAAgB,UAAU,SAAS,cAAc;AAAA,MACrD;AAAA,IACJ;AAAA,IAEQ,aAAa,OAAqB;AAAA,IAC1C;AAAA,IAEA,OAAO,SAA2B;AAC9B,UAAI;AACJ,kBAAY,IAAI,mBAAmB,sBAAsB,gBAAgB,CAAC;AAC1E,aAAO;AAAA,IACX;AAAA,EACJ;;;ACtHO,MAAM,mBAAN,MAAuB;AAAA,IAC1B,cAAa;AAEb,4BAAkC,CAAC;AAAA,IADnC;AAAA,IAEA,kBAAkB,gBAAmB;AACjC,UAAI,MAAM,eAAe,OAAO;AAChC,UAAI,eAAe,qBAAqB,WAAU;AAC9C,aAAK,eAAe,IAAI,aAAa,IAAI;AAAA,MAC7C,OAAO;AACH,gBAAQ,IAAI,eAAe,IAAI,gBAAgB,+CAA+C;AAAA,MAClG;AAAA,IACJ;AAAA,IAEA,gBAAgB,eAAqB;AACjC,UAAI,EAAE,iBAAiB,KAAK,iBAAgB;AACxC,cAAM,eAAa,gBAAc;AAAA,MACrC;AACA,aAAO,KAAK,eAAe,aAAa,EAAE,OAAO;AAAA,IACrD;AAAA,IAEA,OAAO,SAAyB;AAC5B,UAAI,KAAsB,IAAI,iBAAiB;AAS/C,aAAO;AAAA,IACX;AAAA,EACJ;;;AChCO,MAAM,mBAAN,MAAuB;AAAA,IAC1B,YAAY,YAAmB,aAAsB,WAAgB,GACzD,iBAAuC,WAAiB,MAAK;AACrE,WAAK,aAAa;AAClB,WAAK,cAAc;AACnB,WAAK,WAAW;AAChB,WAAK,kBAAkB;AACvB,WAAK,WAAW;AAAA,IACpB;AAAA,EAMJ;;;ACNO,MAAM,qBAAN,cAAiC,UAAU;AAAA,IAC9C,cAAa;AACT,YAAM,WAAW;AAErB,WAAO,oBAAqC,CAAC;AAAA,IAD7C;AAAA,IAEA,UAAY,YAAmB,cAAqB,CAAC,GAAG,CAAC,GAC7C,iBAAuC,WAAiB,MAAW;AAC3E,UAAI;AACJ,yBAAmB,IAAI,iBAAiB,YAAY,aAAa,GAAG,iBAAiB,WAAS,IAAI;AAClG,WAAK,kBAAkB,KAAK,gBAAgB;AAAA,IAChD;AAAA,IAEA,OAAO,QAAsB;AAAA,IAE7B;AAAA,IAEA,OAAO,SAA4B;AAC/B,aAAO,IAAI,mBAAmB;AAAA,IAClC;AAAA,EAEJ;;;AC3BO,MAAM,yBAAN,cAAqC,UAAS;AAAA,IAA9C;AAAA;AACH,wBAAqB;AACrB,WAAQ,cAAqB;AAC7B,WAAQ,uBAA8B;AAAA;AAAA,IAE/B,eAAoB;AACvB,WAAK,aAAa;AAClB,WAAK,cAAc,KAAK;AAAA,IAC5B;AAAA,IAEA,OAAO,QAAsB;AACzB,UAAI,KAAK,cAAc,GAAE;AACrB,aAAK,eAAe;AAAA,MACxB,OAAO;AACH,aAAK,aAAa;AAAA,MACtB;AAAA,IACJ;AAAA,IAEA,OAAO,SAA+B;AAClC,aAAO,IAAI,uBAAuB,eAAe;AAAA,IACrD;AAAA,EACJ;;;ACxBO,MAAM,gBAAN,MAAmB;AAAA,IACtB,YAAY,WAAkB,SAAgB,SAAe;AACzD,WAAK,YAAY;AACjB,WAAK,UAAU;AACf,WAAK,UAAU;AAAA,IACnB;AAAA,EAIJ;;;ACNO,MAAM,gBAAN,cAA4B,UAAU;AAAA,IACzC,cAAa;AACT,YAAM,MAAM;AAEhB,4BAA+B,CAAC;AAAA,IADhC;AAAA,IAEA,iBAAiB,MAAa,UAAe,GAAG,UAAe,GAAE;AAC7D,WAAK,eAAe,KAAK,IAAI,cAAc,MAAM,SAAS,OAAO,CAAC;AAAA,IACtE;AAAA,IAEA,QAAQ,OAAc,QAAa,GAAE;AACjC,UAAG,SAAS,KAAK,QAAQ,KAAK,eAAe,QAAO;AAChD,aAAK,eAAe,KAAK,EAAE,YAAY;AAAA,MAC3C;AAAA,IACJ;AAAA,IAEA,SAAQ;AAAA,IAAC;AAAA,IACT,OAAO,SAAQ;AACX,aAAO,IAAI,cAAc;AAAA,IAC7B;AAAA,EACJ;;;ACjBO,MAAM,oBAAN,cAAgC,UAAS;AAAA,IAC5C,cAAa;AACT,YAAM,WAAW;AAErB,uBAAsB,CAAC;AACvB,6BAA0B;AAC1B,kBAAe;AACf,sBAAmB;AACnB,mBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA0CJ,CAAC,QAA0B,UAA6B,SAAiB;AACrE,cAAI,IAAI,MAAI,KAAK,KAAK,IAAI,MAAK,OAAK,CAAC;AACrC,cAAI,KAAK,MAAI,KAAK,KAAK,IAAI,MAAK,OAAK,CAAC;AACtC,mBAAS,IAAI,KAAK,OAAO,IAAI,IAAE,OAAO,QAAM,IAAK,EAAE;AACnD,mBAAS,IAAI,OAAO,IAAI,GAAG;AAC3B,mBAAS,IAAI,OAAO,IAAI;AAAA,QAC5B;AAAA,MACJ;AAAA,IAtDA;AAAA,IAuDA,YAAY,UAAiB;AACzB,WAAK,UAAU,KAAK,QAAQ;AAAA,IAChC;AAAA,IACA,OAAO,QAAsB;AACzB,eAAQ,IAAS,GAAE,IAAE,KAAK,UAAU,QAAO,KAAI;AAC3C,YAAI,WAAW,KAAK,UAAU,CAAC;AAC/B,YAAI,OAAO,KAAK,MAAM,IAAE,KAAK,MAAM,MAAM;AACzC,YAAI,SAA4B,OAAO,aAAa,UAAU;AAC9D,YAAI,mBAAsC,SAAS,aAAa,UAAU;AAC1E,aAAK,QAAQ,kBAAkB,EAAE,KAAK,OAAO,IAAI,GAAG;AAAA,MACxD;AAAA,IACJ;AAAA,IACA,OAAc,SAA4B;AACtC,aAAO,IAAI,kBAAkB;AAAA,IACjC;AAAA,EACJ;;;AC3EO,MAAM,qBAAN,cAAiC,UAAU;AAAA,IAC9C,OAAO,QAAsB;AAAA,IAC7B;AAAA,IACA,OAAc,SAA6B;AACvC,aAAO,IAAI,mBAAmB,WAAW;AAAA,IAC7C;AAAA,EACJ;;;ACNO,MAAM,sBAAN,cAAkC,UAAS;AAAA,IAC9C,cAAa;AACT,YAAM,YAAY;AAEtB,kBAAa;AACb,uBAAuB;AACvB,qBAAqB;AACrB,iCAA8B;AAC9B,gCAA6B;AAE7B,qBAAmB;AACnB,mBAAgB;AAAA,IARhB;AAAA,IASA,OAAO,QAAsB;AACzB,UAAI,CAAC,KAAK;AAAS;AACnB,UAAI,YAAgC,OAAO,aAAa,aAAa,IAAI;AACzE,UAAI,aAAa;AAAM;AACvB,WAAK,YAAY,UAAU,QAAQ;AACnC,WAAK,SAAS,UAAU,QAAQ,KAAK,qBAAqB,KAAK,oBAAoB,KAAK,UAAU,OAAO,KAAK,UAAU,MAAM;AAC9H,UAAI,KAAK,uBAAuB,MAAK;AACjC,YAAI,YAAY,IAAI,UAAU,KAAK,UAAU,OAAO,KAAK,UAAU,MAAM;AACzE,iBAAS,IAAE,GAAE,IAAE,KAAK,OAAO,KAAK,QAAO,KAAI;AACvC,oBAAU,KAAK,CAAC,IAAI;AAAA,QACxB;AACA,aAAK,SAAS;AAAA,MAClB;AACA,UAAI,KAAK,WAAW,MAAK;AAErB,YAAI,KAAK,UAAU,KAAK,UAAU,KAAK,KAAK,OAAO,KAAK,UAAU;AAAG;AACrE,aAAK,UAAU,IAAI,UAAU,KAAK,UAAU,OAAO,KAAK,UAAU,MAAM;AACxE,iBAAQ,IAAE,GAAE,IAAE,KAAK,UAAU,KAAK,QAAO,KAAI;AACzC,eAAK,QAAQ,KAAK,CAAC,IAAI,KAAK,UAAU,KAAK,CAAC;AAAA,QAChD;AAAA,MACJ;AACA,UAAI,YAAY;AAChB,eAAQ,IAAE,GAAE,IAAE,KAAK,UAAU,KAAK,QAAO,KAAI;AACzC,YAAI,SAAS,KAAK,OAAO,KAAK,CAAC;AAC/B,YAAI,KAAK,QAAQ,KAAK,CAAC,IAAI,QAAO;AAC9B,eAAK,QAAQ,KAAK,CAAC,KAAK,KAAK;AAAA,QACjC,WAAW,KAAK,QAAQ,KAAK,CAAC,IAAI,QAAO;AACrC,eAAK,QAAQ,KAAK,CAAC,KAAK,KAAK;AAAA,QACjC;AACA,YAAI,WAAW,KAAK,IAAI,KAAK,QAAQ,KAAK,CAAC,IAAI,MAAM;AACrD,YAAI,WAAW,KAAK,OAAM;AACtB,eAAK,QAAQ,KAAK,CAAC,IAAI;AAAA,QAC3B,OAAO;AACH,sBAAY;AAAA,QAChB;AAAA,MACJ;AACA,gBAAU,UAAU,KAAK,OAAO;AAChC,UAAI,WAAU;AACV,kBAAU,aAAa;AACvB,aAAK,UAAU;AAAA,MACnB;AAAA,IACJ;AAAA,IACO,MAAM,sBAA6B,YAAY,oBAA2B,eAAqB,MAAU;AAC5G,WAAK,UAAU;AACf,WAAK,OAAO;AACZ,WAAK,sBAAsB;AAC3B,UAAI;AAAc,aAAK,UAAU;AACjC,WAAK,qBAAqB;AAAA,IAC9B;AAAA,IACA,OAAc,SAA6B;AACvC,aAAO,IAAI,oBAAoB;AAAA,IACnC;AAAA,EACJ;;;ACnEO,MAAM,WAAN,MAAc;AAAA,IAGjB,OAAO,OAAO,YAAmB,cAAoB;AACjD,YAAM,WAAW,IAAI,SAAS;AAC9B,eAAS,aAAa;AACtB,eAAS,eAAe;AACxB,aAAO;AAAA,IACX;AAAA,EACJ;;;ACPO,MAAM,OAAN,MAAU;AAAA,IAAV;AACH,uBAAqB,CAAC;AAAA;AAAA,IAGtB,OAAc,OAAO,YAAoB,cAAsB,OAAc,OAAmB;AAC5F,UAAI,OAAO,IAAI,KAAK;AACpB,WAAK,UAAU,KAAK,SAAS;AAAA,QACzB;AAAA,QACA;AAAA,MACJ,CAAC;AACD,WAAK,QAAQ;AACb,WAAK,QAAQ;AACb,aAAO;AAAA,IACX;AAAA,EACJ;;;ACXO,MAAM,gBAAN,cAA4B,UAAS;AAAA,IACxC,cAAa;AACT,YAAM,MAAM;AAKhB,uBAAoB;AACpB,mBAAgB,CAAC;AACjB,6BAA4B,CAAC,SAAS,MAAM;AAAA,IAN5C;AAAA,IACA,OAAO,QAAsB;AAAA,IAC7B;AAAA,IAKA,OAAc,SAAuB;AACjC,UAAI,KAAK,IAAI,cAAc;AAC3B,UAAI,aAAa;AAEjB,UAAI,WAAW;AACf,UAAI,eAAe,WAAS,IAAE;AAC9B,UAAI,OAAO;AACX,UAAI,QAAQ,OAAO;AACnB,UAAI,OAAO;AACX,UAAI,QAAQ,OAAO;AAEnB,eAAQ,IAAE,GAAE,IAAE,WAAS,UAAS,KAAI;AAChC,YAAI,IAAI,IAAE,WAAS;AACnB,YAAI,IAAI,KAAK,MAAM,IAAE,QAAQ,IAAE;AAC/B,YAAI,KAAK,QAAQ,KAAK,SAAS,KAAK,QAAQ,KAAK,OAAO;AACpD,cAAI,KAAG,QAAQ,KAAK;AAAM,eAAG,MAAM,KAAK,KAAK,OAAO,QAAQ,GAAG,GAAG,CAAC,CAAC;AAAA,mBAC3D,KAAG,SAAS,KAAK;AAAM,eAAG,MAAM,KAAK,KAAK,OAAO,QAAQ,GAAG,GAAG,CAAC,CAAC;AAAA,mBACjE,KAAG,QAAQ,KAAK;AAAO,eAAG,MAAM,KAAK,KAAK,OAAO,QAAQ,IAAI,GAAG,CAAC,CAAC;AAAA,mBAClE,KAAG,SAAS,KAAK;AAAO,eAAG,MAAM,KAAK,KAAK,OAAO,QAAQ,IAAI,GAAG,CAAC,CAAC;AAAA,mBACnE,KAAG;AAAM,eAAG,MAAM,KAAK,KAAK,OAAO,QAAQ,GAAG,GAAG,CAAC,CAAC;AAAA,mBACnD,KAAG;AAAO,eAAG,MAAM,KAAK,KAAK,OAAO,QAAQ,IAAI,GAAG,CAAC,CAAC;AAAA,mBACrD,KAAG;AAAM,eAAG,MAAM,KAAK,KAAK,OAAO,QAAQ,GAAG,GAAG,CAAC,CAAC;AAAA,mBACnD,KAAG;AAAO,eAAG,MAAM,KAAK,KAAK,OAAO,QAAQ,IAAI,GAAG,CAAC,CAAC;AAAA;AAE9D,eAAG,MAAM,KAAK,KAAK,OAAO,QAAQ,IAAI,GAAG,CAAC,CAAC;AAC3C;AAAA,QACJ;AACA,WAAG,MAAM,KAAK,KAAK,OAAO,YAAY,KAAG,KAAK,KAAK,KAAK,OAAO,IAAE,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA,MAC9E;AACA,aAAO;AAAA,IACX;AAAA,IACA,gBAAoB;AAChB,UAAI,qBAAqB,CAAC,SAAS,MAAM;AAAA,IAC7C;AAAA,IAEA,YAAY,GAAU,GAAgB;AAClC,UAAI,QAAQ,KAAK,OAAO,IAAE,MAAG,KAAK,aAAW,KAAK,SAAS;AAC3D,UAAI,QAAQ,KAAK,KAAK,IAAE,KAAK,SAAS;AACtC,aAAO,KAAK,MAAM,OAAO,CAAC,SAAO,KAAK,SAAS,SAAS,KAAK,SAAS,KAAK;AAAA,IAC/E;AAAA,IACQ,gBAAgB,WAAmB,OAAsB;AAC7D,aAAO,QAAQ;AAAA,IACnB;AAAA,EACJ;;;ACvDO,MAAM,qBAAN,cAAiC,UAAS;AAAA,IAC7C,cAAa;AACT,YAAM,OAAO;AAGjB,WAAQ,WAAwB,CAAC;AAAA,IAFjC;AAAA,IACA,OAAO,QAAsB;AAAA,IAAC;AAAA,IAE9B,YAAY,UAAmB;AAC3B,WAAK,SAAS,KAAK,QAAQ;AAAA,IAC/B;AAAA,IACA,QAAO;AACH,WAAK,SAAS,QAAQ,CAAC,aAAW;AAC9B,iBAAS;AAAA,MACb,CAAC;AAAA,IACL;AAAA,IAEA,OAAO,SAA2B;AAC9B,aAAO,IAAI,mBAAmB;AAAA,IAClC;AAAA,EACJ;;;ACrBA,eAAwB;;;ACAxB,sBAAsB;AACf,MAAM,YAAN,cAAwB,oBAAM;AAAA,IACjC,cAAa;AACT,YAAM,EAAC,KAAI,OAAM,CAAC;AAEtB,WAAQ,UAAgC,MAAI;AAAA,MAAC;AAC7C,WAAQ,WAAoC,CAAC;AAC7C,WAAQ,UAAmC,CAAC;AAAA,IAH5C;AAAA,IAIA,WAAW,gBAAoC;AAC3C,WAAK,UAAU;AAAA,IACnB;AAAA,IACA,WAAW,SAAmC;AAC1C,WAAK,SAAS,KAAK,OAAO;AAAA,IAC9B;AAAA,IACA,aAAa,QAAkC;AAC3C,WAAK,QAAQ,KAAK,MAAM;AAAA,IAC5B;AAAA,IACA,UAAS;AACL,cAAQ,IAAI,aAAa,KAAK,QAAQ,MAAM;AAC5C,WAAK,QAAQ;AAAA,QAAQ,CAAC,WAAS;AAC3B,iBAAO,IAAI;AAAA,QAAC;AAAA,MAChB;AAAA,IACJ;AAAA,IACA,SAAQ;AACJ,cAAQ,IAAI,4BAA4B,KAAK,SAAS,iBAAiB;AACvE,WAAK,SAAS,QAAQ,CAAC,YAAU;AAAC,gBAAQ,IAAI;AAAA,MAAC,CAAC;AAAA,IACpD;AAAA,IACA,OAAO,MAAc,OAAqB;AACtC,WAAK,QAAQ,KAAK;AAAA,IACtB;AAAA,EACJ;;;AD1BO,MAAM,cAAN,MAAiB;AAAA,IACpB,cAAa;AA0Bb,uBAAuB,IAAI,UAAU;AAzBjC,WAAK,SAAS;AAAA,QACV,MAAa;AAAA,QACb,OAAM,OAAO;AAAA,QACb,QAAO,OAAO;AAAA,QACd,OAAO;AAAA,QACP,KAAK;AAAA,UACD,QAAO;AAAA,UACP,iBAAiB;AAAA,QACrB;AAAA,QACA,SAAS;AAAA,UACL,SAAQ;AAAA,UACR,QAAQ,CACR;AAAA,UACA,QAAO;AAAA,YACH,SAAQ;AAAA,YACR,OAAO;AAAA,cACH,UAAU;AAAA,cACV,gBAAgB;AAAA,YACpB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IAKO,QAAO;AACV,WAAK,OAAO,IAAW,YAAK,KAAK,MAAM;AACvC,WAAK,UAAU,WAAW,CAAC,UAAQ;AAC/B,gBAAQ,IAAI,oBAAoB;AAChC,cAAM,SAA8C,KAAK,KAAK;AAC9D,eAAO,MAAM,SAAS;AACtB,eAAO,MAAM,UAAU;AACvB,eAAO,MAAM,WAAW;AACxB,eAAO,MAAM,WAAW;AACxB,eAAO,MAAM,MAAM;AACnB,eAAO,MAAM,OAAO;AAAA,MACxB,CAAC;AACD,WAAK,KAAK,MAAM,IAAI,YAAY,KAAK,SAAS;AAC9C,WAAK,KAAK,MAAM,OAAO,QAAQ,UAAU;AAAA,IAC7C;AAAA,IAEA,WAAW,SAA6B;AACpC,WAAK,UAAU,WAAW,OAAO;AAAA,IACrC;AAAA,IAIA,OAAc,kBAAiB;AAC3B,UAAI,YAAW,cAAc,MAAK;AAC9B,oBAAW,aAAa,IAAI,YAAW;AAAA,MAC3C;AACA,aAAO,YAAW;AAAA,IACtB;AAAA,EACJ;AAzDO,MAAM,aAAN;AAiDH,EAjDS,WAiDM,aAAwB;;;AE/CpC,MAAM,0BAAN,cAAsC,UAAU;AAAA,IAInD,YAAY,QAAkB;AAC1B,YAAM,UAAU;AAQpB,WAAQ,kBAAuB;AAC/B,WAAQ,MAAW;AAqBnB,WAAQ,MAAW;AAoBnB,WAAQ,UAAe;AAOvB,eAAS;AACT,eAAS;AACT,eAAU;AACV,mBAAa;AACb,oBAAc;AACd,uBAAkB;AAClB,mBAAa;AACb,mBAAa;AACb,mBAAc;AACd,0BAAqB;AAjEjB,WAAK,aAAa;AAClB,WAAK,WAAW,UAAU,WAAW,CAAC,UAAQ;AAC1C,aAAK,eAAe,MAAM,QAAQ,IAAI,OAAO,KAAK,GAAG,KAAK,GAAG,aAAa,EAAE;AAC5E,aAAK,aAAa,eAAe,KAAK;AACtC,aAAK,aAAa,gBAAgB,KAAK;AAAA,MAC3C,CAAC;AAAA,IACL;AAAA,IAGA,IAAI,KAAW;AACX,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,IAAI,GAAG,IAAU;AACb,UAAI,KAAK,cAAc,MAAM,YAAY,QAAQ,KAAK,aAAa,KAAK,SAAS,KAAK,IAAG;AACrF,aAAK,aAAa,SAAS,CAAC,KAAK,SAAS;AAC1C,aAAK,aAAa,aAAa,KAAG,KAAK,eAAe;AAAA,MAC1D;AACA,WAAK,MAAM;AACX,UAAG,MAAM,GAAE;AACP,YAAG,KAAK,UAAU,GAAE;AAChB,eAAK,QAAQ;AAAA,QACjB;AAAA,MACJ,OAAO;AACH,aAAK,QAAQ;AACb,YAAG,KAAK,UAAU,KAAK,KAAK,MAAM,GAAE;AAChC,eAAK,QAAQ;AAAA,QACjB;AAAA,MACJ;AAAA,IACJ;AAAA,IAEA,IAAI,KAAW;AACX,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,IAAI,GAAG,IAAU;AACb,UAAI,KAAK,cAAc,MAAM,YAAY,QAAQ,KAAK,aAAa,KAAK,SAAS,KAAK,IAAG;AACrF,aAAK,aAAa,aAAa,KAAG,KAAK,eAAe;AAAA,MAC1D;AACA,WAAK,MAAM;AACX,UAAG,MAAM,GAAE;AACP,YAAG,KAAK,UAAU,GAAE;AAChB,eAAK,QAAQ;AAAA,QACjB;AAAA,MACJ,OAAO;AACH,aAAK,QAAQ;AACb,YAAG,KAAK,UAAU,KAAK,KAAK,MAAM,GAAE;AAChC,eAAK,QAAQ;AAAA,QACjB;AAAA,MACJ;AAAA,IACJ;AAAA,IAEA,IAAI,SAAe;AACf,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,IAAI,OAAO,iBAAuB;AAC9B,WAAK,UAAU,mBAAiB,IAAE,KAAK;AAAA,IAC3C;AAAA,IAcA,OAAO,QAAe,MAA2B;AAC7C,YAAM,QAAQ,KAAK;AACnB,WAAK,KAAK,KAAK,KAAK;AACpB,WAAK,KAAK,KAAK,KAAK;AACpB,WAAK,QAAQ,EAAE,KAAK,MAAM,KAAK,KAAK,MAAM;AAAA,IAC9C;AAAA,IAEA,OAAO,SAAgC;AACnC,aAAO,IAAI,wBAAwB,WAAW,gBAAgB,CAAC;AAAA,IACnE;AAAA,EACJ;;;AC3FO,MAAM,WAAe,EAAC,mBAAkB,EAAC,UAAS,IAAG,SAAQ,IAAG,QAAO,MAAK,GAAE,4BAA2B,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,OAAM,GAAE,qBAAoB,EAAC,UAAS,KAAI,SAAQ,IAAG,QAAO,MAAK,GAAE,yBAAwB,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,qBAAoB,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,6CAA4C,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,2CAA0C,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,8BAA6B,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,0CAAyC,EAAC,UAAS,KAAI,SAAQ,IAAG,QAAO,MAAK,GAAE,2CAA0C,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,4CAA2C,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,gDAA+C,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,0CAAyC,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,iDAAgD,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,iDAAgD,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,0CAAyC,EAAC,UAAS,KAAI,SAAQ,IAAG,QAAO,MAAK,GAAE,wBAAuB,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,oBAAmB,EAAC,UAAS,IAAG,SAAQ,IAAG,QAAO,MAAK,GAAE,2BAA0B,EAAC,UAAS,IAAG,SAAQ,IAAG,QAAO,MAAK,GAAE,sBAAqB,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,4BAA2B,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,iEAAgE,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,sEAAqE,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,qEAAoE,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,uEAAsE,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,wEAAuE,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,wEAAuE,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,oEAAmE,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,oEAAmE,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,mEAAkE,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,2DAA0D,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,4DAA2D,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,qEAAoE,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,+DAA8D,EAAC,UAAS,KAAI,SAAQ,IAAG,QAAO,MAAK,GAAE,2DAA0D,EAAC,UAAS,KAAI,SAAQ,IAAG,QAAO,MAAK,GAAE,2DAA0D,EAAC,UAAS,KAAI,SAAQ,IAAG,QAAO,MAAK,GAAE,8DAA6D,EAAC,UAAS,KAAI,SAAQ,IAAG,QAAO,MAAK,GAAE,0DAAyD,EAAC,UAAS,KAAI,SAAQ,IAAG,QAAO,MAAK,GAAE,4DAA2D,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,iEAAgE,EAAC,UAAS,KAAI,SAAQ,IAAG,QAAO,MAAK,GAAE,0DAAyD,EAAC,UAAS,KAAI,SAAQ,IAAG,QAAO,MAAK,GAAE,0DAAyD,EAAC,UAAS,KAAI,SAAQ,IAAG,QAAO,MAAK,GAAE,+DAA8D,EAAC,UAAS,KAAI,SAAQ,IAAG,QAAO,MAAK,GAAE,+DAA8D,EAAC,UAAS,KAAI,SAAQ,IAAG,QAAO,MAAK,GAAE,2DAA0D,EAAC,UAAS,KAAI,SAAQ,IAAG,QAAO,MAAK,GAAE,gEAA+D,EAAC,UAAS,KAAI,SAAQ,IAAG,QAAO,MAAK,GAAE,uDAAsD,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,gEAA+D,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,GAAE,gCAA+B,EAAC,UAAS,KAAI,SAAQ,KAAI,QAAO,MAAK,EAAC;;;ACQxxI,MAAM,uBAAN,MAAkD;AAAA,IACrD,YAAY,YAAiB,eAAc;AAM3C,WAAQ,mBAA4C,CAAC;AALjD,WAAK,aAAa,WAAW,gBAAgB;AAC7C,WAAK,YAAY;AAAA,IACrB;AAAA,IAIQ,KAAK,UAAgB;AACzB,aAAO,KAAK,YAAY;AAAA,IAC5B;AAAA,IAEA,WAAW,YAAmB,UAAiB,WAAkB,YAAmB,UAAe,GAAG,UAAe,GAAE;AACnH,WAAK,WAAW,UAAU,aAAa,MAAI;AACvC,cAAM,OAAe,KAAK,KAAK,QAAQ;AACvC,cAAM,QAAe,SAAS,KAAK,QAAQ,OAAO,EAAE,CAAC,EAAE;AACvD,cAAM,SAAgB,SAAS,KAAK,QAAQ,OAAO,EAAE,CAAC,EAAE;AACxD,cAAM,aAAa,QAAM;AACzB,cAAM,cAAc,SAAO;AAC3B,aAAK,WAAW,UAAU,KAAK,YAAY,YAAY,MAAM;AAAA,UACzD;AAAA,UACA;AAAA,QACJ,CAAC;AAAA,MAEL,CAAC;AAAA,IACL;AAAA,IAEA,yBAAyB,YAAmB,UAAiB,YAAmB,aAAoB,UAAe,GAAG,UAAe,GAAE;AAAA,IACvI;AAAA,IAEA,sBAAsB,YAAmB,UAAgB;AAAA,IACzD;AAAA,IAEA,aAAa,YAAmB,eAAsB,eAA6B,QAAM,GAAE;AACvF,WAAK,WAAW,UAAU,WAAW,MAAI;AACrC,cAAM,QAAQ,KAAK,WAAW,UAAU;AACxC,cAAM;AAAA,UACF;AAAA,YACI,KAAI;AAAA,YACJ,QAAQ,MAAM,qBAAqB,YAAY;AAAA,cAC3C,QAAQ;AAAA,YACZ,CAAC;AAAA,YACD,WAAW,KAAK,MAAM,KAAK,KAAK;AAAA,YAChC,QAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,IAEA,aAAa,eAAqC;AAE9C,aAAO,gBAAgB,OAAO,eAAe,IAAI,CAAC,GAAG,CAAC;AAAA,IAC1D;AAAA,IAEA,QAAQ,gBAAqB,MAAM,eAAsB,GAAG,QAAa,MAAM,SAAc,MAAe;AACxG,aAAO,IAAI,UAAU,GAAG,CAAC;AAAA,IAC7B;AAAA,IAEA,OAAO,SAA4B;AAC/B,aAAO,IAAI,qBAAoB;AAAA,IACnC;AAAA,IAEA,OAAO,kBAAqC;AACxC,UAAI,qBAAoB,iBAAiB;AAAM,eAAO,qBAAoB;AAC1E,2BAAoB,gBAAgB,IAAI,qBAAoB;AAC5D,aAAO,qBAAoB;AAAA,IAC/B;AAAA,EACJ;AAnEO,MAAM,sBAAN;AA6DH,EA7DS,oBA6DM,gBAAoC;;;AC3DhD,MAAM,2BAAN,cAAuC,UAAU;AAAA,IAKpD,YAAY,eAAsB,OAAc,eAA4B;AACxE,cAAQ,IAAI,6BAA6B;AACzC,YAAM,WAAW;AAJrB,kCAAgC;AAChC,2BAA2B,IAAI,UAAU,GAAE,CAAC;AAIxC,WAAK,aAAa,WAAW,gBAAgB;AAAA,IACjD;AAAA,IAEA,kBAAiB;AAAA,IACjB;AAAA,IAEA,QAAQ,gBAAqB,MAAM,eAAsB,GAAG,QAAa,MAAM,SAAc,MAAgB;AACzG,aAAO,KAAK;AAAA,IAChB;AAAA,IAEA,UAAU,WAAsB;AAAA,IAChC;AAAA,IAEA,UAAU,eAAqB;AAE3B,UAAG,iBAAiB,KAAK;AAAe;AACxC,WAAK,gBAAgB;AACrB,WAAK,uBAAuB;AAAA,IAChC;AAAA,IAEA,gBAAgB,YAAmB,cAAoB;AAAA,IACvD;AAAA,IAEA,OAAO,QAAe,MAA2B;AAAA,IACjD;AAAA,IAEA,OAAO,SAAiC;AACpC,UAAI,gBAA8B,oBAAoB,gBAAgB;AAEtE,UAAI,KAA8B,IAAI,yBAAyB,SAAS,GAAG,aAAa;AACxF,aAAO;AAAA,IACX;AAAA,EACJ;;;AC5BO,WAAS,yBAAyC;AACrD,QAAI,KAAsB,IAAI,iBAAiB;AAE/C,OAAG,kBAAkB,wBAAwB;AAC7C,OAAG,kBAAkB,uBAAuB;AAE5C,OAAG,kBAAkB,aAAa;AAClC,OAAG,kBAAkB,aAAa;AAClC,OAAG,kBAAkB,mBAAmB;AACxC,OAAG,kBAAkB,cAAc;AACnC,OAAG,kBAAkB,eAAe;AACpC,OAAG,kBAAkB,oBAAoB;AACzC,OAAG,kBAAkB,kBAAkB;AACvC,OAAG,kBAAkB,kBAAkB;AACvC,OAAG,kBAAkB,sBAAsB;AAC3C,OAAG,kBAAkB,aAAa;AAClC,OAAG,kBAAkB,iBAAiB;AACtC,OAAG,kBAAkB,kBAAkB;AACvC,OAAG,kBAAkB,mBAAmB;AACxC,OAAG,kBAAkB,aAAa;AAClC,OAAG,kBAAkB,kBAAkB;AACvC,WAAO;AAAA,EACX;;;ACrCO,MAAM,cAAN,cAA0B,OAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMnC,YAAY,IAAoB;AAC5B,YAAM,EAAE;AACR,UAAI,WAAgD,KAAK,aAAa,UAAU;AAChF,eAAS,IAAI;AACb,UAAI,QAAuB,KAAK,aAAa,MAAM;AAAA,IACvD;AAAA,IAEA,aAAa,QAAgC;AACzC,cAAQ,IAAI,MAAM;AAAA,IACtB;AAAA,IAEA,OAAO,SAAoB;AACvB,UAAI,KAAsB,uBAAuB;AACjD,UAAI,SAAS,IAAI,YAAY,EAAE;AAC/B,aAAO;AAAA,IACX;AAAA,EACJ;;;AC5BO,MAAK,YAAL,kBAAKC,eAAL;AACH,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AAEA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AAEA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AAEA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AAEA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AAEA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AAEA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AAEA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AAEA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AAEA,IAAAA,sBAAA;AACA,IAAAA,sBAAA;AAEA,IAAAA,sBAAA;AAEA,IAAAA,sBAAA;AAEA,IAAAA,sBAAA;AAEA,IAAAA,sBAAA;AAjDQ,WAAAA;AAAA,KAAA;;;ACCL,MAAM,YAAN,MAAgB;AAAA,IACnB,YAAY,WAAqB,WAAc,kBAAuB,MAAK;AACvE,WAAK,YAAY;AACjB,WAAK,YAAY;AACjB,WAAK,mBAAmB,UAAU,SAAS;AAAA,IAC/C;AAAA,IAMA,OAAO,OAAO,WAAqB,YAAa,MAAe;AAC3D,UAAI,KAAe,IAAI,UAAU,WAAW,SAAS;AACrD,aAAO;AAAA,IACX;AAAA,EACJ;;;ACAO,MAAM,aAAN,cAAyB,aAAa;AAAA,IACzC,YAAY,MAAU;AAClB,YAAM,IAAI;AAAA,IACd;AAAA,IACA,OAAO,OAAO,MAAqB;AAC/B,UAAI,OAAkB,IAAI,WAAW,IAAI;AAEzC,aAAO;AAAA,IACX;AAAA,IAEA,QAAO;AAAA,IAAC;AAAA,IAER,YAAY,QAAe,cAA0B;AACjD,UAAI,SAAqB,aAAa;AACtC,UAAI;AACJ,UAAI,gBAA4C,OAAO,aAAa,QAAQ,IAAI;AAChF,UAAI,iBAAiB;AAAK;AAC1B,UAAI,WAAgD,OAAO,aAAa,UAAU;AAClF,UAAI,YAAmD,OAAO,aAAa,WAAW;AACtF,UAAI,aAAsD,OAAO,aAAa,YAAY;AAE1F,UAAI,QAAe,cAAc;AACjC,UAAI,SAAgB,cAAc;AAClC,UAAI,aAAoB,cAAc;AACtC,UAAI,OAAO,SAAS,GAAE;AAAA,MAEtB;AACA,eAAS,IAAE,GAAE,IAAE,OAAO,QAAO,KAAI;AAC7B,gBAAQ,OAAO,CAAC;AAGhB,gBAAO,MAAM,WAAU;AAAA,UACnB;AACI,gBAAI,cAAc;AAAQ;AAC1B,sBAAU,UAAU,UAAU;AAC9B,qBAAS,KAAK,CAAC;AACnB;AAAA,UACA;AACI,gBAAI,cAAc;AAAQ;AAC1B,sBAAU,UAAU,MAAM;AAC1B,qBAAS,KAAK;AAClB;AAAA,UACA;AACI,gBAAI,cAAc;AAAQ;AAC1B,qBAAS,YAAY;AACrB,sBAAU,UAAU,UAAU;AAC9B,qBAAS,KAAK,CAAC;AACnB;AAAA,UACA;AACI,gBAAI,cAAc;AAAQ;AAC1B,sBAAU,UAAU,MAAM;AAC1B,qBAAS,KAAK;AAClB;AAAA,UACA;AACI,gBAAI,cAAc;AAAQ;AAC1B,sBAAU,UAAU,UAAU;AAC9B,qBAAS,KAAK;AAClB;AAAA,UACA;AACI,gBAAI,cAAc;AAAQ;AAC1B,sBAAU,UAAU,MAAM;AAC1B,qBAAS,KAAK;AAClB;AAAA,UACA;AACI,gBAAI,cAAc;AAAQ;AAC1B,qBAAS,YAAY;AACrB,sBAAU,UAAU,UAAU;AAC9B,qBAAS,KAAK;AAClB;AAAA,UACA;AACI,gBAAI,cAAc;AAAQ;AAC1B,sBAAU,UAAU,MAAM;AAC1B,qBAAS,KAAK;AAClB;AAAA,UACA;AACI,iBAAK,KAAK,eAAe,UAAU,WAAW,UAAU;AAC5D;AAAA,UACA;AAQA;AAAA,UACA;AACI,gBAAI;AACJ,4BAAwC,OAAO,aAAa,iBAAiB,IAAI;AACjF,0BAAc,aAAa;AAC/B;AAAA,UACA;AAEI,oBAAQ,IAAI,KAAK,IAAI;AACzB;AAAA,UACA;AACI,gBAAI;AACJ,wBAAgC,OAAO,aAAa,aAAa,IAAI;AACrE,sBAAU,kBAAkB;AAChC;AAAA,UACA;AACI,gBAAI,KAAe,UAAU,8BAA+B;AAC5D,mBAAO,KAAK,EAAE;AAClB;AAAA,QACJ;AAAA,MACJ;AACA,WAAK,cAAc,QAAQ,eAAe,UAAU,WAAW,UAAU;AAAA,IAC7E;AAAA,IACQ,cAAc,QAAgB,eAA8B,UAA6B,WAA+B,YAAgC;AAC5J,UAAI,CAAC,cAAc;AAAQ;AAC3B,UAAI,cAAc,eAAe,KAAK,MAAM,cAAc,iBAAe,CAAC,GAAE;AACxE,mBAAW,MAAM,cAAc,YAAY,cAAc,kBAAkB,KAAK;AAAA,MACpF;AACA,UAAI,cAAc,eAAe,GAAE;AAC/B,sBAAc,UAAU;AACxB,iBAAS,KAAK;AACd,iBAAS,KAAK;AACd,iBAAS,IAAI;AACb;AAAA,MACJ;AACA,oBAAc,eAAe;AAC7B,eAAS,KAAK,KAAK,KAAK,SAAS,KAAK,IAAI,cAAc;AACxD,eAAS,KAAK,KAAK,KAAK,SAAS,KAAK,IAAI,cAAc;AAAA,IAC5D;AAAA,IACQ,KAAK,eAA6B,UAA4B,WAA8B,YAA+B;AAC/H,UAAG,cAAc;AAAQ;AACzB,oBAAc,aAAa;AAC3B,oBAAc,YAAY,SAAS;AACnC,oBAAc,aAAa,SAAS;AACpC,oBAAc,aAAa,UAAU;AACrC,oBAAc,mBAAmB,UAAU,gBAAgB;AAC3D,iBAAW,MAAM,MAAM,EAAE;AAAA,IAC7B;AAAA,EACJ;;;ACxIO,MAAM,aAAN,cAAyB,aAAa;AAAA,IACzC,YAAY,MAAU;AAClB,YAAM,IAAI;AAAA,IACd;AAAA,IACA,MAAM,MAAqB;AACvB,YAAM,SAAS,KAAK;AACpB,UAAI,IAA2C,OAAO,aAAa,aAAa,IAAI;AACpF,UAAI,IAAiC,OAAO,aAAa,QAAQ,IAAI;AACrE,UAAI,IAAyC,OAAO,aAAa,YAAY,IAAI;AACjF,UAAG,KAAG,QAAM,KAAG,MAAK;AAChB;AAAA,MACJ;AACA,UAAI,EAAE,mBAAmB,KAAK,EAAE,mBAAiB,GAAE;AAC/C,UAAE,UAAU,EAAE,cAAc,EAAE,WAAW,CAAC;AAAA,MAC9C;AAAA,IACJ;AAAA,IAEA,YAAY,QAAmB;AAC3B,UAAI,IAAiC,OAAO,aAAa,QAAQ,IAAI;AACrE,UAAG,KAAG;AAAK;AAEX,UAAI;AACJ,eAAQ,IAAS,GAAE,IAAE,OAAO,eAAe,QAAO,KAAI;AAClD,gBAAQ,OAAO,eAAe,CAAC;AAC/B,aAAK,YAAY,OAAO,MAAM;AAAA,MAClC;AAAA,IACJ;AAAA,IACA,OAAO,OAAO,MAAuB;AACjC,aAAO,IAAI,WAAW,IAAI;AAAA,IAC9B;AAAA,IAEQ,gBAAgB,OAAiB,QAAc;AACnD,UAAG,EAAE,MAAM,qBAAqB,SAAQ;AACpC;AAAA,MACJ;AACA,UAAI,iBAAgC,MAAM;AAC1C,UAAI;AACJ,UAAI;AACA,wBAAwC,eAAe,aAAa,eAAe;AAAA,MACvF,QAAE;AACE;AAAA,MACJ;AACA,UAAG,CAAC,cAAc,YAAY;AAC1B;AAAA,MACJ;AAEA,UAAI,OAAoC,OAAO,aAAa,MAAM;AAClE,UAAI;AACJ,wBAAsC,eAAe,aAAa,WAAW;AAC7E,UAAG,KAAK,QAAQ,GAAE;AACd,wBAAgB,QAAQ,KAAK,UAAU,CAAC;AAAA,MAC5C;AACA,WAAK,KAAK,QAAQ,MAAM;AAAA,IAE5B;AAAA,IAEQ,YAAY,OAAiB,QAAmB;AACpD,cAAQ,MAAM,WAAU;AAAA,QACpB;AACI,eAAK,gBAAgB,OAAO,MAAM;AAClC;AAAA,MACR;AAAA,IACJ;AAAA,EACJ;;;ACtEO,MAAM,mBAAN,cAA+B,OAAO;AAAA,IACzC,YAAY,IAAoB;AAC5B,YAAM,EAAE;AACR,UAAI,YAAmD,KAAK,aAAa,WAAW;AACpF,UAAI,WAAgD,KAAK,aAAa,UAAU;AAChF,WAAK,aAAa,YAAY;AAC9B,gBAAU,UAAU,UAAU;AAAA,IAClC;AAAA,IACA,aAAa,QAAqC;AAAA,IAClD;AAAA,IAEA,OAAO,SAAQ;AACX,UAAI,KAAsB,uBAAuB;AACjD,UAAI,KAAsB,IAAI,iBAAiB,EAAE;AACjD,aAAO;AAAA,IACX;AAAA,EACJ;;;ACjBO,MAAM,kBAAN,cAA8B,OAAM;AAAA,IACvC,YAAY,IAAqB;AAC7B,YAAM,EAAE;AACR,UAAI,WAA8B,KAAK,aAAa,UAAU;AAC9D,eAAS,QAAQ;AACjB,WAAK,aAAa,WAAW;AAAA,IACjC;AAAA,IACA,aAAa,QAA6C;AAAA,IAC1D;AAAA,IACA,OAAc,SAAiB;AAC3B,UAAI,KAAsB,uBAAuB;AACjD,aAAO,IAAI,gBAAgB,EAAE;AAAA,IACjC;AAAA,EACJ;;;ACPO,MAAM,mBAAN,cAA+B,aAAa;AAAA,IAE/C,YAAY,MAAU;AAClB,YAAM,IAAI;AAAA,IACd;AAAA,IAEA,MAAM,MAAgB;AAClB,YAAM,SAAS,KAAK;AACpB,UAAI,WAAiD,OAAO,aAAa,YAAY,IAAI;AACzF,UAAI,sBAA+D,OAAO,aAAa,cAAc,IAAI;AAEzG,UAAG,YAAY;AAAK;AACpB,UAAG,uBAAuB;AAAK;AAC/B,0BAAoB;AACpB,UAAI,oBAAoB,YAAY,GAAE;AAElC,aAAK,KAAK,QAAQ,MAAM;AAAA,MAC5B;AAAA,IACJ;AAAA,IAEA,eAAe,QAAe,KAAU,MAAM,KAAU,MAAK;AACzD,UAAI,aAAgD,KAAK,KAAK,UAAU,YAAY;AACpF,UAAI,sBAA+D,WAAW,aAAa,YAAY;AACvG,UAAI,eAAoD,WAAW,aAAa,UAAU;AAE1F,UAAI,WAAgD,OAAO,aAAa,UAAU;AAElF,0BAAoB,YAAY,OAAO;AACvC,mBAAa,IAAI,SAAS;AAC1B,mBAAa,IAAI,SAAS;AAE1B,UAAG,OAAO,QAAQ,OAAO,MAAK;AAC1B,qBAAa,KAAK;AAClB,qBAAa,KAAK;AAAA,MACtB,OAAO;AACH,qBAAa,KAAK,SAAS;AAC3B,qBAAa,KAAK,SAAS;AAAA,MAC/B;AACA,mBAAa,YAAY,SAAS;AAAA,IACtC;AAAA,IAEA,YAAY,QAAc;AACtB,UAAI,SAAqB,OAAO;AAChC,UAAI;AACJ,eAAQ,IAAE,GAAE,IAAE,OAAO,QAAO,KAAI;AAC5B,gBAAQ,OAAO,CAAC;AAChB,gBAAO,MAAM,WAAU;AAAA,UACnB;AACI,gBAAG,MAAM,cAAc,MAAK;AACxB,mBAAK,eAAe,QAAQ,MAAM,UAAU,IAAI,MAAM,UAAU,EAAE;AAAA,YACtE,OAAO;AACH,mBAAK,eAAe,MAAM;AAAA,YAC9B;AACJ;AAAA,UACA;AACI,gBAAI,SAAS,kBAAkB;AAC/B,gBAAG,CAAC;AAAO;AACX,gBAAI,aAAsD,OAAO,aAAa,YAAY;AAC1F,gBAAI,YAAY,WAAW,cAAc,MAAM,UAAU;AACzD,gBAAI,SAAS,OAAO,OAAO,MAAM,UAAU;AAC3C,gBAAI,eAAe,MAAM,qBAAqB;AAC9C,gBAAI,aAAoB,MAAM,UAAU;AACxC,gBAAI,WAAkB,KAAK,KAAK,QAAQ,UAAU;AAClD,gBAAI,cAAc,MAAM,qBAAqB;AAK7C,gBAAG,CAAC,aAAa,CAAC,UAAU,CAAC,gBAAgB,CAAC,aAAY;AACtD,kBAAI,KAAK,UAAU,6BAA8B;AACjD,uBAAS,KAAK,IAAI,IAAI;AAGtB,mBAAK,KAAK,QAAQ,MAAM;AAAA,YAC5B;AACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IAEA,OAAO,OAAO,MAA2B;AACrC,aAAO,IAAI,iBAAiB,IAAI;AAAA,IACpC;AAAA,EACJ;;;ACxFO,MAAM,eAAN,cAA2B,aAAY;AAAA,IAC1C,YAAY,MAAU;AAClB,YAAM,IAAI;AAAA,IACd;AAAA,IACA,MAAM,MAAgB;AAAA,IAEtB;AAAA,IACA,YAAY,QAAc;AACtB,UAAI,SAA0C,OAAO,aAAa,UAAU,IAAI;AAChF,UAAG,UAAU;AAAK;AAElB,UAAI,SAAqB,OAAO;AAChC,UAAI;AAIJ,eAAQ,IAAE,GAAE,IAAE,OAAO,QAAO,KAAI;AAC5B,gBAAQ,OAAO,CAAC;AAChB,gBAAO,MAAM,WAAU;AAAA,UACnB;AAEI,iBAAK,aAAa,QAAQ,KAAK;AACnC;AAAA,QACJ;AAAA,MACJ;AACA,aAAO,iBAAiB,CAAC;AAAA,IAC7B;AAAA,IACA,aAAa,QAAe,OAAgB;AACxC,UAAG,MAAM,cAAc,MAAK;AACxB,cAAM,YAAY,EAAC,QAAO,GAAE;AAAA,MAChC;AACA,UAAI,SAA0C,OAAO,aAAa,UAAU,IAAI;AAChF,aAAO,UAAU,MAAM,UAAU;AACjC,UAAI,OAAO,SAAS,GAAE;AAClB,aAAK,KAAK,QAAQ,MAAM;AAAA,MAC5B;AAAA,IACJ;AAAA,IACA,OAAO,OAAO,MAAU;AACpB,aAAO,IAAI,aAAa,IAAI;AAAA,IAChC;AAAA,EACJ;;;ACtCO,MAAM,iBAAN,cAA6B,aAAY;AAAA;AAAA;AAAA;AAAA,IAI5C,YAAY,MAAU;AAClB,YAAM,IAAI;AAAA,IACd;AAAA,IACA,OAAO,OAAO,MAA0B;AACpC,aAAO,IAAI,eAAe,IAAI;AAAA,IAClC;AAAA,IAEA,MAAM,MAAiB;AAAA,IAEvB;AAAA,IACA,YAAY,QAAc;AACtB,UAAI,WAAgD,OAAO,aAAa,UAAU;AAClF,UAAG,aAAa;AAAK;AACrB,UAAI,SAAqB,OAAO;AAChC,UAAI;AACJ,eAAQ,IAAE,GAAE,IAAE,OAAO,QAAO,KAAI;AAC5B,gBAAQ,OAAO,CAAC;AAChB,gBAAO,MAAM,WAAU;AAAA,UACnB;AACI,gBAAG,QAAQ,MAAM,WAAU;AACvB,uBAAS,KAAK,MAAM,UAAU;AAAA,YAClC;AACA,gBAAG,QAAQ,MAAM,WAAU;AACvB,uBAAS,KAAK,MAAM,UAAU;AAAA,YAClC;AACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;;;ACjCO,MAAM,oBAAN,cAAgC,aAAY;AAAA,IAC/C,YAAY,MAAU;AAClB,YAAM,IAAI;AAAA,IACd;AAAA,IAEA,OAAO,OAAO,MAAU;AACpB,aAAO,IAAI,kBAAkB,IAAI;AAAA,IACrC;AAAA,IAEA,MAAM,MAAgB;AAClB,YAAM,SAAS,KAAK;AACpB,UAAI,SAAoD,OAAO,aAAa,UAAU,IAAI;AAC1F,UAAG,UAAU,MAAK;AACd;AAAA,MACJ;AAAA,IAEJ;AAAA,IAEA,YAAY,QAAc;AACtB,UAAI,SAAqB,OAAO;AAChC,UAAI;AACJ,eAAQ,IAAE,GAAE,IAAE,OAAO,QAAO,KAAI;AAC5B,gBAAQ,OAAO,CAAC;AAAA,MACpB;AAAA,IACJ;AAAA,EACJ;;;AC/BO,MAAM,gBAAN,MAAoB;AAAA,IACvB,YAAY,kBAAkC;AAG9C,yBAA+B,CAAC;AAF5B,WAAK,mBAAmB;AAAA,IAC5B;AAAA,IAIA,eAAe,eAAsB,aAAgB;AACjD,UAAI,YAAY,qBAAqB,QAAO;AACxC,aAAK,YAAY,aAAa,IAAI;AAAA,MACtC,OAAO;AACH,gBAAQ,IAAI,sCAAsC;AAAA,MACtD;AAAA,IACJ;AAAA,IAEA,kBAAkB,gBAAmB;AACjC,WAAK,iBAAiB,kBAAkB,cAAc;AAAA,IAC1D;AAAA,IAEA,OAAO,YAAkB;AACrB,UAAI,cAAc,KAAK,YAAY,UAAU;AAC7C,aAAO,KAAK,YAAY,UAAU,EAAE,OAAO;AAAA,IAC/C;AAAA,IAEA,OAAO,SAAsB;AACzB,UAAI,mBAAoC,iBAAiB,OAAO;AAChE,UAAI,KAAmB,IAAI,cAAc,gBAAgB;AACzD,aAAO;AAAA,IACX;AAAA,EACJ;;;AC9BO,MAAM,YAAN,MACP;AAAA,IAII,YAAY,SAAmB,OAAiB,SAAe;AAC3D,WAAK,UAAU;AACf,WAAK,QAAQ;AACb,WAAK,UAAU;AAAA,IACnB;AAAA,IACA,OAAc,OAAO,cAAwB,qBAA+B,kBAAwB;AAChG,aAAO,IAAI,UAAU,cAAc,qBAAqB,gBAAgB;AAAA,IAC5E;AAAA,EACJ;AAEA,WAAS,eACT;AACI,QAAI,UAAU,CAAC;AACf,YAAQ,KAAK,UAAU,mCAAuC,EAAE,CAAC;AACjE,YAAQ,KAAK,UAAU,mCAAuC,EAAE,CAAC;AACjE,YAAQ,KAAK,UAAU,mCAAuC,EAAE,CAAC;AACjE,YAAQ,KAAK,UAAU,mCAAuC,EAAE,CAAC;AACjE,YAAQ,KAAK,UAAU,2CAA+C,EAAE,CAAC;AACzE,YAAQ,KAAK,UAAU,qCAAuC,EAAE,CAAC;AACjE,YAAQ,KAAK,UAAU,qCAAuC,EAAE,CAAC;AACjE,YAAQ,KAAK,UAAU,qCAAuC,EAAE,CAAC;AACjE,YAAQ,KAAK,UAAU,qCAAuC,EAAE,CAAC;AACjE,YAAQ,KAAK,UAAU,qCAAuC,EAAE,CAAC;AACjE,YAAQ,KAAK,UAAU,qCAAuC,EAAE,CAAC;AACjE,YAAQ,KAAK,UAAU,uDAAyD,GAAG,CAAC;AACpF,YAAQ,KAAK,UAAU,2CAA6C,GAAG,CAAC;AACxE,WAAO;AAAA,EACX;AAEO,MAAI,YAAY,aAAa;;;AChC7B,MAAM,eAAN,MAAmB;AAAA,IACtB,cAAa;AAIb,kBAAiB,MAAM,GAAI;AAC3B,0BAAyB,MAAM,GAAI;AAEnC;AAAA,oBAAqB,CAAC;AACtB,uBAAuD,CAAC;AAPpD,WAAK,OAAO,KAAK,kBAAkB;AAAA,IACvC;AAAA,IASA,oBAAmB;AACf,UAAI,OAAiB,MAAM,GAAI;AAC/B,aAAO,iBAAiB,WAAW,SAAS,GAAE;AAC1C,aAAK,EAAE,OAAO,IAAI;AAAA,MACtB,CAAC;AACD,aAAO,iBAAiB,SAAS,SAAS,GAAE;AACxC,aAAK,EAAE,OAAO,IAAI;AAAA,MAEtB,CAAC;AACD,UAAI,SAAS,SAAS,eAAe,QAAQ;AAC7C,aAAO,iBAAiB,WAAW,CAAC,MAAI;AACpC,cAAM,OAAO,OAAO,sBAAsB;AAC1C,cAAM,IAAI,EAAE,UAAU,KAAK;AAC3B,cAAM,IAAI,EAAE,UAAU,KAAK;AAC3B,gBAAQ,IAAI,QAAQ,IAAI,SAAS,CAAC;AAClC,aAAK,uBAAwB,EAAC,GAAE,EAAC,CAAC;AAAA,MACtC,CAAC;AACD,aAAO;AAAA,IACX;AAAA,IAEA,SAAQ;AAEJ,eAAQ,IAAS,GAAE,IAAE,UAAU,QAAO,KAAI;AACtC,YAAI,WAAW,UAAU,CAAC;AAC1B,YAAG,KAAK,KAAK,SAAS,OAAO,GAAE;AAE3B,eAAK,KAAK,SAAS,OAAO;AAC1B,eAAK,aAAa,SAAS,OAAO,IAAI;AAAA,QAC1C,OAAO;AACH,cAAG,KAAK,aAAa,SAAS,OAAO,GAAE;AAEnC,iBAAK,KAAK,SAAS,KAAK;AACxB,iBAAK,aAAa,SAAS,OAAO,IAAI;AAAA,UAC1C;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IAEA,KAAK,WAAqB,YAAa,CAAC,GAAE;AACtC,UAAI,KAAe,IAAI,UAAU,WAAW,SAAS;AACrD,WAAK,OAAO,KAAK,EAAE;AAAA,IACvB;AAAA,IAEA,gBAAe;AAGX,UAAI;AACJ,UAAI;AACJ,eAAS,IAAE,GAAE,IAAE,KAAK,OAAO,QAAO,KAAI;AAClC,YAAI,QAAQ,KAAK,OAAO,CAAC;AAEzB,YAAI,EAAE,MAAM,aAAa,KAAK;AAAY;AAC1C,oBAAY,KAAK,UAAU,MAAM,SAAS;AAC1C,kBAAU,QAAQ,CAAC,aAAW;AAC1B,mBAAS,KAAK;AAAA,QAClB,CAAC;AAAA,MACL;AACA,WAAK,SAAS,CAAC;AAAA,IACnB;AAAA,IAEA,YAAY,WAAqB,UAAiC;AAG9D,UAAI,EAAE,aAAa,KAAK,YAAW;AAC/B,aAAK,UAAU,SAAS,IAAI,CAAC;AAAA,MACjC;AACA,WAAK,UAAU,SAAS,EAAE,KAAK,QAAQ;AAAA,IAC3C;AAAA,IAGA,YAAY,WAAoB;AAC5B,UAAG,aAAa,KAAK;AAAO;AAC5B,WAAK,SAAS,CAAC;AACf,WAAK,UAAU,SAAS,IAAI,CAAC;AAAA,IACjC;AAAA,IAEA,OAAO,SAAQ;AACX,UAAI,KAAkB,IAAI,aAAa;AACvC,SAAG,yBAA2B;AAC9B,SAAG,yBAA2B;AAC9B,SAAG,yBAA2B;AAC9B,SAAG,yBAA2B;AAC9B,aAAO;AAAA,IACX;AAAA,EACJ;;;AC5FO,MAAM,eAAN,MAAuC;AAAA;AAAA,IAM1C,YAAY,SAAoB,eAA4B;AACxD,WAAK,SAAS,QAAQ;AAEtB,WAAK,MAAM,QAAQ;AACnB,WAAK,gBAAgB;AACrB,WAAK,SAAS,CAAC,GAAG,CAAC;AACnB,WAAK,IAAI,OAAO;AAAA,IACpB;AAAA,IACA,YAAsB;AAClB,aAAO,KAAK;AAAA,IAChB;AAAA,IAEA,UAAU,QAAgB;AACtB,UAAG,OAAO,SAAO,GAAE;AACf,gBAAQ,IAAI,qCAAqC;AACjD;AAAA,MACJ;AACA,WAAK,OAAO,CAAC,IAAI,OAAO,CAAC,IAAI,KAAK,OAAO,QAAM;AAC/C,WAAK,OAAO,CAAC,IAAI,OAAO,CAAC,IAAI,KAAK,OAAO,SAAO;AAAA,IACpD;AAAA,IAEA,OAAM;AACF,WAAK,IAAI,UAAU,GAAE,GAAE,KAAK,OAAO,OAAM,KAAK,OAAO,MAAM;AAAA,IAI/D;AAAA,IAEA,aAAa,QAAmB,GAAW,GAAW,OAAe,QAAgB,cAAsB,SAA8B;AACrI,UAAI,OAAe,QAAQ;AAE3B,UAAI,IAAI,QAAM;AACd,UAAI,IAAI;AACR,UAAI,QAAQ,cAAa;AACrB,aAAK,KAAK,OAAO,CAAC;AAClB,aAAK,KAAK,OAAO,CAAC;AAAA,MACtB;AACA,UAAI,kBAAyB,KAAG,IAAE,QAAM;AACxC,UAAG,MAAK;AACJ,aAAK,IAAI,UAAU,iBAAiB,CAAC;AACrC,aAAK,IAAI,MAAM,IAAG,CAAC;AAAA,MACvB;AACA,UAAG,QAAQ,QAAO;AACd,aAAK,IAAI,OAAO,QAAQ,MAAM;AAAA,MAClC;AAEA,UAAI,SAAS,SAAS,cAAc,QAAQ;AAC5C,aAAO,QAAQ,OAAO;AACtB,aAAO,SAAS,OAAO;AACvB,UAAI,UAAU,OAAO,WAAW,IAAI;AACpC,cAAQ,aAAa,QAAQ,GAAG,CAAC;AACjC,WAAK,IAAI,UAAU,QAAQ,GAAG,GAAG,OAAO,OAAO,OAAO,QAAQ,GAAG,GAAI,OAAO,MAAM;AAElF,UAAG,QAAQ,QAAO;AACd,aAAK,IAAI,OAAO,CAAC,QAAQ,MAAM;AAAA,MACnC;AACA,UAAI,MAAK;AACL,aAAK,IAAI,MAAM,IAAG,CAAC;AACnB,aAAK,IAAI,UAAU,CAAC,iBAAgB,CAAC;AAAA,MACzC;AAAA,IACJ;AAAA,IAEA,OAAO,YAAmB,GAAU,GAAU,OAAc,QAAe,cAAqB,SAA2B;AACvH,UAAI,OAAe,QAAQ;AAC3B,UAAI,SAAwB,KAAK,cAAc,UAAU,UAAU;AACnE,UAAI,KAAK,OAAO,YAAY,YAAY;AACxC,UAAI,IAAI,QAAM;AACd,UAAI,IAAI;AACR,UAAI,QAAQ,cAAa;AACrB,aAAK,KAAK,OAAO,CAAC;AAClB,aAAK,KAAK,OAAO,CAAC;AAAA,MACtB;AACA,UAAI,kBAAyB,KAAG,IAAE,QAAM;AACxC,UAAG,MAAK;AACJ,aAAK,IAAI,UAAU,iBAAiB,CAAC;AACrC,aAAK,IAAI,MAAM,IAAG,CAAC;AAAA,MACvB;AACA,UAAG,QAAQ,QAAO;AACd,aAAK,IAAI,OAAO,QAAQ,MAAM;AAAA,MAClC;AACA,UAAI,IAAE,QAAQ,QAAQ,IAAI,KAAK,OAAO,SAAS,IAAE,SAAS,QAAS,IAAE,SAAQ,KAAK,OAAO,QACzF;AACI,eAAO,UAAU,cAAc,GAAG,GAAG,OAAO,MAAM;AAAA,MACtD;AAEA,UAAG,QAAQ,QAAO;AACd,aAAK,IAAI,OAAO,CAAC,QAAQ,MAAM;AAAA,MACnC;AACA,UAAI,MAAK;AACL,aAAK,IAAI,MAAM,IAAG,CAAC;AACnB,aAAK,IAAI,UAAU,CAAC,iBAAgB,CAAC;AAAA,MACzC;AAAA,IACJ;AAAA,IAEA,KAAK,MAAa,GAAU,GAAU,OAAY,IAAQ;AACtD,WAAK,KAAK,OAAO,CAAC;AAClB,WAAK,KAAK,OAAO,CAAC;AAClB,WAAK,IAAI,SAAS,MAAM,GAAG,CAAC;AAAA,IAChC;AAAA,IAEA,OAAO,GAAW,GAAW,GAAiB;AAC1C,WAAK,IAAI,UAAU;AACnB,WAAK,IAAI,YAAY;AAErB,WAAK,IAAI,cAAc;AACvB,WAAK,IAAI,IAAI,IAAI,KAAK,OAAO,CAAC,GAAG,IAAI,KAAK,OAAO,CAAC,GAAG,IAAE,GAAG,GAAG,IAAI,KAAK,EAAE;AACxE,WAAK,IAAI,KAAK;AACd,WAAK,IAAI,UAAU;AACnB,WAAK,IAAI,YAAY;AAErB,WAAK,IAAI,cAAc;AACvB,WAAK,IAAI,IAAI,IAAI,KAAK,OAAO,CAAC,GAAG,IAAI,KAAK,OAAO,CAAC,GAAG,IAAE,GAAG,GAAG,IAAI,KAAK,EAAE;AACxE,WAAK,IAAI,KAAK;AACd,WAAK,IAAI,cAAc;AAAA,IAE3B;AAAA,IAEA,KAAK,IAAY,IAAY,IAAY,IAAkB;AACvD,WAAK,IAAI,UAAU;AACnB,WAAK,IAAI,OAAO,IAAI,EAAE;AACtB,WAAK,IAAI,OAAO,IAAI,EAAE;AACtB,WAAK,IAAI,OAAO;AAAA,IACpB;AAAA,IAEA,OAAO,SAAqB;AACxB,UAAI,SAAS,WAAW,gBAAgB;AACxC,UAAI,gBAA8B,cAAc,gBAAgB;AAEhE,aAAO,IAAI,aAAa,QAAQ,aAAa;AAAA,IACjD;AAAA,EACJ;;;AC7IO,MAAM,aAAN,MAAgB;AAAA,EAKvB;;;ACRO,MAAM,mBAAN,MAAsB;AAAA,EAG7B;;;ACUO,MAAMC,QAAN,MAAW;AAAA,IACd,YAAY,eAA6B,UAAmB,cAA2B,eAA4B;AAkBnH,WAAQ,YAAqB,CAAC;AAU9B,qBAAyB,CAAC;AAO1B,uBAAoB;AACpB,qBAAkB;AAClB,sBAAW,YAAY,IAAI;AAC3B,0BAAsB;AArClB,WAAK,gBAAgB;AACrB,WAAK,WAAW;AAChB,WAAK,eAAe;AACpB,WAAK,gBAAgB;AAAA,IACzB;AAAA,IAEA,OAAO,SAAa;AAChB,YAAM,WAAW,aAAa,OAAO;AACrC,UAAI,OAAO,IAAIA,MAAK,cAAc,OAAO,GAAG,UAAU,aAAa,OAAO,GAAG,SAAS,aAAa;AACnG,aAAO;AAAA,IACX;AAAA,IAEA,OAAO,aAAa,eAAiC;AACjD,UAAI,OAAO,IAAIA,MAAK,cAAc,OAAO,GAAG,aAAa,OAAO,GAAG,aAAa,OAAO,GAAG,aAAa;AACvG,aAAO;AAAA,IACX;AAAA,IAGA,IAAI,WAAmB;AACnB,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,IAAI,SAAS,UAAkB;AAE3B,WAAK,YAAY;AAAA,IACrB;AAAA,IAeA,OAAO,OAAc,cAAoB;AAErC,WAAK,cAAc,YAAY,IAAI;AACnC,WAAK,aAAa,OAAO;AACzB,eAAQ,IAAE,GAAE,IAAE,KAAK,SAAS,QAAO,KAAI;AACnC,cAAM,OAAO,IAAI,iBAAiB;AAClC,aAAK,QAAQ;AACb,aAAK,kBAAkB;AACvB,aAAK,SAAS,CAAC,EAAE,OAAO,IAAI;AAC5B,iBAAQ,UAAQ,GAAE,UAAQ,KAAK,QAAQ,QAAO,WAAU;AACpD,gBAAMC,QAAO,IAAI,WAAW;AAC5B,UAAAA,MAAK,SAAS,KAAK,SAAS,CAAC;AAC7B,UAAAA,MAAK,eAAe,KAAK;AACzB,UAAAA,MAAK,mBAAmB;AACxB,eAAK,QAAQ,OAAO,EAAE,MAAMA,KAAI;AAAA,QACpC;AAAA,MACJ;AAEA,UAAI;AACJ,eAAQ,IAAE,GAAE,IAAE,KAAK,SAAS,QAAO,KAAI;AACnC,iBAAQ,UAAQ,GAAE,UAAQ,KAAK,QAAQ,QAAO,WAAU;AACpD,eAAK,QAAQ,OAAO,EAAE,YAAY,KAAK,SAAS,CAAC,GAAG,KAAK,YAAY;AAAA,QACzE;AACA,aAAK,SAAS,CAAC,EAAE,iBAAiB,KAAK,SAAS,CAAC,EAAE;AACnD,aAAK,SAAS,CAAC,EAAE,gBAAgB,CAAC;AAAA,MACtC;AAEA,WAAK,aAAa,cAAc;AAEhC,WAAK,SAAS,KAAK,SAAS,GAAS,GAAS;AAC1C,YAAI,KAA0C,EAAE,aAAa,UAAU;AACvE,YAAI,KAA0C,EAAE,aAAa,UAAU;AACvE,eAAO,GAAG,IAAI,GAAG;AAAA,MACrB,CAAC;AACD,WAAK,uBAAuB;AAC5B,UAAI,KAAK,UAAQ,MAAI,GAAE;AACnB,aAAK,YAAY,OAAK,YAAY,IAAI,IAAI,KAAK,gBAAc,MAAK,KAAK;AAAA,MAC3E;AAAM,oBAAY,IAAI;AACtB,WAAK,SAAS,KAAK,KAAK,MAAM,KAAK,SAAS,EAAE,SAAS,GAAE,GAAE,GAAG,GAAI;AAClE,WAAK,WAAW,KAAK,UAAU,KAAG;AAAA,IACtC;AAAA,IACA,KAAK,OAAa;AACd,cAAQ,SAAO,MAAK,KAAK;AACzB,WAAK,gBAAgB;AACrB,UAAI,KAAK,eAAe,GAAE;AACtB,aAAK,OAAO,OAAO,KAAK,MAAM,KAAK,YAAY,CAAC;AAChD,aAAK,eAAe;AAAA,MACxB,OAAO;AACH,aAAK,OAAO,OAAO,CAAC;AAAA,MACxB;AAAA,IACJ;AAAA,IACQ,KAAK,MAAY;AACrB,YAAM,SAAS,OAAO,KAAK,aAAW,MAAK,KAAK;AAChD,WAAK,KAAK,KAAK;AACf,WAAK,WAAW;AAChB,aAAO,sBAAsB,CAACC,UAAO;AAAC,aAAK,KAAKA,KAAI;AAAA,MAAC,CAAC;AAAA,IAC1D;AAAA,IACA,QAAc;AACV,cAAQ,IAAI,eAAe;AAC3B,aAAO,sBAAsB,MAAI;AAC7B,aAAK,KAAK,KAAK,QAAQ;AAAA,MAC3B,CAAC;AACD,aAAO;AAAA,IACX;AAAA,IAEA,OAAM;AACF,oBAAc,KAAK,UAAU;AAAA,IACjC;AAAA,IAEA,UAAU,YAAkB;AACxB,UAAI,SAAgB,KAAK,cAAc,OAAO,UAAU;AACxD,WAAK,SAAS,KAAK,MAAM;AAEzB,aAAO;AAAA,IACX;AAAA,IAEA,QAAQ,UAAuB;AAC3B,UAAI;AACJ,eAAQ,IAAE,GAAE,IAAE,KAAK,SAAS,QAAO,KAAI;AACnC,iBAAS,KAAK,SAAS,CAAC;AACxB,YAAG,YAAY,OAAO;AAAG,iBAAO;AAAA,MACpC;AACA,aAAO;AAAA,IACX;AAAA,IAEA,QAAQ,QAAc;AAClB,aAAO,YAAY;AAAA,IACvB;AAAA,IAEA,yBAAwB;AACpB,UAAG,KAAK,SAAS,OAAO,CAAC,WAAS,OAAO,SAAS,EAAE,UAAU;AAAE;AAChE,UAAI,cAAuB,CAAC;AAC5B,eAAQ,IAAS,GAAE,IAAE,KAAK,SAAS,QAAO,KAAI;AAC1C,YAAG,CAAC,KAAK,SAAS,CAAC,EAAE,WAAU;AAC3B,sBAAY,KAAK,KAAK,SAAS,CAAC,CAAC;AAAA,QACrC,OAAO;AACH,iBAAO,KAAK,SAAS,CAAC;AAAA,QAC1B;AAAA,MACJ;AACA,aAAO,KAAK;AACZ,WAAK,WAAW;AAAA,IACpB;AAAA,IAEA,UAAU,QAAyB;AAC/B,WAAK,QAAQ,KAAK,MAAM;AAAA,IAC5B;AAAA,IAEA,eAAe,YAAmB,aAAqB;AACnD,WAAK,cAAc,eAAe,YAAY,WAAW;AAAA,IAC7D;AAAA,IAEA,kBAAkB,aAAqB;AACnC,WAAK,cAAc,kBAAkB,WAAW;AAAA,IACpD;AAAA,EACJ;;;AChKO,WAAS,sBAAsB,eAA0C;AAC5E,QAAI,KAAmB;AACvB,OAAG,WAAW,cAAc,aAAa,GAAG,CAAC;AAC7C,OAAG,WAAW,WAAW,aAAa,KAAK,GAAG;AAC9C,OAAG,aAAa,WAAW,WAAW,CAAC,CAAC,GAAG,EAAE;AAE7C,OAAG,WAAW,SAAS,iBAAiB,GAAG,CAAC;AAC5C,OAAG,aAAa,SAAS,aAAa,CAAC,GAAE,GAAE,GAAE,CAAC,GAAG,CAAC;AAClD,OAAG,aAAa,SAAS,SAAS,CAAC,CAAC,GAAG,CAAC;AAExC,OAAG,WAAW,kBAAkB,sBAAsB,IAAG,CAAC;AAC1D,OAAG,aAAa,kBAAkB,WAAW,CAAC,IAAG,IAAG,IAAG,EAAE,GAAG,CAAC;AAE7D,OAAG,WAAW,SAAS,aAAa,IAAI,CAAC;AACzC,OAAG,aAAa,SAAS,WAAW,CAAC,CAAC,CAAC;AACvC,OAAG,aAAa,SAAS,WAAW,CAAC,CAAC,CAAC;AACvC,OAAG,aAAa,SAAS,WAAW,CAAC,CAAC,CAAC;AAEvC,OAAG,aAAa,SAAS,SAAS,CAAC,EAAE,CAAC;AACtC,OAAG,aAAa,SAAS,SAAS,CAAC,EAAE,CAAC;AACtC,OAAG,aAAa,SAAS,SAAS,CAAC,EAAE,CAAC;AAEtC,OAAG,aAAa,SAAS,UAAU,CAAC,EAAE,CAAC;AACvC,OAAG,aAAa,SAAS,UAAU,CAAC,EAAE,CAAC;AACvC,OAAG,aAAa,SAAS,UAAU,CAAC,EAAE,CAAC;AAEvC,OAAG,aAAa,SAAS,YAAY,CAAC,EAAE,CAAC;AACzC,OAAG,aAAa,SAAS,YAAY,CAAC,EAAE,CAAC;AACzC,OAAG,aAAa,SAAS,YAAY,CAAC,EAAE,CAAC;AAEzC,OAAG,WAAW,UAAU,cAAc,IAAI,EAAE;AAC5C,OAAG,aAAa,UAAU,UAAU,CAAC,CAAC,CAAC;AACvC,OAAG,aAAa,UAAU,UAAU,CAAC,CAAC,CAAC;AACvC,OAAG,aAAa,UAAU,UAAU,CAAC,CAAC,CAAC;AACvC,OAAG,aAAa,UAAU,UAAU,CAAC,CAAC,CAAC;AACvC,OAAG,aAAa,UAAU,UAAU,CAAC,CAAC,CAAC;AACvC,OAAG,aAAa,UAAU,UAAU,CAAC,CAAC,CAAC;AACvC,OAAG,aAAa,UAAU,SAAS,CAAC,CAAC,CAAC;AAEtC,QAAI,KAAK,KAAK,IAAI;AAClB,OAAG,aAAa,UAAU,QAAQ,CAAC,EAAE,CAAC;AAEtC,OAAG,WAAW,aAAY,wBAAwB,IAAI,CAAC;AACvD,OAAG,aAAa,aAAa,aAAa,CAAC,EAAE,CAAC;AAC9C,OAAG,aAAa,aAAa,iBAAiB,CAAC,IAAI,IAAI,IAAI,EAAE,GAAG,CAAC;AAEjE,SAAK,KAAK;AACV,OAAG,aAAa,aAAa,QAAQ,CAAC,EAAE,GAAG,CAAC;AAC5C,OAAG,aAAa,aAAa,YAAY,CAAC,IAAI,KAAG,GAAG,KAAG,GAAG,KAAG,CAAC,GAAG,CAAC;AAElE,SAAK,IAAE;AACP,OAAG,WAAW,YAAY,gBAAgB,GAAG,CAAC;AAC9C,OAAG,aAAa,YAAY,YAAY,CAAC,IAAI,KAAG,GAAE,KAAG,GAAG,KAAG,GAAG,KAAG,GAAG,KAAG,GAAG,KAAG,GAAE,KAAG,CAAC,CAAC;AAEpF,OAAG,WAAW,gBAAgB,oDAAoD,GAAG,CAAC;AAEtF,SAAK;AACL,OAAG,aAAa,gBAAgB,WAAW,CAAC,KAAK,CAAC,CAAC;AACnD,OAAG,aAAa,gBAAgB,WAAW,CAAC,KAAK,CAAC,CAAC;AACnD,OAAG,aAAa,gBAAgB,WAAW,CAAC,KAAK,EAAE,CAAC;AACpD,OAAG,aAAa,gBAAgB,WAAW,CAAC,KAAK,EAAE,CAAC;AACpD,OAAG,aAAa,gBAAgB,WAAW,CAAC,KAAK,EAAE,CAAC;AAEpD,OAAG,WAAW,OAAO,WAAW,GAAG,CAAC;AACpC,OAAG,aAAa,OAAO,QAAQ,CAAC,CAAC,CAAC;AAElC,OAAG,sBAAsB,UAAU,kBAAkB;AAErD,OAAG,WAAW,WAAW,oCAAoC,IAAI,CAAC;AAClE,OAAG,aAAa,WAAW,iBAAiB,CAAC,EAAE,CAAC;AAChD,OAAG,aAAa,WAAW,qBAAqB,CAAC,IAAI,IAAI,IAAI,EAAE,GAAG,CAAC;AAEnE,OAAG,WAAW,WAAW,wCAAwC,IAAI,CAAC;AACtE,OAAG,aAAa,WAAW,eAAe,CAAC,EAAE,CAAC;AAC9C,OAAG,aAAa,WAAW,mBAAmB,CAAC,IAAI,IAAI,IAAI,EAAE,GAAG,CAAC;AAEjE,OAAG,WAAW,SAAS,mDAAmD,GAAG,CAAC;AAC9E,OAAG,WAAW,QAAQ,yDAAyD,GAAG,CAAC;AAEnF,OAAG,WAAW,WAAW,yCAAyC,IAAI,CAAC;AACvE,OAAG,aAAa,WAAW,iBAAiB,CAAC,EAAE,CAAC;AAChD,OAAG,aAAa,WAAW,qBAAqB,CAAC,IAAI,IAAI,EAAE,GAAG,CAAC;AAE/D,OAAG,WAAW,cAAc,oBAAoB,IAAI,CAAC;AACrD,OAAG,aAAa,cAAc,OAAO,CAAC,EAAE,GAAG,CAAC;AAC5C,OAAG,aAAa,cAAc,WAAW,CAAC,IAAG,IAAG,IAAI,EAAE,GAAG,CAAC;AAE1D,OAAG,WAAW,QAAQ,YAAY,GAAE,CAAC;AACrC,OAAG,aAAa,QAAQ,QAAQ,CAAC,CAAC,CAAC;AACnC,OAAG,aAAa,QAAQ,YAAY,CAAC,GAAE,GAAE,GAAE,CAAC,GAAG,EAAE;AAEjD,OAAG,WAAW,cAAc,mBAAmB,GAAE,CAAC;AAClD,OAAG,aAAa,cAAc,aAAa,CAAC,GAAE,GAAE,CAAC,GAAE,CAAC;AAEpD,OAAG,WAAW,QAAQ,mCAAmC,GAAG,CAAC;AAC7D,OAAG,aAAa,QAAQ,QAAQ,CAAC,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,CAAC,GAAE,EAAE;AAEtD,OAAG,yBAAyB,eAAe,wDAAwD,IAAI,IAAI,GAAG,GAAG;AAEjH,OAAG,aAAa,eAAe,mBAAmB,CAAC,CAAC,CAAC;AAErD,WAAO;AAAA,EACX;AAEO,WAAS,aAAa,MAAe;AACxC,0BAAsB,KAAK,aAAa;AAAA,EAC5C;;;ACtGO,MAAM,eAAN,cAA2B,OAAM;AAAA,IACpC,YAAY,kBAAkC;AAC1C,YAAM,gBAAgB;AACtB,UAAI,YAAmD,KAAK,aAAa,WAAW;AACpF,UAAI,WAAgD,KAAK,aAAa,UAAU;AAChF,UAAI,OAAoC,KAAK,aAAa,MAAM;AAChE,UAAI,YAAmD,KAAK,aAAa,WAAW;AACpF,UAAI,YAAmD,KAAK,aAAa,WAAW;AACpF,UAAI;AACJ,sBAAwC,KAAK,aAAa,eAAe;AACzE,UAAI,YAA+B,KAAK,aAAa,WAAW;AAChE,gBAAU,kBAAkB;AAC5B,WAAK,aAAa,YAAY;AAE9B,UAAI,SAAgB;AAEpB,UAAI,aAAoB;AAUxB,gBAAU,UAAU,MAAM;AAC1B,WAAK,SAAS;AACd,WAAK,aAAa;AAClB,eAAS,QAAQ;AACjB,eAAS,SAAS;AAClB,UAAI,QAAQ;AACZ,eAAS,SAAS;AAClB,eAAS,UAAU;AAAA,IACvB;AAAA,IAEA,aAAa,QAAgC;AAAA,IAC7C;AAAA,IAEA,OAAO,SAAqB;AACxB,UAAI,KAAsB,uBAAuB;AACjD,UAAI,SAAS,IAAI,aAAa,EAAE;AAChC,aAAO;AAAA,IACX;AAAA,EACJ;;;AC7CO,MAAM,iBAAN,cAA6B,OAAM;AAAA,IACtC,YAAY,IAAoB;AAC5B,YAAM,EAAE;AACR,UAAI,YAAmD,KAAK,aAAa,WAAW;AACpF,UAAI,WAAgD,KAAK,aAAa,UAAU;AAChF,UAAI,QAAuC,KAAK,aAAa,OAAO;AACpE,UAAI,SAA0C,KAAK,aAAa,QAAQ;AACxE,UAAI,SAAoD,KAAK,aAAa,QAAQ;AAElF,eAAS,QAAQ;AAAA,IAOrB;AAAA,IAEA,aAAa,QAAgC;AAAA,IAC7C;AAAA,IAEA,OAAO,SAAuB;AAC1B,UAAI,KAAsB,uBAAuB;AACjD,UAAI,SAAS,IAAI,eAAe,EAAE;AAClC,aAAO;AAAA,IACX;AAAA,EACJ;;;AC7BO,MAAM,aAAN,cAAyB,OAAM;AAAA,IAClC,YAAY,IAAoB;AAC5B,YAAM,EAAE;AACR,UAAI,WAAgD,KAAK,aAAa,UAAU;AAChF,UAAI,YAAmD,KAAK,aAAa,WAAW;AACpF,UAAI,OAAoC,KAAK,aAAa,MAAM;AAChE,UAAG,KAAK,cAAc,SAAS,GAAG;AAC9B,kBAAU,UAAU,KAAK,cAAc,CAAC,CAAC;AAAA,MAC7C;AAAA,IACJ;AAAA,IAEA,aAAa,QAAgC;AAAA,IAC7C;AAAA,IAEA,OAAO,SAAQ;AACX,UAAI,KAAsB,uBAAuB;AACjD,aAAO,IAAI,WAAW,EAAE;AAAA,IAC5B;AAAA,EACJ;;;ACpBO,MAAM,sBAAN,cAAkC,OAAO;AAAA,IAC5C,aAAa,QAAyC;AAAA,IACtD;AAAA,IACA,YAAY,IAAoB;AAC5B,YAAM,EAAE;AACR,WAAK,aAAa,UAAU;AAC5B,WAAK,aAAa,WAAW;AAC7B,UAAI,OAAoC,KAAK,aAAa,MAAM;AAChE,WAAK,iBAAiB,IAAI,GAAG,CAAC;AAAA,IAClC;AAAA,IACA,OAAO,SAA6B;AAChC,aAAO,IAAI,oBAAoB,uBAAuB,CAAC;AAAA,IAC3D;AAAA,EACJ;;;ACbO,MAAM,iBAAN,cAA6B,OAAO;AAAA,IACvC,YAAY,IAAqB;AAC7B,YAAM,EAAE;AACR,UAAI,WAAW,KAAK,aAAa,UAAU;AAC3C,WAAK,aAAa,WAAW;AAAA,IACjC;AAAA,IACA,aAAa,QAA6C;AAAA,IAC1D;AAAA,IACA,OAAc,SAAiB;AAC3B,UAAI,KAAsB,uBAAuB;AACjD,aAAO,IAAI,eAAe,EAAE;AAAA,IAChC;AAAA,EACJ;;;ACXO,MAAM,kBAAN,cAA8B,OAAO;AAAA,IACxC,YAAY,IAAoB;AAC5B,YAAM,EAAE;AACR,UAAI,WAAgD,KAAK,aAAa,UAAU;AAChF,UAAI,YAAmD,KAAK,aAAa,WAAW;AACpF,WAAK,aAAa,OAAO;AAAA,IAC7B;AAAA,IACA,aAAa,QAA6C;AAAA,IAC1D;AAAA,IACA,OAAO,SAAQ;AACX,UAAI,KAAsB,uBAAuB;AACjD,aAAO,IAAI,gBAAgB,EAAE;AAAA,IACjC;AAAA,EACJ;;;ACTO,MAAM,aAAN,cAAyB,OAAM;AAAA,IAClC,YAAY,IAAoB;AAC5B,YAAM,EAAE;AACR,UAAI,YAAmD,KAAK,aAAa,WAAW;AACpF,UAAI,WAAgD,KAAK,aAAa,UAAU;AAChF,gBAAU,UAAU,MAAM;AAE1B,eAAS,QAAQ;AACjB,eAAS,SAAS;AAAA,IACtB;AAAA,IAEA,aAAa,QAAgC;AAAA,IAC7C;AAAA,IAEA,OAAO,SAAmB;AACtB,UAAI,KAAsB,uBAAuB;AACjD,UAAI,SAAS,IAAI,WAAW,EAAE;AAC9B,aAAO;AAAA,IACX;AAAA,EACJ;;;ACvBO,MAAM,gBAAN,cAA4B,OAAO;AAAA,IACtC,YAAY,IAAoB;AAC5B,YAAM,EAAE;AACR,UAAI,YAAmD,KAAK,aAAa,WAAW;AACpF,UAAI,WAAgD,KAAK,aAAa,UAAU;AAChF,eAAS,eAAe;AACxB,gBAAU,UAAU,iBAAiB;AAAA,IACzC;AAAA,IACA,aAAa,QAA6C;AAAA,IAC1D;AAAA,IACA,OAAO,SAAQ;AACX,UAAI,KAAsB,uBAAuB;AACjD,aAAO,IAAI,cAAc,EAAE;AAAA,IAC/B;AAAA,EACJ;;;ACPO,WAAS,cAAc,MAAe;AACzC,SAAK,eAAe,UAAU,YAAY;AAC1C,SAAK,eAAe,YAAY,cAAc;AAC9C,SAAK,eAAe,QAAQ,UAAU;AACtC,SAAK,eAAe,SAAS,WAAW;AACxC,SAAK,eAAe,cAAc,gBAAgB;AAClD,SAAK,eAAe,iBAAiB,mBAAmB;AACxD,SAAK,eAAe,YAAY,cAAc;AAC9C,SAAK,eAAe,aAAa,eAAe;AAChD,SAAK,eAAe,SAAS,eAAe;AAC5C,SAAK,eAAe,QAAQ,UAAU;AACtC,SAAK,eAAe,WAAW,aAAa;AAAA,EAChD;;;AClBO,MAAM,kBAAN,cAA8B,aAAa;AAAA,IAC9C,YAAY,MAAU;AAClB,YAAM,IAAI;AA0Bd,WAAQ,WAAgB;AAAA,IAzBxB;AAAA,IAEA,MAAM,MAAsB;AACxB,YAAM,SAAS,KAAK;AACpB,UAAI,YAAmD,OAAO,aAAa,aAAa,IAAI;AAC5F,UAAI,aAAa;AAAK;AACtB,UAAI,WAA8B,UAAU;AAC5C,eAAQ,IAAS,GAAE,IAAE,SAAS,QAAO,KAAI;AACrC,YAAI,mBAAoC,SAAS,CAAC;AAClD,YAAI,iBAAiB,UAAS;AAC1B,cAAI;AACJ,cAAG;AACC,uBAA8B,OAAO,aAAa,UAAU;AAC5D,6BAAiB,YAAY,CAAC,KAAK,SAAS;AAC5C,6BAAiB,YAAY,CAAC,KAAK,SAAS;AAAA,UAChD,QAAE;AAAA,UAAO;AAAA,QACb;AACA,aAAK,UAAU,gBAAgB;AAAA,MACnC;AACA,gBAAU,oBAAoB,CAAC;AAAA,IACnC;AAAA,IAEA,cAAc;AAAA,IAEd;AAAA,IAEQ,iCAAiC,aAA+B;AACpE,UAAI,aAAsB,YAAY,IAAI,CAAC,eAAe;AACvD,eAAQ,KAAK,MAAM,aAAa,KAAK,QAAQ,IAAK,KAAK;AAAA,MAC1D,CAAC;AACD,aAAO;AAAA,IACX;AAAA,IACQ,UAAU,kBAAyC;AACvD,UAAI,kBAAkB,iBAAiB;AACvC,UAAI,kBAAkB,KAAK,iCAAiC,eAAe;AAC3E,UAAI,IAAW,gBAAgB,CAAC;AAChC,UAAI,IAAW,gBAAgB,CAAC;AAChC,UAAI;AACJ,kBAAY,KAAK,KAAK,UAAU,iBAAiB,UAAU;AAC3D,UAAI,WAAgD,UAAU,aAAa,YAAY,IAAI;AAC3F,UAAG,YAAY,MAAK;AAChB;AAAA,MACJ;AACA,eAAS,IAAI;AACb,eAAS,IAAI;AACb,uBAAiB,gBAAgB,SAAS;AAC1C,aAAO;AAAA,IACX;AAAA,IACA,OAAO,OAAO,MAA2B;AACrC,aAAO,IAAI,gBAAgB,IAAI;AAAA,IACnC;AAAA,EAEJ;;;ACrDO,MAAM,kBAAN,cAA8B,aAAa;AAAA,IAC9C,YAAY,MAAU;AAClB,YAAM,IAAI;AAAA,IACd;AAAA,IACA,OAAO,OAAO,MAAW;AACrB,aAAO,IAAI,gBAAgB,IAAI;AAAA,IACnC;AAAA,IAEA,MAAM,MAAqB;AACvB,YAAM,SAAS,KAAK;AACpB,UAAI,YAAmD,OAAO,aAAa,aAAa,IAAI;AAC5F,UAAI,iBAAsD,OAAO,aAAa,YAAY,IAAI;AAC9F,UAAG,aAAa;AAAK;AACrB,UAAG,kBAAkB;AAAK;AAC1B,UAAG,UAAU,sBAAsB,UAAU,GAAE;AAC3C,iBAAQ,IAAS,GAAE,IAAE,IAAG,KAAI;AACxB,oBACC,sBACA,KAAK,KAAK,KAAK,UAAU,eAAe,CAAC;AAAA,QAC9C;AAAA,MACJ;AACA,UAAI,YAA4B,UAAU,SAAS;AACnD,eAAQ,IAAS,GAAE,IAAE,UAAU,sBAAsB,QAAO,KAAI;AAC5D,YAAI;AACJ,YAAI;AACJ,wBAAgB,UAAU,sBAAsB,CAAC;AACjD,uBAAkC,cAAc,aAAa,UAAU;AACvE,YAAG,gBAAgB,MAAK;AACpB,kBAAQ,IAAI,iDAAiD;AAC7D;AAAA,QACJ;AACA,qBAAa,IAAI,eAAe,IAAI,IAAE,MAAM,KAAK,IAAI,MAAM,eAAe;AAC1E,qBAAa,IAAI,eAAe,IAAI,MAAM,eAAe;AACzD,qBAAa,KAAK,eAAe;AACjC,qBAAa,KAAK,eAAe;AAEjC,YAAI,OAAoC,cAAc,aAAa,MAAM;AACzE,YAAG,UAAU,CAAC,EAAE,gBAAgB,GAAG;AAC/B,eAAK,QAAQ,UAAU,CAAC,EAAE,aAAa,SAAS,CAAC;AAAA,QACrD;AAAA,MACJ;AAAA,IACJ;AAAA,IAEA,YAAY,QAAmB;AAAA,IAE/B;AAAA,EACJ;;;AChDO,MAAM,iBAAN,cAA6B,aAAY;AAAA,IAC5C,YAAY,MAAU;AAClB,YAAM,IAAI;AAAA,IACd;AAAA,IAEA,OAAO,OAAO,MAAU;AACpB,aAAO,IAAI,eAAe,IAAI;AAAA,IAClC;AAAA,IAEA,aAAa,QAA2B,gBAAkC;AACtE,UAAI,OAAO,UAAU,UAAU,OAAO;AAAgB;AACtD,aAAM,OAAO,UAAU,SAAS,OAAO,iBAAgB;AACnD,eAAO,UAAU,KAAK,KAAK,KAAK,UAAU,UAAU,CAAC;AACrD,YAAI,WAA8B,OAAO,UAAU,OAAO,UAAU,SAAO,CAAC,EAAE,aAAa,UAAU;AACrG,iBAAS,IAAI,eAAe,IAAI,KAAK,OAAO,IAAE;AAC9C,iBAAS,IAAI,eAAe,IAAI,KAAK,OAAO,IAAE;AAAA,MAGlD;AAAA,IACJ;AAAA,IAEA,gBAAgB,QAAe;AAC3B,UAAI,YAAgC,OAAO,aAAa,aAAa,IAAI;AACzE,UAAI,WAA+B,OAAO,aAAa,YAAY,IAAI;AACvE,gBAAU,QAAQ,UAAU,OAAO,KAAK;AAExC,eAAQ,IAAW,GAAG,IAAE,UAAU,UAAU,QAAQ,KAAI;AACpD,YAAI,WAAW,UAAU,UAAU,CAAC;AACpC,YAAI,SAAS,UAAU,MAAM,CAAC;AAC9B,YAAI,mBAAsC,SAAS,aAAa,WAAW;AAAA,MAC/E;AAAA,IACJ;AAAA,IAEA,MAAM,MAAuB;AACzB,YAAM,SAAS,KAAK;AACpB,UAAI,YAAgC,OAAO,aAAa,aAAa,IAAI;AACzE,UAAI,WAA+B,OAAO,aAAa,YAAY,IAAI;AACvE,UAAI,YAAY,QAAQ,aAAa;AAAM;AAC3C,WAAK,aAAa,WAAW,QAAQ;AACrC,WAAK,gBAAgB,MAAM;AAAA,IAC/B;AAAA,IAEA,YAAY,QAAgB,cAAkC;AAAA,IAE9D;AAAA,EACJ;;;ACtCO,MAAM,mBAAN,cAA+B,aAAY;AAAA,IAK9C,YAAY,MAAU;AAClB,YAAM,IAAI;AALd,WAAQ,SAAqB,CAAC;AAC9B,WAAQ,cAAsB;AAC9B,WAAQ,cAAgC,CAAC;AACzC,WAAQ,mBAA6B,SAAS,OAAO,QAAQ,CAAC;AAG1D,WAAK,KAAK,aAAa,8BAA+B,CAAC,SAAO;AAC1D,YAAG,CAAC,KAAK;AAAY;AACrB,aAAK,OAAO,KAAK,IAAI;AAAA,MACzB,CAAC;AACD,WAAK,KAAK,aAAa,6BAA8B,CAAC,SAAO;AACzD,aAAK,cAAc,CAAC,KAAK;AACzB,aAAK,sBAAsB;AAAA,MAC/B,CAAC;AAAA,IACL;AAAA,IACA,MAAM,MAAuB;AACzB,YAAM,SAAS,KAAK;AACpB,UAAI,gBAA+B,OAAO,aAAa,QAAQ,IAAI;AACnE,UAAI,iBAAiB;AAAM;AAC3B,UAAI,CAAC,KAAK;AAAY;AACtB,UAAI,KAAK,OAAO,UAAU;AAAE;AAC5B,UAAI,QAAQ,KAAK,OAAO,IAAI;AAC5B,UAAI,IAAI,MAAM,UAAU;AACxB,UAAI,IAAI,MAAM,UAAU;AACxB,UAAI,eAAe,KAAK,iBAAiB,GAAG,GAAG,aAAa;AAC5D,YAAM,WAAW,KAAK,MAAM,KAAK,UAAU,KAAK,gBAAgB,CAAC;AACjE,mBAAa,UAAU,KAAK,QAAQ;AAAA,IACxC;AAAA,IACA,wBAAuB;AACnB,UAAI,SAAS,KAAK,KAAK,QAAQ,CAAC;AAChC,UAAI,gBAA+B,OAAO,aAAa,QAAQ,IAAI;AACnE,UAAI,YAAY,cAAc,YAAU;AACxC,YAAM,QAAQ,KAAK,KAAK,UAAU,SAAS;AAE3C,YAAM,gBAAmC,MAAM,aAAa,UAAU;AACtE,oBAAc,QAAQ,YAAU;AAChC,oBAAc,SAAS,YAAY;AACnC,oBAAc,IAAI,cAAc,QAAM;AACtC,oBAAc,IAAI,CAAC,cAAc;AACjC,oBAAc,IAAI,IAAE,cAAc;AAGlC,eAAQ,IAAE,GAAE,IAAE,cAAc,gBAAgB,SAAO,GAAE,KAAI;AACrD,iBAAQ,KAAG,GAAE,KAAG,IAAG,MAAK;AACpB,cAAI,aAAa,cAAc,gBAAgB,CAAC;AAChD,cAAI,aAA8B,KAAK,KAAK,UAAU,OAAO;AAC7D,eAAK,YAAY,KAAK,UAAU;AAChC,cAAI,YAAgC,WAAW,aAAa,WAAW;AACvE,cAAI,WAA8B,WAAW,aAAa,UAAU;AACpE,cAAI,YAAgC,WAAW,aAAa,OAAO;AACnE,oBAAU,gBAAgB,YAAY,EAAE;AACxC,mBAAS,QAAQ;AACjB,mBAAS,SAAS;AAClB,mBAAS,IAAM,KAAG,IAAK,YAAa,YAAU;AAC9C,mBAAS,IAAI,KAAK,OAAQ,IAAE,KAAI,MAAI,CAAC,IAAI;AACzC,mBAAS,KAAG,cAAc,QAAM,IAAI,IAAE,YAAU;AAChD,mBAAS,KAAG,cAAc,SAAO,IAAI,IAAE,YAAU,IAAI;AACrD,mBAAS,eAAe;AACxB,oBAAU,YAAY,MAAI;AACtB,oBAAQ,IAAI,eAAc,aAAa,GAAG,SAAS,CAAC;AACpD,iBAAK,iBAAiB,aAAa;AACnC,iBAAK,iBAAiB,eAAe;AAAA,UACzC,CAAC;AAAA,QACL;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,iBAAiB,GAAU,GAAU,eAA4B;AAC7D,UAAI,UAAU,KAAK,KAAK,SAAS,OAAO,CAAC;AACzC,UAAI,UAAU,KAAK,KAAK,SAAS,OAAO,CAAC;AACzC,aAAO,cAAc,YAAY,IAAI,SAAS,IAAI,OAAO,EAAE,CAAC;AAAA,IAChE;AAAA,IACA,YAAY,QAAgB,cAAkC;AAAA,IAE9D;AAAA,IACA,OAAO,OAAO,MAA2B;AACrC,aAAO,IAAI,iBAAiB,IAAI;AAAA,IACpC;AAAA,EACJ;;;AC/EO,MAAM,cAAN,cAA0B,aAAY;AAAA,IACzC,YAAY,MAAU;AAClB,YAAM,IAAI;AAMd,oBAAsB,CAAC;AACvB,qCAAuC,CAAC;AANpC,WAAK,KAAK,aAAa,8BAA+B,CAAC,SAAO;AAC1D,aAAK,OAAO,KAAK,IAAI;AAAA,MACzB,CAAC;AACD,WAAK,WAAW,KAAK;AAAA,IACzB;AAAA,IAIQ,oCAAmC;AACvC,eAAS,IAAE,GAAE,IAAE,KAAK,wBAAwB,QAAO,KAAI;AACnD,aAAK,wBAAwB,IAAI;AAAA,MACrC;AACA,UAAI,YAAY,KAAK,OAAO;AAC5B,eAAS,IAAE,GAAE,IAAE,WAAU,KAAI;AACzB,aAAK,wBAAwB,KAAK,KAAK,OAAO,IAAI,CAAC;AAAA,MACvD;AAAA,IACJ;AAAA,IAEA,MAAM,MAAuB;AACzB,YAAM,SAAS,KAAK;AACpB,UAAG,kBAAkB;AAAY,aAAK,kCAAkC;AACxE,UAAI,YAAgC,OAAO,aAAa,SAAS,IAAI;AACrE,UAAI,WAA8B,OAAO,aAAa,YAAY,IAAI;AACtE,UAAI,aAAa;AAAK;AACtB,UAAI,YAAY;AAAK;AACrB,WAAK,wBAAwB,QAAQ,CAAC,UAAQ;AAC1C,YAAI,IAAI,OAAO,UAAU;AACzB,YAAI,IAAI,OAAO,UAAU;AACzB,YAAI,KAAK,QAAQ,KAAK;AAAK;AAC3B,YAAI,KAAK,gBAAgB,GAAG,GAAG,QAAQ,GAAE;AACrC,oBAAU,MAAM;AAAA,QACpB;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,IAEA,YAAY,QAAgB,cAAkC;AAAA,IAE9D;AAAA,IAEA,gBAAgB,GAAU,GAAU,UAAmC;AACnE,UAAI,SAAS,cAAa;AACtB,YAAI,SAAS,KAAK,SAAS,UAAU;AACrC,aAAK,OAAO,CAAC;AACb,aAAK,OAAO,CAAC;AAAA,MACjB;AACA,UAAI,QAAQ,SAAS,IAAI,SAAS,QAAM;AACxC,UAAI,SAAS,SAAS,IAAI,SAAS,QAAM;AACzC,UAAI,OAAO,SAAS,IAAI,SAAS;AACjC,UAAI,UAAU,SAAS;AACvB,aAAO,IAAI,SAAS,IAAI,UAAU,IAAI,QAAQ,IAAI;AAAA,IACtD;AAAA,IAEA,OAAO,OAAO,MAAsB;AAChC,aAAO,IAAI,YAAY,IAAI;AAAA,IAC/B;AAAA,EACJ;;;ACxDO,MAAM,qBAAN,cAAiC,aAAY;AAAA;AAAA;AAAA;AAAA,IAIhD,YAAY,MAAU;AAClB,YAAM,IAAI;AAAA,IACd;AAAA,IAEA,OAAO,OAAO,MAA6B;AACvC,aAAO,IAAI,mBAAmB,IAAI;AAAA,IACtC;AAAA,IAEA,MAAM,MAAgB;AAClB,WAAK,oBAAoB,KAAK,MAAM;AAAA,IACxC;AAAA,IACA,cAAc,QAAqB;AAAA,IACnC;AAAA,IAEQ,gBAAgB,WAAmB,OAAsB;AAC7D,aAAO,QAAQ;AAAA,IACnB;AAAA,IAEA,WAAW,QAAc;AAAA,IACzB;AAAA,IAEA,oBAAoB,QAAc;AAC9B,UAAI,IAAuD,OAAO,aAAa,aAAa,IAAI;AAChG,UAAI,IAAqD,OAAO,aAAa,YAAY,IAAI;AAC7F,UAAI,KAAK,QAAQ,KAAK;AAAK;AAC3B,UAAI,CAAC,EAAE;AAAqB;AAC5B,QAAE,uBAAuB;AACzB,UAAI,UAAwB,IAAI,cAAc;AAC9C,UAAI,GAAG,gBAAgB;AAAM;AAE7B,QAAE,aAAa,MAAM,KAAK,EAAE,aAAa;AACzC,QAAE,aAAa,eAAe,EAAE;AAChC,QAAE,aAAa,gBAAgB,EAAE;AAAA,IACrC;AAAA,IAEA,gBAAgB,QAAc;AAAA,IAC9B;AAAA,IAEA,eAAe,QAAc;AAAA,IAC7B;AAAA,IAEA,cAAa;AAAA,IAAC;AAAA,EAClB;;;AC5BA,WAAS,iBAAiB,MAAU;AAChC,SAAK,kBAAkB,aAAa;AACpC,SAAK,kBAAkB,aAAa;AACpC,SAAK,kBAAkB,mBAAmB;AAC1C,SAAK,kBAAkB,cAAc;AACrC,SAAK,kBAAkB,eAAe;AACtC,SAAK,kBAAkB,oBAAoB;AAC3C,SAAK,kBAAkB,kBAAkB;AACzC,SAAK,kBAAkB,iBAAiB;AACxC,SAAK,kBAAkB,kBAAkB;AACzC,SAAK,kBAAkB,mBAAmB;AAC1C,SAAK,kBAAkB,aAAa;AACpC,SAAK,kBAAkB,kBAAkB;AAAA,EAE7C;AAQA,WAAS,sBAAsB,MAAU;AACrC,YAAQ,IAAI,iCAAiC;AAC7C,SAAK,kBAAkB,wBAAwB;AAC/C,SAAK,kBAAkB,uBAAuB;AAC9C,qBAAiB,IAAI;AAAA,EACzB;AAEO,WAAS,mBAAuB;AACnC,YAAQ,IAAI,sBAAsB;AAClC,UAAM,sBAAsB,oBAAoB,gBAAgB;AAChE,QAAI,OAAYC,MAAK,aAAa,mBAAmB;AACrD,SAAK,UAAU,WAAW,OAAO,IAAI,CAAC;AACtC,SAAK,UAAU,WAAW,OAAO,IAAI,CAAC;AAEtC,SAAK,UAAU,iBAAiB,OAAO,IAAI,CAAC;AAE5C,SAAK,UAAU,aAAa,OAAO,IAAI,CAAC;AACxC,SAAK,UAAU,eAAe,OAAO,IAAI,CAAC;AAC1C,SAAK,UAAU,kBAAkB,OAAO,IAAI,CAAC;AAC7C,SAAK,UAAU,gBAAgB,OAAO,IAAI,CAAC;AAC3C,SAAK,UAAU,gBAAgB,OAAO,IAAI,CAAC;AAC3C,SAAK,UAAU,eAAe,OAAO,IAAI,CAAC;AAC1C,SAAK,UAAU,mBAAmB,OAAO,IAAI,CAAC;AAC9C,SAAK,UAAU,iBAAiB,OAAO,IAAI,CAAC;AAC5C,SAAK,UAAU,YAAY,OAAO,IAAI,CAAC;AAEvC,iBAAa,IAAI;AACjB,kBAAc,IAAI;AAClB,0BAAsB,IAAI;AAC1B,UAAM,aAAa,WAAW,gBAAgB;AAC9C,eAAW,UAAU,WAAW,CAAC,UAAQ;AACrC,iBAAW,WAAW,CAAC,UAAQ;AAC3B,cAAM,aAAa,YAAY,IAAI;AACnC,aAAK,KAAK,KAAK;AACf,cAAM,WAAY,YAAY,IAAI,IAAI;AACtC,YAAI,WAAW,GAAE;AAAA,QAEjB;AAAA,MACJ,CAAC;AAAA,IACL,CAAC;AACD,WAAO;AAAA,EACX;;;ACxCA,WAAS,YAAW;AAEhB,QAAI,OAAY,iBAAiB;AACjC,SAAK,cAAc,iBAAiB,gBAAgB,WAAW;AAC/D,SAAK,UAAU,OAAO;AACtB,UAAM,SAAS,WAAW;AAC1B,UAAM,aAAa,WAAW,gBAAgB;AAC9C,eAAW,UAAU,WAAW,MAAI;AAChC,YAAM,iBAA0C,OAAO,aAAa,UAAU;AAC9E,YAAM,kBAAkB,eAAe;AACvC,WAAK,aAAa;AAClB,WAAK,WAAW,UAAU,QAAQ,KAAK,YAAY,eAAe;AAAA,IACtE,CAAC;AAED,QAAI,WAAW,KAAK,UAAU,UAAU;AACxC,QAAI,YAA+B,SAAS,aAAa,UAAU;AACnE,QAAI,KAAyB,SAAS,aAAa,WAAW;AAC9D,OAAG,UAAU,OAAO;AACpB,cAAU,IAAI;AACd,cAAU,IAAI;AACd,cAAU,KAAK;AAMf,QAAI,OAAO,KAAK,UAAU,MAAM;AAChC,QAAI,UAA6B,KAAK,aAAa,UAAU;AAC7D,QAAI,SAA6B,KAAK,aAAa,WAAW;AAC9D,YAAQ,IAAI;AACZ,YAAQ,IAAI;AAEZ,QAAI,WAA4C,KAAK,UAAU,WAAW;AAC1E,QAAI,YAA+B,SAAS,aAAa,WAAW;AACpE,cAAU,kBAAkB;AAC5B,QAAI,OAA0B,SAAS,aAAa,UAAU;AAC9D,SAAK,IAAI;AACT,SAAK,IAAI;AAGT,eAAW,KAAI,KAAK,SAAS,IAAI,CAAC;AAClC,eAAW,KAAI,KAAK,QAAQ,EAAE;AAC9B,eAAW,KAAI,KAAK,UAAU,EAAE;AAChC,eAAW,KAAI,KAAK,SAAS,EAAE;AAE/B,aAAS,WAAW,GAAS,GAAU,UAAiB,IAAS,IAAI,QAAa,GAAE;AAChF,UAAI;AACJ,UAAI;AAEJ,eAAQ,IAAS,GAAE,IAAE,OAAM,KAAI;AAC3B,iBAAQ,KAAU,GAAE,KAAG,OAAM,MAAK;AAC9B,iBAAO,QAAQ,IAAE,IAAE,GAAG,IAAE,KAAG,CAAC;AAC5B,eAAoB,KAAK,aAAa,MAAM;AAC5C,aAAG,QAAQ,QAAQ;AAAA,QACvB;AAAA,MACJ;AAAA,IACJ;AAEA,aAAS,QAAQ,GAAS,GAAS;AAC/B,UAAI,OAAO,KAAK,UAAU,MAAM;AAChC,UAAIC,aAA+B,KAAK,aAAa,UAAU;AAC/D,MAAAA,WAAU,IAAI;AACd,MAAAA,WAAU,IAAI;AACd,aAAO;AAAA,IACX;AAEA,aAAS,aAAY;AACjB,UAAIC,UAAS,KAAK,UAAU,QAAQ;AACpC,UAAI,KAAuBA,QAAO,aAAa,UAAU;AACzD,UAAIC,MAAyBD,QAAO,aAAa,WAAW;AAC5D,SAAG,IAAI;AACP,SAAG,IAAI;AACP,aAAOA;AAAA,IACX;AAEA,eAAW,MAAM;AACjB,WAAO;AAAA,EACX;AACA,MAAI,OAAO,WAAW,aACtB;AAEI,WAAO,OAAO,UAAU;AAAA,EAC5B;",
  "names": ["average", "EventType", "Game", "args", "time", "Game", "component", "player", "ac"]
}
