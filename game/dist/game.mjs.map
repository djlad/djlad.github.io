{
  "version": 3,
  "sources": ["external-global-plugin:phaser", "external-global-plugin:pixi.js", "../src/entities/player-entity.ts", "../src/entities/villager-entity.ts", "../src/entities/crop-entity.ts", "../src/entities/first-entity.ts", "../src/entities/projectile-entity.ts", "../src/entities/inventory-item-entity.ts", "../src/entities/particles/particle-entity.ts", "../src/entities/particles/particles-entity.ts", "../src/entities/clickable-entity.ts", "../src/entities/deer-entity.ts", "../src/entities/ui-panel-entity.ts", "../src/entities/weapon-entity.ts", "../src/builders/entity-builder.ts", "../src/builders/sprite-builder.ts", "../src/engine/events/EventType.ts", "../src/engine/system/system.ts", "../src/systems/click-system.ts", "../src/engine/events/game-event.ts", "../src/systems/collision-system.ts", "../src/engine/entity/entity.ts", "../src/systems/crop-system.ts", "../src/systems/health-system.ts", "../src/systems/inventory-system.ts", "../src/components/tile-component/sprite-id.ts", "../src/systems/map-builder-system.ts", "../src/systems/neural-fight-system.ts", "../src/systems/particle-system.ts", "../src/systems/place-item-system.ts", "../src/systems/projectile-system.ts", "../src/systems/wasd-system.ts", "../src/engine/entity/entity-factory.ts", "../src/engine/events/key-events.ts", "../src/engine/events/event-manager.ts", "../src/engine/renderers/sprite-animation.ts", "../src/engine/renderers/implementations/html/html-canvas.ts", "../src/engine/renderers/implementations/html/html-rect-sprite.ts", "../src/engine/renderers/implementations/html/html-sprite.ts", "../src/engine/renderers/sprite-manager.ts", "../src/engine/renderers/implementations/html/html-renderer.ts", "../src/engine/system/system-args.ts", "../src/engine/entity/entity-update-args.ts", "../src/engine/dependencies/game-dependencies.ts", "../src/engine/component/component.ts", "../src/engine/component/component-factory.ts", "../src/engine/dependencies/generic-cameras.ts", "../src/engine/game.ts", "../src/components/clickable-component.ts", "../src/components/crop-component.ts", "../src/components/fight-component.ts", "../src/components/health-component.ts", "../src/components/inventory-component/inventory-item.ts", "../src/components/inventory-component/inventory-item-type.ts", "../src/components/inventory-component/item-registry.ts", "../src/components/inventory-component/inventory-component.ts", "../src/components/neural-fight-component.ts", "../src/components/particle-componet.ts", "../src/components/primitive-component.ts", "../src/components/projectile-component.ts", "../src/components/tile-component/tile.ts", "../src/components/tile-component/tile-component.ts", "../src/components/transitions/transition-component.ts", "../src/components/wasd-component.ts", "../src/components/place-item/place-item-request.ts", "../src/components/place-item/place-item-component.ts", "../src/components/crop-harvester-component.ts", "../src/components/text-component/text-placement.ts", "../src/components/text-component/text-component.ts", "../src/engine/phaser-integration/phaser-game.ts", "../src/engine/phaser-integration/main-scene.ts", "../src/metadata.ts", "../src/engine/phaser-integration/phaser-sprite-manager.ts", "../src/engine/pixi-integration/pixi-components/generic-animation-component.ts", "../src/engine/pixi-integration/pixi-components/generic-position-component.ts", "../src/engine/pixi-integration/pixi-dependencies.ts", "../src/engine/pixi-integration/pixi-game.ts", "../src/engine/pixi-integration/pixi-sprite-manager.ts", "../src/engine/pixi-integration/sprite-dependency/pixi-engine-sprite.ts", "../src/engine/pixi-integration/sprite-dependency/pixie-engine-creator.ts", "../src/engine/pixi-integration/generic-render.ts", "../src/engine/pixi-integration/systems/generic-render-system.ts", "../src/engine/pixi-integration/pixi-builder.ts", "../src/components/weapon-component.ts", "../src/game-builders.ts", "../src/game.ts"],
  "sourcesContent": ["module.exports = window.Phaser", "module.exports = window.PIXI", "import { Entity } from '../engine/entity/entity';\r\nimport { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { WasdComponent } from '../components/wasd-component';\r\nimport { InventoryComponent } from '../components/inventory-component/inventory-component';\r\nimport { PlaceItemComponent } from '../components/place-item/place-item-component';\r\nimport { CropHarvesterComponent } from '../components/crop-harvester-component';\r\nimport { ParticleComponent } from '../components/particle-componet';\r\nimport { AnimationComponent } from '../engine/component/components/animation/animation-component';\r\nimport { GameDependencies } from '../engine/dependencies/game-dependencies';\r\nimport { EntityRegistration } from '../engine/entity/entity-registration';\r\n\r\nexport class PlayerEntity implements EntityRegistration{\r\n    create(gameDependencies: GameDependencies, entity: Entity): Entity {\r\n        var animation:AnimationComponent = <AnimationComponent>entity.addComponent(\"animation\");\r\n        var position:PositionComponent = <PositionComponent>entity.addComponent(\"position\");\r\n        var wasd:WasdComponent = <WasdComponent>entity.addComponent(\"wasd\");\r\n        var inventory:InventoryComponent = <InventoryComponent>entity.addComponent(\"inventory\");\r\n        let placeItem:PlaceItemComponent = <PlaceItemComponent>entity.addComponent(\"placeItem\");\r\n        let cropHarvester:CropHarvesterComponent;\r\n        cropHarvester = <CropHarvesterComponent>entity.addComponent(\"cropHarvester\");\r\n        let particles = <ParticleComponent>entity.addComponent(\"particles\");\r\n        particles.targetParticles = 0;\r\n        entity.addComponent(\"transition\");\r\n        entity.addComponent(\"weapon\");\r\n        \r\n        var sprite:string = \"grey\";\r\n        // var sprite:string = \"greythrow\";\r\n        var walkSprite:string = \"greyWalk\";\r\n        // var sprite:string = \"greg\";\r\n        // var walkSprite:string = \"gregwalk\";\r\n        // var sprite:string = \"blond\";\r\n        // var walkSprite:string = \"blondWalk\";\r\n        // var sprite:string = \"dwarfopeneyes\";\r\n        // var walkSprite:string = \"dwarfopeneyesWalk\";\r\n        // var sprite:string = \"speargoblin\";\r\n        // var walkSprite:string = \"speargoblinWalk\";\r\n        \r\n        animation.setSprite(sprite)\r\n        wasd.sprite = sprite;\r\n        wasd.walkSprite = walkSprite;\r\n        position.width = 32;\r\n        position.height = 48;\r\n        let multi = 2.4\r\n        position.width *= multi\r\n        position.height *= multi\r\n        return entity;\r\n    }\r\n}", "import { Entity } from '../engine/entity/entity';\r\nimport { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { FightComponent } from '../components/fight-component';\r\nimport { HealthComponent } from '../components/health-component';\r\nimport { NeuralFightComponent } from '../components/neural-fight-component';\r\nimport { AnimationComponent } from '../engine/component/components/animation/animation-component';\r\nimport { EntityRegistration } from '../engine/entity/entity-registration';\r\nimport { GameDependencies } from '../engine/dependencies/game-dependencies';\r\n\r\nexport class VillagerEntity implements EntityRegistration{\r\n    create(gameDependcies: GameDependencies, entity: Entity){\r\n        var animation:AnimationComponent = <AnimationComponent>entity.addComponent(\"animation\");\r\n        var position:PositionComponent = <PositionComponent>entity.addComponent(\"position\");\r\n        var fight:FightComponent = <FightComponent>entity.addComponent(\"fight\");\r\n        var health:HealthComponent = <HealthComponent>entity.addComponent(\"health\");\r\n        var neural:NeuralFightComponent = <NeuralFightComponent>entity.addComponent(\"neural\");\r\n        \r\n        position.width = 70;\r\n        /*animation.setSprite(\"brownpuffgirl\");\r\n        \r\n        position.height = 32;\r\n        let multiplier = 2.5;\r\n        position.height *= multiplier * 1.1;\r\n        position.width *= multiplier;*/\r\n        return entity;\r\n    }\r\n}", "import { Entity } from '../engine/entity/entity';\r\nimport { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { CropComponent } from '../components/crop-component';\r\nimport { AnimationComponent } from '../engine/component/components/animation/animation-component';\r\nimport { EntityRegistration } from '../engine/entity/entity-registration';\r\nimport { GameDependencies } from '../engine/dependencies/game-dependencies';\r\n\r\nexport class CropEntity implements EntityRegistration{\r\n    create(gameDependencies: GameDependencies, entity: Entity): Entity {\r\n        var position:PositionComponent = <PositionComponent>entity.addComponent(\"position\");\r\n        position.width = 100;\r\n        position.height = 100;\r\n        let animation:AnimationComponent = <AnimationComponent>entity.addComponent(\"animation\");\r\n        let crop:CropComponent = <CropComponent>entity.addComponent(\"crop\");\r\n        if(crop.growthSprites.length > 0) {\r\n            animation.setSprite(crop.growthSprites[0]);\r\n        }\r\n        return entity;\r\n    }\r\n}", "import { Entity } from '../engine/entity/entity';\r\nimport { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { TileComponent } from '../components/tile-component/tile-component';\r\nimport { EntityRegistration } from '../engine/entity/entity-registration';\r\nimport { GameDependencies } from '../engine/dependencies/game-dependencies';\r\n\r\nexport class FirstEntity implements EntityRegistration{\r\n    /**\r\n     * this is an empty entity that will always be the first \r\n     * entity in the game.entities array. if a system wants to know if it is being applied \r\n     * to the first entity it can check if it is this entity.\r\n     */\r\n    create(gameDependencies: GameDependencies, entity: Entity): Entity {\r\n        var position:PositionComponent = <PositionComponent>entity.addComponent(\"position\");\r\n        position.y = -9999999;\r\n        var tiles = <TileComponent>entity.addComponent(\"tile\");\r\n        return entity;\r\n    }\r\n}", "import { Entity } from '../engine/entity/entity';\r\nimport { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { AnimationComponent } from '../engine/component/components/animation/animation-component';\r\nimport { EntityRegistration } from '../engine/entity/entity-registration';\r\nimport { GameDependencies } from '../engine/dependencies/game-dependencies';\r\n\r\nexport class ProjectileEntity implements EntityRegistration{\r\n    create(gameDependencies: GameDependencies, entity: Entity): Entity {\r\n        var animation:AnimationComponent = <AnimationComponent>entity.addComponent(\"animation\");\r\n        var position:PositionComponent = <PositionComponent>entity.addComponent(\"position\");\r\n        entity.addComponent(\"projectile\");\r\n        animation.setSprite(\"fireball\");\r\n        return entity;\r\n    }\r\n}", "import { Entity } from \"../engine/entity/entity\";\r\nimport { TextComponent } from \"../components/text-component/text-component\";\r\nimport { EntityRegistration } from \"../engine/entity/entity-registration\";\r\nimport { GameDependencies } from \"../engine/dependencies/game-dependencies\";\r\n\r\nexport class InventoryItemEntity implements EntityRegistration{\r\n    create(gameDependencies: GameDependencies, entity: Entity): Entity {\r\n        entity.addComponent(\"position\");\r\n        entity.addComponent(\"animation\");\r\n        let text:TextComponent = <TextComponent>entity.addComponent(\"text\");\r\n        text.addTextPlacement(\"\", 0, 0);\r\n        return entity;\r\n    }\r\n}", "import { Entity } from \"../../engine/entity/entity\";\r\nimport { EntityRegistration } from \"../../engine/entity/entity-registration\";\r\nimport { GameDependencies } from \"../../engine/dependencies/game-dependencies\";\r\n\r\nexport class ParticleEntity implements EntityRegistration {\r\n    create(gameDependencies: GameDependencies, entity: Entity): Entity {\r\n        let position = entity.addComponent(\"position\");\r\n        entity.addComponent(\"primitive\");\r\n        return entity;\r\n    }\r\n}", "import { PositionComponent } from \"../../engine/component/components/position/position-component\";\r\nimport { GameDependencies } from \"../../engine/dependencies/game-dependencies\";\r\nimport { Entity } from \"../../engine/entity/entity\";\r\nimport { EntityRegistration } from \"../../engine/entity/entity-registration\";\r\n\r\nexport class ParticlesEntity implements EntityRegistration{\r\n    create(gameDependencies: GameDependencies, entity: Entity): Entity {\r\n        let position = <PositionComponent>entity.addComponent(\"position\");\r\n        position.width = 10;\r\n        entity.addComponent(\"particles\");\r\n        return entity;\r\n    }\r\n}", "import { PositionComponent } from \"../engine/component/components/position/position-component\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\nimport { GameEvent } from \"../engine/events/game-event\";\r\nimport { AnimationComponent } from \"../engine/component/components/animation/animation-component\";\r\nimport { GameDependencies } from \"../engine/dependencies/game-dependencies\";\r\nimport { EntityRegistration } from \"../engine/entity/entity-registration\";\r\n\r\nexport class ClickableEntity implements EntityRegistration{\r\n    create(gameDependencies: GameDependencies, entity: Entity): Entity {\r\n        var position:PositionComponent = <PositionComponent>entity.addComponent(\"position\");\r\n        let animation:AnimationComponent = <AnimationComponent>entity.addComponent(\"animation\");\r\n        entity.addComponent(\"click\");\r\n        return entity;\r\n    }\r\n    handleEvents(events: { [key: string]: GameEvent; }): void {\r\n    }\r\n}", "import { Entity } from '../engine/entity/entity';\r\nimport { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { AnimationComponent } from '../engine/component/components/animation/animation-component';\r\nimport { EntityRegistration } from '../engine/entity/entity-registration';\r\nimport { GameDependencies } from '../engine/dependencies/game-dependencies';\r\n\r\nexport class DeerEntity implements EntityRegistration{\r\n    create(gameDependencies: GameDependencies, entity: Entity): Entity {\r\n        var animation:AnimationComponent = <AnimationComponent>entity.addComponent(\"animation\");\r\n        var position:PositionComponent = <PositionComponent>entity.addComponent(\"position\");\r\n        animation.setSprite(\"deer\");\r\n        \r\n        position.width = 110;\r\n        position.height = 110;\r\n        return entity;\r\n    }\r\n}", "import { PositionComponent } from \"../engine/component/components/position/position-component\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\nimport { AnimationComponent } from \"../engine/component/components/animation/animation-component\";\r\nimport { EntityRegistration } from \"../engine/entity/entity-registration\";\r\nimport { GameDependencies } from \"../engine/dependencies/game-dependencies\";\r\n\r\nexport class UIPanelEntity implements EntityRegistration{\r\n    create(gameDependcies: GameDependencies, entity: Entity){\r\n        let animation:AnimationComponent = <AnimationComponent>entity.addComponent(\"animation\");\r\n        var position:PositionComponent = <PositionComponent>entity.addComponent(\"position\");\r\n        position.applyOffsets = false;\r\n        animation.setSprite(\"woodpanelsunken\");\r\n        return entity;\r\n    }\r\n}", "import { AnimationComponent2 } from \"../components/animation-component\";\r\nimport { PositionComponent } from \"../engine/component/components/position/position-component\";\r\nimport { GameDependencies } from \"../engine/dependencies/game-dependencies\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\nimport { EntityRegistration } from \"../engine/entity/entity-registration\";\r\nimport { GenericPositionComponent } from \"../engine/pixi-integration/pixi-components/generic-position-component\";\r\n\r\nexport class WeaponEntity implements EntityRegistration{\r\n    create(gameDependencies: GameDependencies, entity: Entity): Entity {\r\n        const pos = <GenericPositionComponent>entity.addComponent(\"position\");\r\n        const anim = <AnimationComponent2>entity.addComponent(\"animation\");\r\n        anim.setSprite(\"arrowsword\");\r\n        pos.width = 32;\r\n        pos.height = 32;\r\n        pos.width *= 2;\r\n        pos.height *= 2;\r\n        pos.pivotX = 1;\r\n        pos.pivotY = 1;\r\n        pos.anchorX = 1;\r\n        pos.anchorY = 1;\r\n        return entity;\r\n    }\r\n}", "import { PlayerEntity } from \"../entities/player-entity\";\r\nimport { VillagerEntity } from \"../entities/villager-entity\";\r\nimport { CropEntity } from \"../entities/crop-entity\";\r\nimport { FirstEntity } from \"../entities/first-entity\";\r\nimport { ProjectileEntity } from \"../entities/projectile-entity\";\r\nimport { Game } from \"../engine/game\";\r\nimport { InventoryItemEntity } from \"../entities/inventory-item-entity\";\r\nimport { ParticleEntity } from \"../entities/particles/particle-entity\";\r\nimport { ParticlesEntity } from \"../entities/particles/particles-entity\";\r\nimport { ClickableEntity } from \"../entities/clickable-entity\";\r\nimport { DeerEntity } from \"../entities/deer-entity\";\r\nimport { UIPanelEntity } from \"../entities/ui-panel-entity\";\r\nimport { WeaponEntity } from \"../entities/weapon-entity\";\r\n\r\n\r\nexport function buildEntities(game:Game):void{\r\n    game.registerEntity(\"player\", new PlayerEntity());\r\n    game.registerEntity(\"villager\", new VillagerEntity());\r\n    game.registerEntity(\"crop\", new CropEntity());\r\n    game.registerEntity(\"first\", new FirstEntity());\r\n    game.registerEntity(\"projectile\", new ProjectileEntity());\r\n    game.registerEntity(\"inventoryItem\", new InventoryItemEntity());\r\n    game.registerEntity(\"particle\", new ParticleEntity());\r\n    game.registerEntity(\"particles\", new ParticlesEntity());\r\n    game.registerEntity(\"click\", new ClickableEntity());\r\n    game.registerEntity(\"deer\", new DeerEntity());\r\n    game.registerEntity(\"uipanel\", new UIPanelEntity());\r\n    game.registerEntity(\"weapon\", new WeaponEntity());\r\n}", "/**\r\n * add sprites to the game here using the game object's spriteManager\r\n */\r\n\r\nimport { SpriteManager } from \"../engine/renderers/sprite-manager\";\r\nimport { Game } from \"../engine/game\";\r\nimport { ISpriteLoader } from \"../engine/renderers/isprite-loader\";\r\n\r\nexport function populateSpriteManager(spriteManager:ISpriteLoader):ISpriteLoader{\r\n    var sm:ISpriteLoader = spriteManager;\r\n    sm.loadSprite(\"blondDress\", \"blond.png\", 4, 8);\r\n    // sm.loadSprite(\"nothing\", \"blond.png\", 100, 100);\r\n    sm.addAnimation(\"blondDress\", \"nothing\", [18], 10);\r\n    \r\n    sm.loadSprite(\"blond\", \"blondWalk.png\", 4, 2);\r\n    sm.addAnimation(\"blond\", \"blondWalk\", [4,5,6,7], 5);\r\n    sm.addAnimation(\"blond\", \"blond\", [4], 5);\r\n   \r\n    sm.loadSprite(\"fantasySprites\", \"fantasysprites.png\", 12,8);\r\n    sm.addAnimation(\"fantasySprites\", \"redHair\", [24,25,26,25], 6);\r\n\r\n    sm.loadSprite(\"crops\", \"crops.png\", 12, 8);\r\n    sm.addAnimation(\"crops\", \"turnip0\", [0]);\r\n    sm.addAnimation(\"crops\", \"turnip1\", [1]);\r\n    sm.addAnimation(\"crops\", \"turnip2\", [2]);\r\n\r\n    sm.addAnimation(\"crops\", \"corn0\", [30]);\r\n    sm.addAnimation(\"crops\", \"corn1\", [31]);\r\n    sm.addAnimation(\"crops\", \"corn2\", [32]);\r\n    \r\n    sm.addAnimation(\"crops\", \"wheat0\", [33]);\r\n    sm.addAnimation(\"crops\", \"wheat1\", [34]);\r\n    sm.addAnimation(\"crops\", \"wheat2\", [35]);\r\n    \r\n    sm.addAnimation(\"crops\", \"pumpkin0\", [54]);\r\n    sm.addAnimation(\"crops\", \"pumpkin1\", [55]);\r\n    sm.addAnimation(\"crops\", \"pumpkin2\", [56]);\r\n\r\n    sm.loadSprite(\"scrops\", \"scrops.png\", 24, 23);\r\n    sm.addAnimation(\"scrops\", \"onion0\", [0]);\r\n    sm.addAnimation(\"scrops\", \"onion1\", [1]);\r\n    sm.addAnimation(\"scrops\", \"onion2\", [2]);\r\n    sm.addAnimation(\"scrops\", \"onion3\", [3]);\r\n    sm.addAnimation(\"scrops\", \"onion4\", [4]);\r\n    sm.addAnimation(\"scrops\", \"onion5\", [5]);\r\n    sm.addAnimation(\"scrops\", \"onion\", [6]);\r\n\r\n    var cn = 24 * 8 + 18;\r\n    sm.addAnimation(\"scrops\", \"corn\", [cn]);\r\n\r\n    sm.loadSprite(\"victorian\",\"victoriansprites.png\", 12, 8);\r\n    sm.addAnimation(\"victorian\", \"bluecloak\", [24]);\r\n    sm.addAnimation(\"victorian\", \"bluecloakwalk\", [24, 25, 26, 25], 5);\r\n    \r\n    cn = 12 * 6;\r\n    sm.addAnimation(\"victorian\", \"grey\", [cn], 5);\r\n    sm.addAnimation(\"victorian\", \"greyWalk\", [cn, cn+1, cn+2, cn+1], 5);\r\n\r\n    cn = 8*4;\r\n    sm.loadSprite(\"fireball\", \"fireball.png\", 8, 8);\r\n    sm.addAnimation(\"fireball\", \"fireball\", [cn, cn+1,cn+2, cn+3, cn+4, cn+5, cn+6,cn+7])\r\n\r\n    sm.loadSprite(\"tilesetcrops\", \"tilesets/submission_daneeklu/tilesets/plants.png\", 9, 6);\r\n\r\n    cn = 6;\r\n    sm.addAnimation(\"tilesetcrops\", \"tomato0\", [cn + 0]);\r\n    sm.addAnimation(\"tilesetcrops\", \"tomato1\", [cn + 9]);\r\n    sm.addAnimation(\"tilesetcrops\", \"tomato2\", [cn + 18]);\r\n    sm.addAnimation(\"tilesetcrops\", \"tomato3\", [cn + 27]);\r\n    sm.addAnimation(\"tilesetcrops\", \"tomato4\", [cn + 36]);\r\n\r\n    sm.loadSprite(\"arm\", \"arm.png\", 1, 1);\r\n    sm.addAnimation(\"arm\", \"arm0\", [1]);\r\n    \r\n    sm.loadSprite(\"swords\", \"sword-7Soul1.png\", 8, 6);\r\n    sm.addAnimation(\"swords\", \"arrowsword\", [1], 30)\r\n    sm.loadSprite(\"dwarves\", \"fantasysprites/DwarfSprites2.png\", 12, 8);\r\n    sm.addAnimation(\"dwarves\", \"dwarfopeneyes\", [35]);\r\n    sm.addAnimation(\"dwarves\", \"dwarfopeneyesWalk\", [33, 35, 34, 35], 5);\r\n    \r\n    sm.loadSprite(\"goblins\", \"fantasysprites/EnemySpriteSheet1.png\", 12, 8);\r\n    sm.addAnimation(\"goblins\", \"speargoblin\", [35]);\r\n    sm.addAnimation(\"goblins\", \"speargoblinWalk\", [33, 35, 34, 35], 5);\r\n\r\n    sm.loadSprite(\"grass\", \"tilesets/submission_daneeklu/tilesets/grass.png\", 3, 6);\r\n    sm.loadSprite(\"soil\", \"tilesets/submission_daneeklu/tilesets/plowed_soil.png\", 3, 6);\r\n\r\n    sm.loadSprite(\"people3\", \"fantasysprites/PeopleSpriteSheet2.png\", 12, 8);\r\n    sm.addAnimation(\"people3\", \"brownpuffgirl\", [80]);\r\n    sm.addAnimation(\"people3\", \"brownpuffgirlwalk\", [79, 80, 81], 5);\r\n\r\n    /*sm.loadSprite(\"victorian2\", \"BearSprites.webp\", 12, 8);\r\n    sm.addAnimation(\"victorian2\", \"nun\", [79], 5);\r\n    sm.addAnimation(\"victorian2\", \"nunwalk\", [78,79,80, 79], 5);*/\r\n\r\n    sm.loadSprite(\"greg\", \"greg.png\", 2,2);\r\n    sm.addAnimation(\"greg\", \"greg\", [0]);\r\n    sm.addAnimation(\"greg\", \"gregwalk\", [1,0,3,0], 10);\r\n\r\n    sm.loadSprite(\"greyaction\", \"greyactions.png\", 2,2);\r\n    sm.addAnimation(\"greyaction\", \"greythrow\", [0,1,2],5)\r\n\r\n    sm.loadSprite(\"deer\", \"deer/deer male calciumtrice.png\", 5, 5);\r\n    sm.addAnimation(\"deer\", \"deer\", [0,1,2,3,4,5,6,7,8],10)\r\n\r\n    sm.loadSpriteWithDimensions(\"woodpanelui\", \"tilesets/submission_daneeklu/ui/scrollsandblocks.png\", 96, 96, 0, 128);\r\n    // sm.loadSpriteWithDimensions(\"woodpanelui\", \"tilesets/submission_daneeklu/ui/scrollsandblocks.png\", 10,10);\r\n    sm.addAnimation(\"woodpanelui\", \"woodpanelsunken\", [0]);\r\n\r\n    return sm;\r\n}\r\n\r\nexport function buildSprites(game:Game):void{\r\n    populateSpriteManager(game.spriteManager);\r\n}", "\r\nexport enum EventType {\r\n    wDown,\r\n    aDown,\r\n    sDown,\r\n    dDown,\r\n\r\n    wUp,\r\n    aUp,\r\n    sUp,\r\n    dUp,\r\n\r\n    spaceDown,\r\n    spaceUp,\r\n\r\n    iUp,\r\n    iDown,\r\n\r\n    pDown,\r\n    pUp,\r\n\r\n    fDown,\r\n    fUp,\r\n\r\n    jUp,\r\n    kUp,\r\n    lUp,\r\n    hUp,\r\n    semicolonUp,\r\n    tildUp,\r\n\r\n    jDown,\r\n    kDown,\r\n    lDown,\r\n    hDown,\r\n    semicolonDown,\r\n    tildDown,\r\n\r\n    mouseUp,\r\n    mouseDown,\r\n\r\n    collision,\r\n    fireProjectile,\r\n\r\n    inflictDamage,\r\n\r\n    changeVelocity,\r\n\r\n    giveItem,\r\n\r\n    dash,\r\n    entityMoved,\r\n    touchStart,\r\n    touchEnd,\r\n    touchMove\r\n}", "import { Component } from '../component/component';\r\nimport { Entity } from '../entity/entity';\r\nimport { Game } from '../game';\r\nimport { EventManager } from '../events/event-manager';\r\nimport { SystemArgs } from './system-args';\r\nimport { EntityUpdateArgs } from '../entity/entity-update-args';\r\n\r\nexport class EntitySystem {\r\n    /**\r\n     * System that can be applied to an entity\r\n     * manipulates one or more components through the component's public interface\r\n     * Do not change components directly through a system\r\n     */\r\n    constructor(game:Game){\r\n        this.game = game;\r\n    }\r\n    targetComponents:Component[];\r\n    game:Game;\r\n    oncePerLoop:(args:SystemArgs)=>void=null;\r\n    apply(args:SystemArgs):void{\r\n        throw \"an entity system did not implement apply method.\";\r\n    };\r\n    applyEvents(entity:Entity, eventManager:EventManager):void{\r\n        throw \"an entity did not implement apply Events\";\r\n    }\r\n\r\n    //static create(game:Game):EntitySystem{\r\n    //    throw \"an entity system has no create method.\"\r\n    //};\r\n}\r\n\r\n", "import { ClickableComponent } from \"../components/clickable-component\";\r\nimport { PositionComponent } from \"../engine/component/components/position/position-component\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\nimport { EventManager } from \"../engine/events/event-manager\";\r\nimport { EventType } from \"../engine/events/EventType\";\r\nimport { GameEvent } from \"../engine/events/game-event\";\r\nimport { Game } from \"../engine/game\";\r\nimport { HtmlRenderer } from \"../engine/renderers/implementations/html/html-renderer\";\r\nimport { EntitySystem } from \"../engine/system/system\";\r\nimport { ClickableEntity } from \"../entities/clickable-entity\";\r\nimport { Renderer } from '../engine/renderers/render';\r\nimport { FirstEntity } from \"../entities/first-entity\";\r\nimport { SystemArgs } from \"../engine/system/system-args\";\r\n\r\nexport class ClickSystem extends EntitySystem{\r\n    constructor(game:Game){\r\n        super(game);\r\n        this.game.eventManager.addListener(EventType.mouseUp, (data)=>{\r\n            this.clicks.push(data);\r\n        });\r\n        this.renderer = game.renderer;\r\n    }\r\n    clicks: GameEvent[] = [];\r\n    clicksToProcessThisLoop: GameEvent[] = [];\r\n    renderer: Renderer;\r\n    private clearClicksAndMoveClicksToProcess(){\r\n        for (let i=0;i<this.clicksToProcessThisLoop.length;i++){\r\n            this.clicksToProcessThisLoop.pop();\r\n        }\r\n        let numClicks = this.clicks.length;\r\n        for (let i=0;i<numClicks;i++){\r\n            this.clicksToProcessThisLoop.push(this.clicks.pop());\r\n        }\r\n    }\r\n\r\n    apply(args:SystemArgs): void {\r\n        const entity = args.entity;\r\n        if(entity instanceof FirstEntity)this.clearClicksAndMoveClicksToProcess();\r\n        let clickable = <ClickableComponent>entity.getComponent(\"click\", true);\r\n        let position = <PositionComponent>entity.getComponent(\"position\", true);\r\n        if (clickable == null)return;\r\n        if (position == null)return;\r\n        this.clicksToProcessThisLoop.forEach((event)=>{\r\n            let x = event?.eventData.x;\r\n            let y = event?.eventData.y;\r\n            if (x == null || y == null)return;\r\n            if (this.pointInPosition(x, y, position)){\r\n                clickable.click();\r\n            }\r\n        });\r\n    }\r\n\r\n    applyEvents(entity: Entity, eventManager: EventManager): void {\r\n        \r\n    }\r\n\r\n    pointInPosition(x:number, y:number, position:PositionComponent):boolean{\r\n        if (position.applyOffsets){\r\n            let offset = this.renderer.getOffset();\r\n            x += offset[0];\r\n            y += offset[1];\r\n        }\r\n        let leftx = position.x - position.width/2;\r\n        let rightx = position.x + position.width/2;\r\n        let topy = position.y - position.height;\r\n        let bottomy = position.y;\r\n        return x > leftx && x < rightx && y > topy && y < bottomy;\r\n    }\r\n\r\n    static create(game:Game):ClickSystem{\r\n        return new ClickSystem(game);\r\n    }\r\n}", "import { EventType } from \"./EventType\";\r\n\r\nexport class GameEvent {\r\n    constructor(eventName:EventType, eventData:{}, componentTarget:string=null){\r\n        this.eventName = eventName;\r\n        this.eventData = eventData;\r\n        this.eventDescription = EventType[eventName];\r\n    }\r\n    eventName:EventType;\r\n    eventDescription:string;\r\n    eventData:any;\r\n    componentTarget:string;\r\n\r\n    static create(eventName:EventType, eventData:{}=null):GameEvent{\r\n        var ge:GameEvent = new GameEvent(eventName, eventData);\r\n        return ge;\r\n    }\r\n}", "import { EntitySystem } from '../engine/system/system';\r\nimport { Entity } from '../engine/entity/entity';\r\nimport { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { FirstEntity } from '../entities/first-entity';\r\nimport { Game } from '../engine/game';\r\nimport { ProjectileEntity } from '../entities/projectile-entity';\r\nimport { GameEvent } from '../engine/events/game-event';\r\nimport { EventType } from '../engine/events/EventType';\r\nimport { SystemArgs } from '../engine/system/system-args';\r\n\r\nexport class CollisionSystem extends EntitySystem{\r\n    constructor(game:Game){\r\n        super(game);\r\n    }\r\n    movingEntities:{[key:number]:Entity}={};\r\n    colliding:{[key:string]:Entity[]}={};\r\n    numCollisions:number=0;\r\n\r\n    private distance(e1:Entity, e2:Entity){\r\n        var p1:PositionComponent = <PositionComponent>e1.getComponent(\"position\");\r\n        var p2:PositionComponent = <PositionComponent>e2.getComponent(\"position\");\r\n        var dx = p2.x - p1.x;\r\n        var dy = p2.y - p1.y;\r\n        return Math.sqrt(dx*dx + dy*dy);\r\n    }\r\n\r\n    private checkCol(e1:Entity, e2:Entity) {\r\n        var distance:number = this.distance(e1, e2);\r\n        var p1:PositionComponent = <PositionComponent>e1.getComponent(\"position\");\r\n        var mask:number = ((p1.width) + (p1.height))/4;\r\n        var collision = distance < mask;\r\n        return collision;\r\n    }\r\n\r\n    private hashCollision(e1:Entity, e2:Entity){\r\n        if(e1.id > e2.id){\r\n            [e1, e2] = [e2, e1];\r\n        }\r\n        return e1.id.toString() + \":\" + e2.id.toString();\r\n    }\r\n\r\n    private addCollision(e1:Entity, e2:Entity){\r\n        var hash:string;\r\n        hash = this.hashCollision(e1, e2);\r\n        if(!(hash in this.colliding)){\r\n            this.colliding[hash] = [e1, e2];\r\n            this.numCollisions++;\r\n        }\r\n    }\r\n\r\n    private removeCollision(e1:Entity, e2:Entity){\r\n        var hash:string = this.hashCollision(e1, e2);\r\n        if (hash in this.colliding){\r\n            delete this.colliding[hash];\r\n            this.numCollisions--;\r\n        }\r\n    }\r\n\r\n    private emitCollision(e1:Entity, e2:Entity):void{\r\n        e1.emit(GameEvent.create(\r\n            EventType.collision,\r\n            e2\r\n        ));\r\n        e2.emit(GameEvent.create(\r\n            EventType.collision,\r\n            e1\r\n        ));\r\n    }\r\n\r\n    private removeMovingEntity(id:number):void{\r\n        delete this.movingEntities[id];\r\n    }\r\n\r\n    apply(args:SystemArgs):void{\r\n        const entity = args.entity;\r\n        if(entity instanceof FirstEntity){\r\n            var collidingEntities:Entity[];\r\n            for(var key in this.colliding){\r\n                collidingEntities = this.colliding[key];\r\n                collision = this.checkCol(collidingEntities[0], collidingEntities[1])\r\n                if(collision && !collidingEntities[0].destroyed && !collidingEntities[1].destroyed){\r\n                    this.emitCollision(collidingEntities[0], collidingEntities[1]);\r\n                } else {\r\n                    this.removeCollision(collidingEntities[0], collidingEntities[1]);\r\n                }\r\n            }\r\n\r\n            //remove destroyed moving entities\r\n            for(let id in this.movingEntities){\r\n                if(this.movingEntities[id].destroyed){\r\n                    this.removeMovingEntity(parseInt(id));\r\n                }\r\n            }\r\n        }\r\n        var position:PositionComponent = <PositionComponent>entity.getComponent(\"position\");\r\n        var collision:boolean;\r\n        var entityTarget:Entity;\r\n        \r\n        //for each moving entity check collision\r\n        for(let id in this.movingEntities){\r\n            entityTarget = this.movingEntities[id];\r\n            collision = this.checkCol(entity, entityTarget);\r\n            if(collision){\r\n                this.addCollision(entity, entityTarget);\r\n            }\r\n        }\r\n\r\n        //add entity to entities to be checked against all other objects\r\n        //this only checks collisions for objects that are moving\r\n        if(position.moved){\r\n            this.movingEntities[entity.id] = entity;\r\n        } else {\r\n            this.removeMovingEntity(entity.id);\r\n        }\r\n        if(entity instanceof ProjectileEntity){\r\n            let position = <PositionComponent>entity.getComponent(\"position\");\r\n        }\r\n    };\r\n\r\n    applyEvents(entity:Entity):void{\r\n    }\r\n\r\n    static create(game:Game):CollisionSystem{\r\n        return new CollisionSystem(game);\r\n    }\r\n}", "import { ComponentFactory } from '../component/component-factory';\r\nimport { Component } from '../component/component';\r\nimport { GameEvent } from '../events/game-event';\r\nimport { EntityUpdateArgs } from './entity-update-args';\r\nimport { GameDependencies } from '../dependencies/game-dependencies';\r\n\r\nexport class Entity {\r\n    constructor(componentFactory:ComponentFactory){\r\n        this.componentFactory = componentFactory;\r\n        Entity.id++\r\n        this.id = Entity.id;\r\n    }\r\n    static id:number=-1;\r\n    id:number=-1;\r\n    components:Component[] = [];\r\n    componentNameToComponent:{[key:string]:Component} = {};\r\n    componentFactory:ComponentFactory;\r\n    targetedEvents:GameEvent[] = [];\r\n    delayedEvents:GameEvent[] = [];\r\n    destroyed:boolean = false;\r\n\r\n    addComponent(componentName:string):Component{\r\n        var component:Component = this.componentFactory.createComponent(componentName, this.id);\r\n        this.componentNameToComponent[component.componentName] = component;\r\n        this.components.push(component);\r\n        return component;\r\n    }\r\n\r\n    getComponent(componentName:string, allowUndefined:boolean=false):Component{\r\n        return this.componentNameToComponent[componentName];\r\n    }\r\n\r\n    emit(event:GameEvent, delayed=false){\r\n        if(delayed){\r\n            this.delayedEvents.push(event);\r\n        } else {\r\n            this.targetedEvents.push(event);\r\n        }\r\n    }\r\n\r\n    update(args:EntityUpdateArgs){\r\n        for(var i:number=0;i<this.components.length;i++){\r\n            this.components[i].update(this, args);\r\n        }\r\n    }\r\n\r\n    handleEvents(events:{[key:string]:GameEvent}):void {};\r\n    public static create(gameDependcies:GameDependencies){\r\n        gameDependcies.checkDependency(gameDependcies.componentFactory);\r\n        const cf = gameDependcies.componentFactory;\r\n        return new Entity(cf);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/*\r\nexport class PlayerEntity extends Entity{\r\n    constructor(componentFactory:ComponentFactory){\r\n        super(componentFactory);\r\n        this.addComponent(\"animation\");\r\n        this.addComponent(\"position\");\r\n    }\r\n    static create():PlayerEntity{\r\n        var entity = new PlayerEntity(ComponentFactory.create());\r\n        return entity;\r\n    }\r\n}*/", "import { EntitySystem } from '../engine/system/system';\r\nimport { Entity } from '../engine/entity/entity';\r\nimport { AnimationComponent2 } from '../components/animation-component';\r\nimport { CropComponent } from '../components/crop-component';\r\nimport { ProjectileEntity } from '../entities/projectile-entity';\r\nimport { PlayerEntity } from '../entities/player-entity';\r\nimport { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { Game } from '../engine/game';\r\nimport { InventoryComponent } from '../components/inventory-component/inventory-component';\r\nimport { GameEvent } from '../engine/events/game-event';\r\nimport { EventType } from '../engine/events/EventType';\r\nimport { CropHarvesterComponent } from '../components/crop-harvester-component';\r\nimport { SystemArgs } from '../engine/system/system-args';\r\n\r\nexport class CropSystem extends EntitySystem {\r\n    constructor(game:Game){\r\n        super(game);\r\n    }\r\n    apply(args:SystemArgs):void{\r\n        const entity = args.entity;\r\n        var a:AnimationComponent2 = <AnimationComponent2>entity.getComponent(\"animation\", true);\r\n        var c:CropComponent = <CropComponent>entity.getComponent(\"crop\", true);\r\n        var p:PositionComponent = <PositionComponent>entity.getComponent(\"position\", true);\r\n        if(a==null||c==null){\r\n            return;\r\n        }\r\n        if (c.timeSinceGrowth == 0 || c.timeSinceGrowth==1){\r\n            a.setSprite(c.growthSprites[c.growthStage]);\r\n        }\r\n    };\r\n\r\n    applyEvents(entity:Entity):void{\r\n        var c:CropComponent = <CropComponent>entity.getComponent(\"crop\", true);\r\n        if(c==null)return;\r\n\r\n        var event:GameEvent;\r\n        for(var i:number=0;i<entity.targetedEvents.length;i++){\r\n            event = entity.targetedEvents[i];\r\n            this.handleEvent(event, entity);\r\n        }\r\n    };\r\n    static create(game:Game):EntitySystem{\r\n        return new CropSystem(game);\r\n    };\r\n\r\n    private handleCollision(event:GameEvent, entity:Entity){\r\n        if(!(event.eventData instanceof Entity)){\r\n            return;\r\n        }\r\n        let collidedEntity:Entity = <Entity>event.eventData;\r\n        let cropHarvester:CropHarvesterComponent;\r\n        try {\r\n            cropHarvester = <CropHarvesterComponent>collidedEntity.getComponent(\"cropHarvester\");\r\n        } catch {\r\n            return;\r\n        }\r\n        if(!cropHarvester.harvesting) {\r\n            return;\r\n        }\r\n\r\n        let crop:CropComponent = <CropComponent>entity.getComponent(\"crop\");\r\n        let playerInventory:InventoryComponent;\r\n        playerInventory = <InventoryComponent>collidedEntity.getComponent(\"inventory\");\r\n        if(crop.isGrown()){\r\n            playerInventory.addItem(crop.cropName, 1);\r\n        }\r\n        this.game.destroy(entity);\r\n\r\n    }\r\n\r\n    private handleEvent(event:GameEvent, entity:Entity):void{\r\n        switch (event.eventName){\r\n            case EventType.collision:\r\n                this.handleCollision(event, entity);\r\n                break;\r\n        }\r\n    }\r\n}", "import { EntitySystem } from '../engine/system/system';\r\nimport { Entity } from '../engine/entity/entity';\r\nimport { Game } from '../engine/game';\r\nimport { HealthComponent } from '../components/health-component';\r\nimport { GameEvent } from '../engine/events/game-event';\r\nimport { EventType } from '../engine/events/EventType';\r\nimport { SystemArgs } from '../engine/system/system-args';\r\nexport class HealthSystem extends EntitySystem{\r\n    constructor(game:Game){\r\n        super(game)\r\n    }\r\n    apply(args:SystemArgs){\r\n\r\n    }\r\n    applyEvents(entity:Entity){\r\n        var health:HealthComponent = <HealthComponent>entity.getComponent(\"health\", true);\r\n        if(health == null)return;\r\n\r\n        var events:GameEvent[] = entity.targetedEvents;\r\n        var event:GameEvent;\r\n        //console.log(entity)\r\n        //console.log(health)\r\n        //console.log(entity.targetedEvents.length)\r\n        for(var i=0;i<events.length;i++){\r\n            event = events[i];\r\n            switch(event.eventName){\r\n                case EventType.inflictDamage:\r\n                    //console.log('health')\r\n                    this.handleDamage(entity, event);\r\n                break;\r\n            }\r\n        }\r\n        entity.targetedEvents = [];\r\n    }\r\n    handleDamage(entity:Entity, event:GameEvent){\r\n        if(event.eventData === null){\r\n            event.eventData = {damage:50};\r\n        }\r\n        var health:HealthComponent = <HealthComponent>entity.getComponent(\"health\", true);\r\n        health.health -= event.eventData.damage;\r\n        if (health.health < 0){\r\n            this.game.destroy(entity);\r\n        }\r\n    }\r\n    static create(game:Game){\r\n        return new HealthSystem(game);\r\n    }\r\n}", "import { EntitySystem } from \"../engine/system/system\";\r\nimport { Game } from \"../engine/game\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\nimport { InventoryComponent } from \"../components/inventory-component/inventory-component\";\r\nimport { InventoryItemEntity } from \"../entities/inventory-item-entity\";\r\nimport { PositionComponent } from \"../engine/component/components/position/position-component\";\r\nimport { TextComponent } from \"../components/text-component/text-component\";\r\nimport { InventoryItem } from \"../components/inventory-component/inventory-item\";\r\nimport { SystemArgs } from \"../engine/system/system-args\";\r\n\r\nexport class InventorySystem extends EntitySystem {\r\n    constructor(game:Game){\r\n        super(game);\r\n    }\r\n    static create(game:Game) {\r\n        return new InventorySystem(game);\r\n    }\r\n\r\n    apply(args:SystemArgs):void{\r\n        const entity = args.entity;\r\n        let inventory:InventoryComponent = <InventoryComponent>entity.getComponent(\"inventory\", true);\r\n        let entityPosition:PositionComponent = <PositionComponent>entity.getComponent(\"position\", true);\r\n        if(inventory == null)return;\r\n        if(entityPosition == null)return;\r\n        if(inventory.inventoryItemEntities.length == 0){\r\n            for(let i:number=0;i<10;i++){\r\n                inventory\r\n                .inventoryItemEntities\r\n                .push(this.game.addEntity(\"inventoryItem\"));\r\n            }\r\n        }\r\n        let itemSlots:InventoryItem[] = inventory.getItems();\r\n        for(let i:number=0;i<inventory.inventoryItemEntities.length;i++){\r\n            let inventoryItem:Entity;\r\n            let itemPosition:PositionComponent;\r\n            inventoryItem = inventory.inventoryItemEntities[i];\r\n            itemPosition = <PositionComponent>inventoryItem.getComponent(\"position\");\r\n            if(itemPosition == null){\r\n                console.log(\"Warning: inventory item lost position component\");\r\n                continue;\r\n            }\r\n            itemPosition.x = entityPosition.x - 4*100 - 50 + i * 100 + entityPosition.vx;\r\n            itemPosition.y = entityPosition.y + 350 + entityPosition.vy;\r\n            itemPosition.x -= entityPosition.vx;\r\n            itemPosition.y -= entityPosition.vy;\r\n            \r\n            let text:TextComponent = <TextComponent>inventoryItem.getComponent(\"text\");\r\n            if(itemSlots[i].itemQuantity != 0 ){\r\n                text.setText(itemSlots[i].itemQuantity.toString());\r\n            }\r\n        }\r\n    }\r\n\r\n    applyEvents(entity:Entity):void{\r\n\r\n    }\r\n}", "export class SpriteId{\r\n    spriteName: string;\r\n    spriteNumber: number;\r\n    static create(spriteName:string, spriteNumber:number){\r\n        const spriteId = new SpriteId();\r\n        spriteId.spriteName = spriteName;\r\n        spriteId.spriteNumber = spriteNumber;\r\n        return spriteId;\r\n    }\r\n}", "import { AnimationComponent2 } from \"../components/animation-component\";\r\nimport { ClickableComponent } from \"../components/clickable-component\";\r\nimport { PositionComponent } from \"../engine/component/components/position/position-component\";\r\nimport { SpriteId } from \"../components/tile-component/sprite-id\";\r\nimport { Tile } from \"../components/tile-component/tile\";\r\nimport { TileComponent } from \"../components/tile-component/tile-component\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\nimport { EventManager } from \"../engine/events/event-manager\";\r\nimport { EventType } from \"../engine/events/EventType\";\r\nimport { GameEvent } from \"../engine/events/game-event\";\r\nimport { Game } from \"../engine/game\";\r\nimport { EntitySystem } from \"../engine/system/system\";\r\nimport { SystemArgs } from \"../engine/system/system-args\";\r\nimport { ClickableEntity } from \"../entities/clickable-entity\";\r\n\r\nexport class MapBuilderSystem extends EntitySystem{\r\n    private clicks:GameEvent[] = [];\r\n    private openBuilder:boolean = false;\r\n    private tilePallete:Entity[] = [];\r\n    private selectedSpriteId: SpriteId = SpriteId.create(\"soil\", 0);\r\n    constructor(game:Game){\r\n        super(game);\r\n        this.game.eventManager.addListener(EventType.mouseUp, (data)=>{\r\n            if(!this.openBuilder)return;\r\n            this.clicks.push(data);\r\n        });\r\n        this.game.eventManager.addListener(EventType.tildUp, (data)=>{\r\n            this.openBuilder = !this.openBuilder;\r\n            this.createPalleteEntities();\r\n        });\r\n    }\r\n    apply(args:SystemArgs): void {\r\n        const entity = args.entity;\r\n        let tileComponent = <TileComponent>entity.getComponent(\"tile\", true);\r\n        if (tileComponent == null) return;\r\n        if (!this.openBuilder)return;\r\n        if (this.clicks.length == 0)return;\r\n        let event = this.clicks.pop();\r\n        let x = event.eventData.x;\r\n        let y = event.eventData.y;\r\n        let tileToChange = this.mouseCoordToTile(x, y, tileComponent);\r\n        const tileCopy = JSON.parse(JSON.stringify(this.selectedSpriteId));\r\n        tileToChange.spriteIds.push(tileCopy);\r\n    }\r\n    createPalleteEntities(){\r\n        let entity = this.game.getById(0);\r\n        let tileComponent = <TileComponent>entity.getComponent(\"tile\", true);\r\n        let tileWidth = tileComponent.tileWidth/1.5;\r\n        const panel = this.game.addEntity('uipanel');\r\n        // const panel = this.game.addEntity(\"villager\");\r\n        const panelPosition = <PositionComponent>panel.getComponent(\"position\");\r\n        panelPosition.width = tileWidth*6;\r\n        panelPosition.height = tileWidth * 11;\r\n        panelPosition.x = panelPosition.width/2;\r\n        panelPosition.y = -panelPosition.height;\r\n        panelPosition.h = 2*panelPosition.height;\r\n\r\n\r\n        for(let i=0;i<tileComponent.tileSpriteNames.length-0;i++){\r\n            for(let i2=0;i2<25;i2++){\r\n                let spriteName = tileComponent.tileSpriteNames[i];\r\n                let tileButton = this.game.addEntity(\"click\");\r\n                this.tilePallete.push(tileButton);\r\n                let animation = <AnimationComponent2>tileButton.getComponent(\"animation\");\r\n                let position = <PositionComponent>tileButton.getComponent(\"position\");\r\n                let clickable = <ClickableComponent>tileButton.getComponent(\"click\");\r\n                animation.setSpriteNumber(spriteName, i2);\r\n                position.width = tileWidth;\r\n                position.height = tileWidth;\r\n                position.x = ((i2%5) * tileWidth) + tileWidth/2;\r\n                position.y = Math.floor(((i*24)+i2)/5) * tileWidth;\r\n                position.x+=panelPosition.width/2 - 5*tileWidth/2;\r\n                position.y+=panelPosition.height/2 - 5*tileWidth/2 - tileWidth;\r\n                position.applyOffsets = false;\r\n                clickable.addListener(()=>{\r\n                    console.log(\"clicking: \"+ spriteName + i2.toString());\r\n                    this.selectedSpriteId.spriteName = spriteName;\r\n                    this.selectedSpriteId.spriteNumber = i2;\r\n                });\r\n            }\r\n        }\r\n    }\r\n    mouseCoordToTile(x:number, y:number, tileComponent:TileComponent){\r\n        let xOffset = this.game.renderer.offset[0];\r\n        let yOffset = this.game.renderer.offset[1];\r\n        return tileComponent.coordToTile(x + xOffset, y + yOffset)[0];\r\n    }\r\n    applyEvents(entity: Entity, eventManager: EventManager): void {\r\n        \r\n    }\r\n    static create(game:Game):MapBuilderSystem{\r\n        return new MapBuilderSystem(game);\r\n    }\r\n}", "import { EntitySystem } from '../engine/system/system';\r\nimport { Entity } from '../engine/entity/entity';\r\nimport { Game } from '../engine/game';\r\nimport { NeuralFightComponent } from '../components/neural-fight-component';\r\nimport { GameEvent } from '../engine/events/game-event';\r\nimport { SystemArgs } from '../engine/system/system-args';\r\n\r\ndeclare var synaptic:any;\r\n\r\nexport class NeuralFightSystem extends EntitySystem{\r\n    constructor(game:Game){\r\n        super(game);\r\n    }\r\n\r\n    static create(game:Game){\r\n        return new NeuralFightSystem(game);\r\n    }\r\n\r\n    apply(args:SystemArgs){\r\n        const entity = args.entity;\r\n        var neural:NeuralFightComponent = <NeuralFightComponent>entity.getComponent(\"neural\", true);\r\n        if(neural == null){\r\n            return;\r\n        }\r\n        //console.log()\r\n    }\r\n\r\n    applyEvents(entity:Entity){\r\n        var events:GameEvent[] = entity.targetedEvents;\r\n        var event:GameEvent;\r\n        for(var i=0;i<events.length;i++){\r\n            event = events[i];\r\n        }\r\n    }\r\n}\r\n", "import { Entity } from \"../engine/entity/entity\";\r\nimport { EventManager } from \"../engine/events/event-manager\";\r\nimport { Game } from \"../engine/game\";\r\nimport { EntitySystem } from \"../engine/system/system\";\r\nimport {ParticleComponent} from \"../components/particle-componet\";\r\nimport { PositionComponent } from \"../engine/component/components/position/position-component\";\r\nimport { SystemArgs } from \"../engine/system/system-args\";\r\n\r\nexport class ParticleSystem extends EntitySystem{\r\n    constructor(game:Game){\r\n        super(game);\r\n    }\r\n\r\n    static create(game:Game){\r\n        return new ParticleSystem(game);\r\n    }\r\n\r\n    addParticles(center: ParticleComponent, centerPosition: PositionComponent){\r\n        if (center.particles.length >= center.targetParticles)return;\r\n        while(center.particles.length < center.targetParticles){\r\n            center.particles.push(this.game.addEntity(\"particle\"));\r\n            let position = <PositionComponent>center.particles[center.particles.length-1].getComponent(\"position\");\r\n            position.x = centerPosition.x - Math.random()*30;\r\n            position.y = centerPosition.y - Math.random()*30;\r\n            // position.vx = Math.random()*.5;\r\n            // position.vy = Math.random()*.5;\r\n        }\r\n    }\r\n\r\n    updateParticles(entity: Entity){\r\n        let particles = <ParticleComponent> entity.getComponent(\"particles\", true);\r\n        let position = <PositionComponent> entity.getComponent(\"position\", true);\r\n        particles.time = (particles.time + 1) % 1000;\r\n        \r\n        for(let i:number = 0; i<particles.particles.length; i++){\r\n            let particle = particles.particles[i];\r\n            let method = particles.paths[i];\r\n            let particlePosition = <PositionComponent>particle.getComponent(\"primitive\");\r\n        }\r\n    }\r\n\r\n    apply(args:SystemArgs): void {\r\n        const entity = args.entity;\r\n        let particles = <ParticleComponent> entity.getComponent(\"particles\", true);\r\n        let position = <PositionComponent> entity.getComponent(\"position\", true);\r\n        if (position == null || particles == null) return;\r\n        this.addParticles(particles, position);\r\n        this.updateParticles(entity);\r\n    }\r\n\r\n    applyEvents(entity: Entity, eventManager: EventManager): void {\r\n        \r\n    }\r\n}", "import { EntitySystem } from \"../engine/system/system\";\r\nimport { Game } from \"../engine/game\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\nimport { PlaceItemComponent } from \"../components/place-item/place-item-component\";\r\nimport { PlaceItemRequest } from \"../components/place-item/place-item-request\";\r\nimport { PositionComponent } from \"../engine/component/components/position/position-component\";\r\nimport { SystemArgs } from \"../engine/system/system-args\";\r\n\r\nexport class PlaceItemSystem extends EntitySystem {\r\n    constructor(game:Game){\r\n        super(game);\r\n    }\r\n\r\n    apply(args:SystemArgs):void {\r\n        const entity = args.entity;\r\n        let placeItem:PlaceItemComponent = <PlaceItemComponent>entity.getComponent(\"placeItem\", true);\r\n        if (placeItem == null)return;\r\n        let requests:PlaceItemRequest[] = placeItem.placeItemRequests\r\n        for(let i:number=0;i<requests.length;i++){\r\n            let placeItemRequest:PlaceItemRequest = requests[i];\r\n            if (placeItemRequest.relative){\r\n                let position:PositionComponent;\r\n                try{\r\n                    position = <PositionComponent>entity.getComponent(\"position\");\r\n                    placeItemRequest.coordinates[0] += position.x;\r\n                    placeItemRequest.coordinates[1] += position.y;\r\n                } catch {}\r\n            }\r\n            this.placeItem(placeItemRequest);\r\n        }\r\n        placeItem.placeItemRequests = [];\r\n    }\r\n\r\n    applyEvents() {\r\n\r\n    }\r\n    private tileSize:number=50;\r\n    private realCoordinatesToTileCoordinates(coordinates:number[]):number[] {\r\n        let tileCoords:number[] = coordinates.map((coordinate) => {\r\n           return (Math.floor(coordinate / this.tileSize)) * this.tileSize;\r\n        });\r\n        return tileCoords;\r\n    }\r\n    private placeItem(placeItemRequest:PlaceItemRequest):Entity{\r\n        let realCoordinates = placeItemRequest.coordinates;\r\n        let tileCoordinates = this.realCoordinatesToTileCoordinates(realCoordinates);\r\n        let x:number = tileCoordinates[0];\r\n        let y:number = tileCoordinates[1];\r\n        let newEntity:Entity;\r\n        newEntity = this.game.addEntity(placeItemRequest.entityName);\r\n        let position:PositionComponent = <PositionComponent>newEntity.getComponent(\"position\", true);\r\n        if(position == null){\r\n            return;\r\n        }\r\n        position.x = x;\r\n        position.y = y;\r\n        placeItemRequest.successCallback(newEntity);\r\n        return newEntity;\r\n    }\r\n    static create(game:Game):PlaceItemSystem {\r\n        return new PlaceItemSystem(game);\r\n    }\r\n\r\n}", "import { EntitySystem } from '../engine/system/system';\r\nimport { Game } from '../engine/game';\r\nimport { Entity } from '../engine/entity/entity';\r\nimport { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { ProjectileComponent } from '../components/projectile-component';\r\nimport { ProjectileEntity } from '../entities/projectile-entity';\r\nimport { GameEvent } from '../engine/events/game-event';\r\nimport { EventType } from '../engine/events/EventType';\r\nimport { PrimitiveComponent } from '../components/primitive-component';\r\nimport { ParticlesEntity } from '../entities/particles/particles-entity';\r\nimport { SystemArgs } from '../engine/system/system-args';\r\n\r\nexport class ProjectileSystem extends EntitySystem {\r\n\r\n    constructor(game:Game){\r\n        super(game);\r\n    }\r\n\r\n    apply(args:SystemArgs){\r\n        const entity = args.entity;\r\n        var position:PositionComponent = <PositionComponent> entity.getComponent(\"position\", true);\r\n        var projectileComponent:ProjectileComponent = <ProjectileComponent>entity.getComponent(\"projectile\", true);\r\n        //console.log(projectileComponent)\r\n        if(position == null)return\r\n        if(projectileComponent == null)return\r\n        projectileComponent.lifeSpan--;\r\n        if (projectileComponent.lifeSpan == 0){\r\n            //position.y -= 50;\r\n            this.game.destroy(entity);\r\n        }\r\n    }\r\n\r\n    fireProjectile(entity:Entity, vx:number=null, vy:number=null){\r\n        let projectile = this.game.addEntity(\"projectile\");\r\n        let projectileComponent:ProjectileComponent = <ProjectileComponent>projectile.getComponent(\"projectile\");\r\n        let projPosition:PositionComponent = <PositionComponent>projectile.getComponent(\"position\");\r\n        \r\n        var position:PositionComponent = <PositionComponent>entity.getComponent(\"position\");\r\n\r\n        projectileComponent.shooterId = entity.id;\r\n        projPosition.x = position.x;\r\n        projPosition.y = position.y;\r\n        \r\n        if(vx !== null && vy !== null){\r\n            projPosition.vx = vx;\r\n            projPosition.vy = vy;\r\n        } else {\r\n            projPosition.vx = position.faceX;\r\n            projPosition.vy = position.faceY;\r\n        }\r\n        projPosition.faceRight = position.faceRight;\r\n    }\r\n\r\n    applyEvents(entity:Entity){\r\n        var events:GameEvent[] = entity.targetedEvents;\r\n        var event:GameEvent;\r\n        for(var i=0;i<events.length;i++){\r\n            event = events[i];\r\n            switch(event.eventName){\r\n                case EventType.fireProjectile:\r\n                    if(event.eventData !== null){\r\n                        this.fireProjectile(entity, event.eventData.vx, event.eventData.vy);\r\n                    } else {\r\n                        this.fireProjectile(entity);\r\n                    }\r\n                break;\r\n                case EventType.collision:\r\n                    var isProj = entity instanceof ProjectileEntity;\r\n                    if(!isProj)break;\r\n                    var projectile:ProjectileComponent = <ProjectileComponent>entity.getComponent(\"projectile\");\r\n                    var isShooter = projectile.shooterId === event.eventData.id;\r\n                    var isSelf = entity.id === event.eventData.id;\r\n                    var isProjectile = event.eventData instanceof ProjectileEntity;\r\n                    var collidedId:number = event.eventData.id;\r\n                    var collided:Entity = this.game.getById(collidedId);\r\n                    var hitParticle = event.eventData instanceof ParticlesEntity;\r\n                    /*console.log(entity)\r\n                    console.log(event.eventData)\r\n                    console.log(isShooter)\r\n                    console.log(\"-\")*/\r\n                    if(!isShooter && !isSelf && !isProjectile && !hitParticle){\r\n                        var ge = GameEvent.create(EventType.inflictDamage)\r\n                        collided.emit(ge, true);\r\n                        //console.log(other.id)\r\n                        //console.log(other.targetedEvents.length);\r\n                        this.game.destroy(entity);\r\n                    }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    static create(game:Game):ProjectileSystem{\r\n        return new ProjectileSystem(game);\r\n    }\r\n}", "import { EntitySystem } from '../engine/system/system';\r\nimport { Entity } from '../engine/entity/entity';\r\nimport { WasdComponent } from '../components/wasd-component';\r\nimport { PositionComponent } from '../engine/component/components/position/position-component';\r\nimport { Game } from '../engine/game';\r\nimport { InventoryComponent } from '../components/inventory-component/inventory-component';\r\nimport { EventManager } from '../engine/events/event-manager';\r\nimport { GameEvent } from '../engine/events/game-event';\r\nimport { EventType } from '../engine/events/EventType';\r\nimport { PlaceItemRequest } from '../components/place-item/place-item-request';\r\nimport { PlaceItemComponent } from '../components/place-item/place-item-component';\r\nimport { CropHarvesterComponent } from '../components/crop-harvester-component';\r\nimport { CropComponent } from '../components/crop-component';\r\nimport { Component } from '../engine/component/component';\r\nimport { TransitionComponent } from '../components/transitions/transition-component';\r\nimport { AnimationComponent } from '../engine/component/components/animation/animation-component';\r\nimport { WeaponComponent } from '../components/weapon-component';\r\nimport { SystemArgs } from '../engine/system/system-args';\r\nimport { GenericPositionComponent } from '../engine/pixi-integration/pixi-components/generic-position-component';\r\n\r\nexport class WasdSystem extends EntitySystem {\r\n    constructor(game:Game){\r\n        super(game);\r\n        game.eventManager.addListener(EventType.touchStart, (e)=>{\r\n            this.move = true;\r\n            this.touchStart.x = e.eventData.x;\r\n            this.touchStart.y = e.eventData.y\r\n        });\r\n        game.eventManager.addListener(EventType.touchEnd, ()=>{\r\n            this.move = false;\r\n            this.stop = true;\r\n        });\r\n    }\r\n    private move:boolean = false;\r\n    private stop:boolean = false;\r\n    private touchStart:{x:number,y:number} = {x:0,y:0};\r\n    static create(game:Game):WasdSystem{\r\n        var wasd:WasdSystem = new WasdSystem(game);\r\n        //eventManager.addListener(EventType.wDown, function(){console.log(\"w down\")});\r\n        return wasd;\r\n    }\r\n\r\n    apply(args:SystemArgs){\r\n        const entity = args.entity;\r\n        const position = <GenericPositionComponent>entity.getComponent(\"position\", true);\r\n        const wasd = <WasdComponent>entity.getComponent(\"wasd\", true);\r\n        if (position == null) return;\r\n        if (wasd == null) return;\r\n        if (this.move){\r\n            if (this.touchStart.x > window.innerWidth/2)position.vx = 10;\r\n            else position.vx = -10;\r\n            if (this.touchStart.y > window.innerHeight/2)position.vy = 10;\r\n            else position.vy = -10;\r\n        }\r\n        if (this.stop){\r\n            position.vx = 0;\r\n            position.vy = 0;\r\n            this.stop = false;\r\n        }\r\n    }\r\n\r\n    applyEvents(entity:Entity, eventManager:EventManager){\r\n        var events:GameEvent[] = eventManager.events;\r\n        var event:GameEvent;\r\n        var wasdComponent:WasdComponent= <WasdComponent>entity.getComponent(\"wasd\", true);\r\n        if (wasdComponent == null)return;\r\n        var position:PositionComponent = <PositionComponent>entity.getComponent(\"position\");\r\n        var animation:AnimationComponent = <AnimationComponent>entity.getComponent(\"animation\");\r\n        var transition:TransitionComponent = <TransitionComponent>entity.getComponent(\"transition\");\r\n        \r\n        var speed:number = wasdComponent.speed;\r\n        var sprite:string = wasdComponent.sprite;\r\n        var walkSprite:string = wasdComponent.walkSprite;\r\n        if (events.length > 0){\r\n            //console.log(events)\r\n        }\r\n        for (var i=0;i<events.length;i++){\r\n            event = events[i];\r\n            //console.log(event)\r\n            // console.log(event.eventName);\r\n            switch(event.eventName){\r\n                case EventType.wDown:\r\n                    if (wasdComponent.dashing)break;\r\n                    animation.setSprite(walkSprite);\r\n                    position.vy = -speed;\r\n                break;\r\n                case EventType.wUp:\r\n                    if (wasdComponent.dashing)break;\r\n                    animation.setSprite(sprite);\r\n                    position.vy = 0;\r\n                break;\r\n                case EventType.aDown:\r\n                    if (wasdComponent.dashing)break;\r\n                    position.faceRight = false;\r\n                    animation.setSprite(walkSprite);\r\n                    position.vx = -speed;\r\n                break;\r\n                case EventType.aUp:\r\n                    if (wasdComponent.dashing)break;\r\n                    animation.setSprite(sprite);\r\n                    position.vx = 0;\r\n                break;\r\n                case EventType.sDown:\r\n                    if (wasdComponent.dashing)break;\r\n                    animation.setSprite(walkSprite);\r\n                    position.vy = speed;\r\n                break;\r\n                case EventType.sUp:\r\n                    if (wasdComponent.dashing)break;\r\n                    animation.setSprite(sprite);\r\n                    position.vy = 0;\r\n                break;\r\n                case EventType.dDown:\r\n                    if (wasdComponent.dashing)break;\r\n                    position.faceRight = true;\r\n                    animation.setSprite(walkSprite);\r\n                    position.vx = speed;\r\n                break;\r\n                case EventType.dUp:\r\n                    if (wasdComponent.dashing)break;\r\n                    animation.setSprite(sprite);\r\n                    position.vx = 0;\r\n                break;\r\n                case EventType.spaceUp:\r\n                    this.dash(wasdComponent, position, animation, transition);\r\n                break;\r\n                case EventType.fUp:\r\n                    let cropHarvester:CropHarvesterComponent;\r\n                    cropHarvester = <CropHarvesterComponent>entity.getComponent(\"cropHarvester\", true);\r\n                    cropHarvester.startHarvest();\r\n                break;\r\n                case EventType.pUp:\r\n                    //console.log(\"p up\")\r\n                    console.log(this.game);\r\n                    const weapon = <WeaponComponent>entity.getComponent(\"weapon\");\r\n                    if (weapon.rotationSpeed == 0){\r\n                        weapon.spin();\r\n                    } else {\r\n                        weapon.sheatheBack();\r\n                    }\r\n                break;\r\n                case EventType.iUp:\r\n                    let inventory:InventoryComponent;\r\n                    inventory = <InventoryComponent>entity.getComponent(\"inventory\", true);\r\n                    inventory.inventoryToString();\r\n                break;\r\n                case EventType.jUp:\r\n                    var ge:GameEvent = GameEvent.create(EventType.fireProjectile);\r\n                    entity.emit(ge);\r\n                break;\r\n            }\r\n        }\r\n        this.updateDashing(entity, wasdComponent, position, animation, transition);\r\n    }\r\n    private updateDashing(entity: Entity, wasdComponent: WasdComponent, position: PositionComponent, animation: AnimationComponent, transition: TransitionComponent){\r\n        if (!wasdComponent.dashing)return;\r\n        if (wasdComponent.dashingTime == Math.floor(wasdComponent.maxDashingTime/2)){\r\n            transition.start(wasdComponent.dashSprite, wasdComponent.dashSpriteNumber, false);\r\n        }\r\n        if (wasdComponent.dashingTime == 0){\r\n            wasdComponent.dashing = false;\r\n            position.vx = 0;\r\n            position.vy = 0;\r\n            position.h = 0;\r\n            return;\r\n        }\r\n        wasdComponent.dashingTime -= 1; \r\n        position.vx = Math.sign(position.faceX) * wasdComponent.dashSpeed;\r\n        position.vy = Math.sign(position.faceY) * wasdComponent.dashSpeed;\r\n    }\r\n    private dash(wasdComponent:WasdComponent, position:PositionComponent, animation:AnimationComponent, transition:TransitionComponent){\r\n        if(wasdComponent.dashing)return;\r\n        wasdComponent.startDashing();\r\n        wasdComponent.dashWidth = position.width;\r\n        wasdComponent.dashHeight = position.height;\r\n        wasdComponent.dashSprite = animation.animationName;\r\n        wasdComponent.dashSpriteNumber = animation.getSpriteNumber();\r\n        transition.start(null, 32);\r\n    }\r\n}", "import { Entity } from './entity';\r\nimport { ComponentFactory } from '../component/component-factory';\r\nimport { Component } from '../component/component';\r\nimport { GameDependencies } from '../dependencies/game-dependencies';\r\nimport { EntityRegistration } from './entity-registration';\r\n\r\nexport class EntityFactory {\r\n    constructor(gameDependencies:GameDependencies){\r\n        gameDependencies.checkDependency(gameDependencies.componentFactory);\r\n        this.componentFactory = gameDependencies.componentFactory;\r\n        this.dependencies = gameDependencies;\r\n    }\r\n    dependencies: GameDependencies;\r\n    entityTypes:{[key:string]:EntityRegistration}={};\r\n    componentFactory:ComponentFactory;\r\n\r\n    registerEntity(componentName:string, EntityClass:EntityRegistration){\r\n        this.entityTypes[componentName] = EntityClass;\r\n    }\r\n\r\n    registerComponent(componentClass:any){\r\n        this.componentFactory.registerComponent(componentClass);\r\n    }\r\n\r\n    create(entityName:string){\r\n        let entityClass = this.entityTypes[entityName];\r\n        const entity = Entity.create(this.dependencies);\r\n        return this.entityTypes[entityName].create(this.dependencies, entity);\r\n    }\r\n\r\n    static create(gameDependencies:GameDependencies):EntityFactory{\r\n        let ef:EntityFactory = new EntityFactory(gameDependencies);\r\n        return ef;\r\n    }\r\n}", "import { EventType } from \"./EventType\";\r\n\r\nexport class KeyEvents\r\n{\r\n    downKey: EventType;\r\n    upKey: EventType;\r\n    keyCode: number;\r\n    constructor(downKey:EventType, upKey:EventType, keyCode:number){\r\n        this.downKey = downKey;\r\n        this.upKey = upKey;\r\n        this.keyCode = keyCode;\r\n    }\r\n    public static create(controlEvent:EventType, controlReleaseEvent:EventType, controlKeyNumber:number){\r\n        return new KeyEvents(controlEvent, controlReleaseEvent, controlKeyNumber);\r\n    }\r\n}\r\n\r\nfunction getKeyEvents()\r\n{\r\n    let results = []\r\n    results.push(KeyEvents.create(EventType.wDown, EventType.wUp, 87));\r\n    results.push(KeyEvents.create(EventType.aDown, EventType.aUp, 65));\r\n    results.push(KeyEvents.create(EventType.sDown, EventType.sUp, 83));\r\n    results.push(KeyEvents.create(EventType.dDown, EventType.dUp, 68));\r\n    results.push(KeyEvents.create(EventType.spaceDown, EventType.spaceUp, 32));\r\n    results.push(KeyEvents.create(EventType.pDown, EventType.pUp, 80));\r\n    results.push(KeyEvents.create(EventType.iDown, EventType.iUp, 73));\r\n    results.push(KeyEvents.create(EventType.fDown, EventType.fUp, 70));\r\n    results.push(KeyEvents.create(EventType.jDown, EventType.jUp, 74));\r\n    results.push(KeyEvents.create(EventType.kDown, EventType.kUp, 75));\r\n    results.push(KeyEvents.create(EventType.lDown, EventType.lUp, 76));\r\n    results.push(KeyEvents.create(EventType.semicolonDown, EventType.semicolonDown, 186));\r\n    results.push(KeyEvents.create(EventType.tildDown, EventType.tildUp, 192));\r\n    return results;\r\n}\r\n\r\nexport let keyEvents = getKeyEvents();", "import { GameEvent } from \"./game-event\";\r\nimport { EventType } from \"./EventType\";\r\nimport { keyEvents } from \"./key-events\";\r\n\r\nexport class EventManager {\r\n    constructor(){\r\n        this.keys = this.createKeyListener();\r\n    }\r\n\r\n    keys:boolean[] = Array(1000);\r\n    keysReleased:boolean[] = Array(1000);\r\n    //events:{[key:string]:GameEvent[]} = {};\r\n    events:GameEvent[] = [];\r\n    callbacks:{[key:string]:((event:GameEvent)=>void)[]} = {};\r\n    touch:any = {}\r\n\r\n\r\n    createKeyListener(){\r\n        var keys:boolean[] = Array(1000);\r\n        window.addEventListener(\"keydown\", function(e){\r\n            keys[e.keyCode] = true;\r\n        })\r\n        window.addEventListener(\"keyup\", function(e){\r\n            keys[e.keyCode] = false;\r\n            //console.log(e.keyCode)\r\n        })\r\n        let canvas = document.getElementById(\"canvas\");\r\n        window.addEventListener(\"mouseup\", (e)=>{\r\n            const rect = canvas.getBoundingClientRect()\r\n            const x = e.clientX - rect.left\r\n            const y = e.clientY - rect.top\r\n            console.log(\"x: \" + x + \" y: \" + y)\r\n            this.emit(EventType.mouseUp, {x,y});\r\n        })\r\n        window.addEventListener(\"touchstart\", (e)=>{\r\n            const rect = canvas.getBoundingClientRect()\r\n            const x = e.touches[0].clientX - rect.left\r\n            const y = e.touches[0].clientY - rect.top\r\n            this.emit(EventType.touchStart,{\r\n                x:x,\r\n                y:y\r\n            });\r\n        });\r\n        window.addEventListener(\"touchend\", (e)=>{\r\n            const rect = canvas.getBoundingClientRect()\r\n            const x = e.changedTouches[0].clientX - rect.left\r\n            const y = e.changedTouches[0].clientY - rect.top\r\n            this.emit(EventType.touchEnd,{\r\n                x:x,\r\n                y:y\r\n            });\r\n        });\r\n        window.addEventListener(\"touchmove\", (e)=>{\r\n            const rect = canvas.getBoundingClientRect()\r\n            const x = e.touches[0].clientX - rect.left\r\n            const y = e.touches[0].clientY - rect.top\r\n            this.emit(EventType.touchMove,{\r\n                x:x,\r\n                y:y\r\n            });\r\n\r\n        });\r\n        return keys;\r\n    }\r\n\r\n    update(){\r\n        // this.events = [];\r\n        for(var i:number=0;i<keyEvents.length;i++){\r\n            let keyEvent = keyEvents[i];\r\n            if(this.keys[keyEvent.keyCode]){\r\n                //emit key down event\r\n                this.emit(keyEvent.downKey);\r\n                this.keysReleased[keyEvent.keyCode] = true;\r\n            } else {\r\n                if(this.keysReleased[keyEvent.keyCode]){\r\n                    //emit key up event\r\n                    this.emit(keyEvent.upKey);\r\n                    this.keysReleased[keyEvent.keyCode] = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    emit(eventName:EventType, eventData:{}={}){\r\n        var ge:GameEvent = new GameEvent(eventName, eventData);\r\n        this.events.push(ge);\r\n    }\r\n\r\n    fireCallbacks(){\r\n        //used with addListener\r\n        //unused currently\r\n        var events:GameEvent[];\r\n        var callbacks:((event:GameEvent)=>void)[];\r\n        for (let i=0;i<this.events.length;i++){\r\n            let event = this.events[i];\r\n            //get listener callbacks listening to this event\r\n            if (!(event.eventName in this.callbacks)) continue;\r\n            callbacks = this.callbacks[event.eventName];\r\n            callbacks.forEach((callback)=>{\r\n                callback(event);\r\n            })\r\n        }\r\n        this.events = [];\r\n    }\r\n\r\n    addListener(eventName:EventType, callback:(event:GameEvent)=>void){\r\n        //used with fireCallbacks\r\n        //unused currently\r\n        if (!(eventName in this.callbacks)){\r\n            this.callbacks[eventName] = [];\r\n        }\r\n        this.callbacks[eventName].push(callback);\r\n    }\r\n\r\n    \r\n    createEvent(eventName:EventType){\r\n        if(eventName in this.events)return;\r\n        this.events = [];\r\n        this.callbacks[eventName] = [];\r\n    }\r\n\r\n    static create(){\r\n        var em:EventManager = new EventManager();\r\n        em.createEvent(EventType.wDown);\r\n        em.createEvent(EventType.aDown);\r\n        em.createEvent(EventType.sDown);\r\n        em.createEvent(EventType.dDown);\r\n        return em;\r\n    }\r\n}", "export class SpriteAnimation{\r\n    constructor(animationName:string, spriteName:string, spriteNumbers:number[], delay:number){\r\n        this.spriteNumbers = spriteNumbers;\r\n        this.animationName = animationName;\r\n        this.spriteName = spriteName;\r\n        this.delay = delay;\r\n    }\r\n    spriteNumbers:number[];\r\n    animationName:string;\r\n    spriteName:string;\r\n    delay:number;\r\n\r\n    static create(animationName:string, spriteName:string, spriteNumbers:number[], delay:number=1){\r\n        var sa:SpriteAnimation = new SpriteAnimation(\r\n            animationName,\r\n            spriteName,\r\n            spriteNumbers,\r\n            delay\r\n        );\r\n        return sa;\r\n    }\r\n}", "export class HtmlCanvas\r\n{\r\n    constructor(canvas: HTMLCanvasElement)\r\n    {\r\n        this.canvas = canvas;\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n    }\r\n    canvas:HTMLCanvasElement;\r\n    ctx:CanvasRenderingContext2D;\r\n    private static canvas: HtmlCanvas = null;\r\n    public static createSingleton()\r\n    {\r\n        if (canvas != null) return HtmlCanvas.canvas;\r\n        var canvas:HTMLCanvasElement = <HTMLCanvasElement>document.getElementById(\"canvas\");\r\n        if (canvas === null){\r\n            canvas = document.createElement(\"canvas\");\r\n        }\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n        canvas.style.margin = \"0\";\r\n        canvas.style.padding = \"0\";\r\n        canvas.style.overflow = \"hidden\";\r\n        canvas.style.position = \"fixed\";\r\n        canvas.style.top = \"0px\";\r\n        canvas.style.left = \"0px\";\r\n        HtmlCanvas.canvas = new HtmlCanvas(canvas);\r\n        return HtmlCanvas.canvas;\r\n    }\r\n}", "import { Sprite } from \"../../sprite\";\r\nimport { HtmlCanvas } from \"./html-canvas\";\r\n\r\nexport class HtmlRectSprite implements Sprite {\r\n    constructor(spriteImg:HTMLImageElement, widthImgs:number, heightImgs:number, offsetx:number=0, offsety:number=0, frameWidth:number=0, frameHeight:number=0){\r\n        this.sprite = spriteImg;\r\n        this.widthImgs = widthImgs;\r\n        this.heightImgs = heightImgs;\r\n        this.offsetx = offsetx;\r\n        this.offsety = offsety;\r\n        this.frameWidth = frameWidth;\r\n        this.frameHeight = frameHeight;\r\n        this.canvas = HtmlCanvas.createSingleton();\r\n        this.ctx = HtmlCanvas.createSingleton().ctx;\r\n    }\r\n    getRGBs(width:number, height:number, spriteNumber: number): ImageData{\r\n        let fc = this.frameCoords(spriteNumber);\r\n        let canvas = document.createElement('canvas');\r\n        let context = canvas.getContext('2d');\r\n        if (width == null || height == null)\r\n        {\r\n            canvas.width = this.frameWidth;\r\n            canvas.height = this.frameHeight;\r\n        } else {\r\n            canvas.width = width;\r\n            canvas.height = height;\r\n        }\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n        context.drawImage(this.sprite, fc[0], fc[1], this.frameWidth,\r\n                          this.frameHeight, 0, 0, canvas.width, canvas.height);\r\n        let pixelData = context.getImageData(0, 0, canvas.width, canvas.height);\r\n        return pixelData;\r\n    }\r\n    drawImage(spriteNumber: number, x: number, y: number, width: number, height: number): void {\r\n        let fc = this.frameCoords(spriteNumber);\r\n        this.ctx.drawImage(this.sprite, fc[0], fc[1], this.frameWidth,\r\n                          this.frameHeight, x, y, width, height);\r\n    }\r\n    ctx: CanvasRenderingContext2D;\r\n    static spriteDir:string = \"../sprites/\";\r\n    widthImgs:number;\r\n    heightImgs:number;\r\n    frameWidth:number=1;\r\n    frameHeight:number=1;\r\n    sprite:HTMLImageElement;\r\n    canvas: HtmlCanvas;\r\n    loaded: boolean = false;\r\n    offsetx: number;\r\n    offsety: number;\r\n\r\n    private setFrameDimensions(sprite:HtmlRectSprite){\r\n        return function(){\r\n            sprite.frameWidth = sprite.sprite.width/sprite.widthImgs;\r\n            sprite.frameHeight = sprite.sprite.height/sprite.heightImgs;\r\n            sprite.loaded = true;\r\n        }\r\n    }\r\n\r\n    public frameCoords(spriteNum:number){\r\n        // var frameWidth:number = this.sprite.width/this.widthImgs;\r\n        // var frameHeight:number = this.sprite.height/this.heightImgs;\r\n        var frameWidth:number = this.frameWidth;\r\n        var frameHeight:number = this.frameHeight;\r\n        const widthImgs = Math.floor(this.sprite.width/frameWidth);\r\n        var framex:number = spriteNum%widthImgs * frameWidth;\r\n        var framey:number = Math.floor(spriteNum/widthImgs) * frameHeight;\r\n        framex += this.offsetx;\r\n        framey += this.offsety;\r\n        return [framex, framey];\r\n    }\r\n\r\n    public static create(fileName:string, widthImgs:number, heightImgs:number, offsetx:number=0, offsety:number=0){\r\n        var spriteImg:HTMLImageElement = new Image();\r\n        spriteImg.src = this.spriteDir + fileName;\r\n        const newSprite = new HtmlRectSprite(spriteImg, widthImgs, heightImgs, offsetx, offsety);\r\n        spriteImg.onload = newSprite.setFrameDimensions(newSprite);\r\n        return newSprite;\r\n    }\r\n\r\n    public static createWithDimensions(fileName:string, frameWidth:number, frameHeight:number, offsetx:number=0, offsety:number=0){\r\n        var spriteImg:HTMLImageElement = new Image();\r\n        spriteImg.src = this.spriteDir + fileName;\r\n        const newSprite = new HtmlRectSprite(spriteImg, 0, 0, offsetx, offsety, frameWidth, frameHeight);\r\n        return newSprite;\r\n    }\r\n}", "import { HtmlCanvas } from \"./html-canvas\";\r\nimport {Sprite} from \"../../sprite\";\r\nexport class HtmlSprite implements Sprite {\r\n    constructor(fileName:string){\r\n        var spriteImg:HTMLImageElement = new Image();\r\n        spriteImg.src = this.spriteDir + fileName;\r\n        this.sprite = spriteImg;\r\n        spriteImg.onload = this.setFrameDimensions(this);\r\n        this.ctx = HtmlCanvas.createSingleton().ctx;\r\n    }\r\n    loaded: boolean;\r\n    getRGBs(spriteNumber: number): ImageData {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    spriteDir:string = \"../sprites/\";\r\n    sprite:HTMLImageElement;\r\n    ctx:CanvasRenderingContext2D;\r\n    frameCoordsCalculated: number[][] = []\r\n    \r\n    drawImage(spriteNumber: number, x: number, y: number, width: number, height: number): void {\r\n        let fc = this.frameCoords(spriteNumber);\r\n        // this.ctx.drawImage(this.sprite, fc[0], fc[1], this.frameWidth,\r\n                        //   this.frameHeight, x, y, width, height);\r\n    }\r\n\r\n    private setFrameDimensions(sprite:HtmlSprite){\r\n        return function(){\r\n            let canvas = document.createElement('canvas');\r\n            let context = canvas.getContext('2d');\r\n            canvas.width = sprite.sprite.width;\r\n            canvas.height = sprite.sprite.height;\r\n            context.drawImage(sprite.sprite, 0, 0 );\r\n            let pixelData = context.getImageData(0, 0, sprite.sprite.width, sprite.sprite.height);\r\n            let averages = []\r\n            for(let i=0;i<pixelData.data.length;i+=4){\r\n                let average = (pixelData.data[i] + pixelData.data[i+1] + pixelData.data[i+2] + pixelData.data[i+3])/3;\r\n                averages.push(average);\r\n            }\r\n            let frames = sprite.findFrames(averages, pixelData.width, pixelData.height);\r\n            frames.forEach(f => {\r\n                f.sort();\r\n                let highestY = Math.floor(f[0]/pixelData.width);\r\n                let lowestY = Math.floor(f[f.length-1]/pixelData.width);\r\n                let height = lowestY - highestY;\r\n            });\r\n        }\r\n    }\r\n\r\n    findFrames(averagedPixelData: number[], width: number, height:number): number[][]{\r\n        let stack: number[] = [];\r\n        let claimed = new Set();\r\n        let results: number[][] = []\r\n        for(let i=0;i<averagedPixelData.length;i++)\r\n        {\r\n            if (claimed.has(i)) continue;\r\n            let average = averagedPixelData[i];\r\n            if (average <= 0)continue;\r\n            stack.push(i);\r\n            let nextResult:number[] = [i];\r\n            while (stack.length > 0){\r\n                if (stack.length > 60000) break;\r\n                let pixelIndex = stack.pop();\r\n                let average = averagedPixelData[pixelIndex];\r\n                if (pixelIndex >= averagedPixelData.length)continue;\r\n                if (pixelIndex < 0)continue;\r\n                if (average <= 0)continue;\r\n                if (claimed.has(pixelIndex)) continue;\r\n                claimed.add(pixelIndex);\r\n                nextResult.push(pixelIndex);\r\n                stack.push(pixelIndex + 1);\r\n                stack.push(pixelIndex - 1);\r\n                stack.push(pixelIndex + width);\r\n                stack.push(pixelIndex - width);\r\n            }\r\n            results.push(nextResult);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    public frameCoords(spriteNum:number){\r\n        return this.frameCoordsCalculated[spriteNum];\r\n    }\r\n    public static create(fileName: string){\r\n        return new HtmlSprite(fileName);\r\n    }\r\n}", "import { SpriteAnimation } from \"./sprite-animation\";\r\nimport { HtmlRectSprite } from \"./implementations/html/html-rect-sprite\";\r\nimport { HtmlSprite } from \"./implementations/html/html-sprite\";\r\nimport { Sprite } from \"./sprite\";\r\nimport { ISpriteLoader } from \"./isprite-loader\";\r\n\r\nexport class SpriteManager implements ISpriteLoader {\r\n    constructor(spriteDir:string=\"../sprites/\"){}\r\n    onLoad(callback?: () => void): void {\r\n    }\r\n    sprites:{ [key: string]: Sprite} = {};//sprite name to sprite\r\n    animations:{ [key: string]: SpriteAnimation} = {};//animation name to animation\r\n    RGBs: {[key:string]: ImageData}= {};\r\n    \r\n    createSprite(fileName:string, widthImgs:number, heightImgs:number, offsetx:number, offsety:number):HtmlRectSprite{\r\n        return HtmlRectSprite.create(fileName, widthImgs, heightImgs, offsetx, offsety);\r\n    }\r\n\r\n    addSprite(spriteName:string, sprite:Sprite){\r\n        this.sprites[spriteName] = sprite;\r\n    }\r\n    getSprite(spriteName:string):Sprite{\r\n        if(! (spriteName in this.sprites)){\r\n            throw \"sprite \"+spriteName+\" does not exist\";\r\n        }\r\n        return this.sprites[spriteName];\r\n    }\r\n\r\n    loadSprite(spriteName:string, fileName:string, widthImgs:number, heightImgs:number, offsetx:number=0, offsety:number=0){\r\n        var sprite = this.createSprite(fileName, widthImgs, heightImgs, offsetx, offsety);\r\n        this.addSprite(spriteName, sprite);\r\n    }\r\n\r\n    loadSpriteWithDimensions(spriteName:string, fileName:string, frameWidth:number, frameHeight:number, offsetx:number=0, offsety:number=0){\r\n        const sprite = HtmlRectSprite.createWithDimensions(fileName, frameWidth, frameHeight, offsetx, offsety);\r\n        this.addSprite(spriteName, sprite);\r\n    }\r\n\r\n    loadSpriteOverlapping(spriteName:string, fileName:string){\r\n        let sprite = HtmlSprite.create(fileName);\r\n    }\r\n\r\n    addAnimation(spriteName:string, animationName:string, spriteNumbers:Array<number>, delay=1){\r\n        var sa:SpriteAnimation = SpriteAnimation.create(animationName, spriteName, spriteNumbers, delay);\r\n        if (!(spriteName in this.sprites)){\r\n            throw \"error adding animation \"\r\n            + animationName \r\n            + \". spriteName \"\r\n            + spriteName\r\n            + \"doesn't exist. sprites must be added through addSprite method first\";\r\n        }\r\n        this.animations[animationName] = sa;\r\n    }\r\n\r\n    getAnimation(animationName:string):SpriteAnimation{\r\n        if(animationName in this.animations){\r\n            return this.animations[animationName];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    getRGBs(animationName:string=null, spriteNumber:number = 0, width:number=null, height:number=null):ImageData{\r\n        let key = animationName + spriteNumber;\r\n        if (key in this.RGBs) return this.RGBs[key];\r\n        let animation = this.animations[animationName];\r\n        let name = animation.spriteName;\r\n        let sprite = this.sprites[name];\r\n        if (!sprite.loaded){\r\n            return sprite.getRGBs(width, height, spriteNumber);\r\n        }\r\n        this.RGBs[key] = sprite.getRGBs(width, height, spriteNumber);\r\n        return this.RGBs[key];\r\n    }\r\n\r\n    static create():SpriteManager{\r\n        return new SpriteManager();\r\n    }\r\n    private static spriteManager:SpriteManager = null;\r\n    static singeltonCreate():SpriteManager{\r\n        if (SpriteManager.spriteManager != null) return SpriteManager.spriteManager;\r\n        SpriteManager.spriteManager = new SpriteManager();\r\n        return SpriteManager.spriteManager;\r\n    }\r\n}", "import { SpriteManager} from \"../../sprite-manager\";\r\nimport { HtmlRectSprite } from \"./html-rect-sprite\";\r\nimport { Renderer } from \"../../render\";\r\nimport { RenderOptions } from \"../../render-options\";\r\nimport { SpriteAnimation } from \"../../sprite-animation\";\r\nimport { HtmlCanvas } from \"./html-canvas\";\r\nimport { Sprite } from \"../../sprite\";\r\n\r\nexport class HtmlRenderer implements Renderer {\r\n    canvas:HTMLCanvasElement;\r\n    ctx:CanvasRenderingContext2D;\r\n    public readonly offset:number[];\r\n    public spriteManager:SpriteManager;\r\n    // offScreenCanvas: OffscreenCanvas;\r\n    constructor(context:HtmlCanvas, spriteManager:SpriteManager){\r\n        this.canvas = context.canvas;\r\n        // this.offScreenCanvas = new OffscreenCanvas(this.canvas.width, this.canvas.height);\r\n        this.ctx = context.ctx;\r\n        this.spriteManager = spriteManager;\r\n        this.offset = [0, 0];\r\n        this.ctx.font = \"30px Arial\";\r\n    }\r\n    getOffset(): number[] {\r\n        return this.offset;\r\n    }\r\n    \r\n    setOffset(offset:number[]){\r\n        if(offset.length>2){\r\n            console.log(\"warning incorrect number of offsets\");\r\n            return;\r\n        }\r\n        this.offset[0] = offset[0] - this.canvas.width/2;\r\n        this.offset[1] = offset[1] - this.canvas.height/2;\r\n    }\r\n\r\n    cbox(){\r\n        this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);\r\n        // this.ctx.fillStyle = \"#00ffff\";\r\n        // this.ctx.fillStyle = \"#7CFC00\";\r\n        // this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height);\r\n    }\r\n    \r\n    spriteFilter(filter: ImageData, x: number, y: number, width: number, height: number, spriteNumber: number, options: RenderOptions): void {\r\n        let flip:boolean = options.flip;\r\n        // let sprite:Sprite = <Sprite>this.spriteManager.getSprite(spriteName);\r\n        x = x - width/2;//draw at middle of sprite\r\n        y = y - height;//draw at bottom of sprite\r\n        if (options.applyOffsets){\r\n            x -= this.offset[0]; //offset all drawings to the left\r\n            y -= this.offset[1];\r\n        }\r\n        let flipTranslation:number = 2*(x+width/2);\r\n        if(flip){\r\n            this.ctx.translate(flipTranslation, 0);\r\n            this.ctx.scale(-1,1);\r\n        }\r\n        if(options.rotate){\r\n            this.ctx.rotate(options.rotate);\r\n        }\r\n\r\n        let canvas = document.createElement(\"canvas\");\r\n        canvas.width = filter.width;\r\n        canvas.height = filter.height;\r\n        let context = canvas.getContext(\"2d\");\r\n        context.putImageData(filter, 0, 0);\r\n        this.ctx.drawImage(canvas, 0, 0, filter.width, filter.height, x, y , width, height);\r\n\r\n        if(options.rotate){\r\n            this.ctx.rotate(-options.rotate);\r\n        }\r\n        if (flip){\r\n            this.ctx.scale(-1,1);\r\n            this.ctx.translate(-flipTranslation,0);\r\n        }\r\n    }\r\n\r\n    sprite(spriteName:string, x:number, y:number, width:number, height:number, spriteNumber:number, options:RenderOptions):void{\r\n        let flip:boolean = options.flip;\r\n        let sprite:Sprite = <Sprite>this.spriteManager.getSprite(spriteName);\r\n        let fc = sprite.frameCoords(spriteNumber);\r\n        x = x - width/2;//draw at middle of sprite\r\n        y = y - height;//draw at bottom of sprite\r\n        if (options.applyOffsets){\r\n            x -= this.offset[0]; //offset all drawings to the left\r\n            y -= this.offset[1];\r\n        }\r\n        let flipTranslation:number = 2*(x+width/2);\r\n        if(flip){\r\n            this.ctx.translate(flipTranslation, 0);\r\n            this.ctx.scale(-1,1);\r\n        }\r\n        if(options.rotate){\r\n            this.ctx.rotate(options.rotate);\r\n        }\r\n        if (x+width > -100 && x < this.canvas.width && y+height > -100 && (y-height)<this.canvas.height)\r\n        {\r\n            sprite.drawImage(spriteNumber, x, y, width, height);\r\n        }\r\n\r\n        if(options.rotate){\r\n            this.ctx.rotate(-options.rotate);\r\n        }\r\n        if (flip){\r\n            this.ctx.scale(-1,1);\r\n            this.ctx.translate(-flipTranslation,0);\r\n        }\r\n    }\r\n\r\n    text(text:string, x:number, y:number, size:number=10):void{\r\n        x -= this.offset[0]; //offset all drawings to the left\r\n        y -= this.offset[1];\r\n        this.ctx.fillText(text, x, y);\r\n    }\r\n\r\n    circle(x: number, y: number, r: number): void {\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = \"#690055\";\r\n        // this.ctx.fillStyle = \"black\";\r\n        this.ctx.globalAlpha = .6;\r\n        this.ctx.arc(x - this.offset[0], y - this.offset[1], r*2, 0, 2 * Math.PI);\r\n        this.ctx.fill();\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = \"black\";\r\n        // this.ctx.fillStyle = \"#690055\";\r\n        this.ctx.globalAlpha = 1;\r\n        this.ctx.arc(x - this.offset[0], y - this.offset[1], r*1, 0, 2 * Math.PI);\r\n        this.ctx.fill();\r\n        this.ctx.globalAlpha = 1;\r\n        // this.ctx.stroke();\r\n    }\r\n\r\n    line(x1: number, y1: number, x2: number, y2: number): void {\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x1, y1);\r\n        this.ctx.lineTo(x2, y2);\r\n        this.ctx.stroke();\r\n    }\r\n\r\n    static create():HtmlRenderer{\r\n        let canvas = HtmlCanvas.createSingleton();\r\n        var spriteManager:SpriteManager = SpriteManager.singeltonCreate();\r\n        //var spriteManager:SpriteManager = createSpriteManager();\r\n        return new HtmlRenderer(canvas, spriteManager);\r\n    }\r\n}", "import { Entity } from \"../entity/entity\";\r\nimport { EventManager } from \"../events/event-manager\";\r\n\r\nexport class SystemArgs{\r\n    entity:Entity;\r\n    eventManager:EventManager;\r\n    delta:number;\r\n    fullFramesPassed:number;\r\n}", "export class EntityUpdateArgs{\r\n    delta: number;\r\n    fullFramePassed:number;\r\n}", "import { ComponentFactory } from \"../component/component-factory\";\r\nimport { EntityFactory } from \"../entity/entity-factory\";\r\nimport { EventManager } from \"../events/event-manager\";\r\nimport { Game } from \"../game\";\r\nimport { IEngineCreator } from \"../pixi-integration/sprite-dependency/iengine-creator\";\r\nimport { ISpriteLoader } from \"../renderers/isprite-loader\";\r\nimport { Renderer } from \"../renderers/render\";\r\nimport { ICameras } from \"./icameras\";\r\n\r\nexport class GameDependencies {\r\n     engineCreator:IEngineCreator = null;// only necessary if using an engine like phaser/pixi\r\n     imgMetaData: {[key:string]: {width:number, height:number}} = null; \r\n     componentFactory: ComponentFactory = null;\r\n     entityFactory:EntityFactory = null;\r\n     renderer:Renderer = null;\r\n     eventManager:EventManager = null;\r\n     spriteManager:ISpriteLoader = null;\r\n     cameras:ICameras = null;\r\n     game:Game;\r\n     checkDependency(gameDependency:any){\r\n          if (gameDependency == null){\r\n               console.error(`Dependency was requested but it was null`);\r\n          }\r\n     }\r\n}", "import { GameDependencies } from \"../dependencies/game-dependencies\";\r\nimport { Entity } from \"../entity/entity\";\r\nimport { EntityUpdateArgs } from \"../entity/entity-update-args\";\r\nimport { Game } from \"../game\";\r\n\r\nexport abstract class Component {\r\n    constructor(componentName:string){\r\n        this.componentName = componentName;\r\n    }\r\n    componentName:string;\r\n    abstract update(entity:Entity, args:EntityUpdateArgs):void;\r\n    static create(game:GameDependencies, entityId:string){\r\n        throw \"Component must implement static create function\";\r\n    };\r\n    static createWithGame(game:Game, entityId:string){\r\n    }\r\n}", "import { GameDependencies } from \"../dependencies/game-dependencies\";\r\nimport { Component } from \"./component\";\r\n\r\nexport class ComponentFactory {\r\n    static dependencies: GameDependencies;\r\n    constructor(gameDependencies:GameDependencies){\r\n        this.gameDependencies = gameDependencies;\r\n    }\r\n    gameDependencies:GameDependencies;\r\n    componentTypes:{[key:string]:any}={};\r\n    registerComponent(ComponentClass:any){\r\n        if (!(ComponentClass.prototype instanceof Component)){\r\n            console.log(\"component \" + obj.componentName + \" must extend class Component to be registered\");\r\n        }\r\n        if (ComponentClass.componentName != null){\r\n            this.componentTypes[ComponentClass.componentName] = ComponentClass;\r\n            return;\r\n        }\r\n        var obj = ComponentClass.create(this.gameDependencies);\r\n        this.componentTypes[obj.componentName] = ComponentClass;\r\n    }\r\n\r\n    createComponent(componentName:string, entityId:number){\r\n        if (!(componentName in this.componentTypes)){\r\n            throw \"component \"+componentName+\" not registered in componentFactory\";\r\n        }\r\n        return this.componentTypes[componentName].create(this.gameDependencies, entityId);\r\n    }\r\n\r\n    static create(gameDependencies:GameDependencies):ComponentFactory{\r\n        this.dependencies = gameDependencies;\r\n        var cf:ComponentFactory = new ComponentFactory(gameDependencies);\r\n        return cf;\r\n    }\r\n}", "import { IPositionComponent } from \"../component/components/position/iposition-component\";\r\nimport { PositionComponent } from \"../component/components/position/position-component\";\r\nimport { GenericPositionComponent } from \"../pixi-integration/pixi-components/generic-position-component\";\r\nimport { ICameras } from \"./icameras\";\r\n\r\nexport class GenericCameras implements ICameras {\r\n    center: IPositionComponent;\r\n    halfWindowWidth:number = window.innerWidth/2;\r\n    halfWindowHeight:number = window.innerHeight/2;\r\n    private getOffsetX(){\r\n        return (this.center?.x??0) - this.halfWindowWidth;\r\n    }\r\n    private getOffsetY(){\r\n        return (this.center?.y??0) - this.halfWindowHeight;\r\n    }\r\n    transformX(x:number){\r\n        return x - this.getOffsetX();\r\n    }\r\n    transformY(y:number){\r\n        return y - this.getOffsetY();\r\n    }\r\n    untransformX(x:number){\r\n        return x + ((this.center?.x??0) - this.halfWindowWidth);\r\n    }\r\n    untransformY(y:number){\r\n        return y + ((this.center?.y??0) - this.halfWindowHeight);\r\n    }\r\n    setMainCamera(positionComponent: IPositionComponent): void {\r\n        this.center = positionComponent;\r\n    }\r\n    public static create():GenericCameras{\r\n        return new GenericCameras();\r\n    }\r\n}", "import { Entity } from './entity/entity';\r\nimport { EntityFactory } from './entity/entity-factory';\r\nimport { EntitySystem } from './system/system';\r\nimport { EventManager } from './events/event-manager';\r\nimport { Renderer } from './renderers/render';\r\nimport { HtmlRenderer } from './renderers/implementations/html/html-renderer';\r\nimport { SpriteManager } from './renderers/sprite-manager';\r\nimport { PositionComponent } from './component/components/position/position-component';\r\nimport { SystemArgs } from './system/system-args';\r\nimport { EntityUpdateArgs } from './entity/entity-update-args';\r\nimport { PhaserGame } from './phaser-integration/phaser-game';\r\nimport { ISpriteLoader } from './renderers/isprite-loader';\r\nimport { GameDependencies } from './dependencies/game-dependencies';\r\nimport { ComponentFactory } from './component/component-factory';\r\nimport { GenericCameras } from './dependencies/generic-cameras';\r\nimport { EntityRegistration } from './entity/entity-registration';\r\n\r\nexport class Game {\r\n    spriteManager: any;\r\n    newTime: number;\r\n    constructor(entityFactory:EntityFactory, renderer:Renderer, eventManager:EventManager, gameDependencies:GameDependencies){\r\n        this.entityFactory = entityFactory;\r\n        this.renderer = renderer;\r\n        this.eventManager = eventManager;\r\n        this.gameDependencies = gameDependencies;\r\n        this.spriteManager = gameDependencies.spriteManager;\r\n    }\r\n\r\n    static create():Game{\r\n        const renderer = HtmlRenderer.create();\r\n        const deps = new GameDependencies();\r\n        deps.renderer = renderer;\r\n        deps.eventManager = EventManager.create();\r\n        deps.componentFactory = ComponentFactory.create(deps);\r\n        deps.entityFactory = EntityFactory.create(deps);\r\n        deps.spriteManager = deps.renderer.spriteManager;\r\n        deps.cameras = GenericCameras.create();\r\n        var game = new Game(deps.entityFactory, deps.renderer, EventManager.create(), deps);\r\n        return game;\r\n    }\r\n    \r\n    static createCustom(dependencies:GameDependencies):Game{\r\n        var game = new Game(dependencies.entityFactory, dependencies.renderer, dependencies.eventManager, dependencies);\r\n        dependencies.game = game;\r\n        return game;\r\n    }\r\n    private starters:((games:Game)=>void)[] = [];\r\n    private _entities:Entity[] = [];\r\n    get entities():Entity[]{\r\n        return this._entities;\r\n    }\r\n    set entities(entities:Entity[]){\r\n        //console.log(entities)\r\n        this._entities = entities;\r\n    }\r\n    //entitiesX:Entity[] = [];\r\n    entityFactory:EntityFactory;\r\n    systems:EntitySystem[] = [];\r\n    systemsWithOncePerTurnUpdate:EntitySystem[] = [];\r\n    renderer:Renderer;\r\n    eventManager:EventManager;\r\n    intervalId:number;\r\n    gameDependencies: GameDependencies;\r\n    performance: number;\r\n    frameTime: number;\r\n    targetFps: number = 60;\r\n    counter: number = 0;\r\n    lastTime = performance.now();\r\n    frameTracker:number = 0;\r\n    phaserGame:PhaserGame;\r\n    update(delta:number, framesPassed:number){\r\n        // this.renderer.cbox();\r\n        this.eventManager.update();\r\n        for (let i=0;i<this.systemsWithOncePerTurnUpdate.length;i++){\r\n            const args = new SystemArgs();\r\n            args.entity = this.entities[0];\r\n            args.eventManager = this.eventManager;\r\n            args.fullFramesPassed = framesPassed;\r\n            this.systemsWithOncePerTurnUpdate[i].oncePerLoop(args);\r\n        }\r\n        for(var i=0;i<this.entities.length;i++){\r\n            const args = new EntityUpdateArgs();\r\n            args.delta = delta;\r\n            args.fullFramePassed = framesPassed;\r\n            this.entities[i].update(args);\r\n            for(var systemi=0;systemi<this.systems.length;systemi++){\r\n                const args = new SystemArgs();\r\n                args.entity = this.entities[i];\r\n                args.eventManager = this.eventManager;\r\n                args.fullFramesPassed = framesPassed;\r\n                this.systems[systemi].apply(args);\r\n            }\r\n        }\r\n        var numEvents:number;\r\n        for(var i=0;i<this.entities.length;i++){\r\n            for(var systemi=0;systemi<this.systems.length;systemi++){\r\n                this.systems[systemi].applyEvents(this.entities[i], this.eventManager);\r\n            }\r\n            this.entities[i].targetedEvents = this.entities[i].delayedEvents;\r\n            this.entities[i].delayedEvents = [];\r\n        }\r\n        \r\n        this.eventManager.fireCallbacks();\r\n        \r\n        this.entities.sort(function(a:Entity,b:Entity){\r\n            var pa:PositionComponent = <PositionComponent>a.getComponent(\"position\");\r\n            var pb:PositionComponent = <PositionComponent>b.getComponent(\"position\");\r\n            return pa.y - pb.y;\r\n        });\r\n        this.cleanDestroyedEntities();\r\n        this.renderer.text(Math.floor(this.frameTime).toString(),0,0, 1000);\r\n        this.counter = (this.counter + 1)%100;\r\n    }\r\n    step(delta:number){\r\n        this.newTime = performance.now();\r\n        this.performance = performance.now();\r\n        delta = delta/(1000/this.targetFps);\r\n        // console.log(delta);\r\n        this.frameTracker += delta;\r\n        if (this.frameTracker > 1){\r\n            this.update(delta, Math.floor(this.frameTracker));\r\n            this.frameTracker = 0;\r\n        } else {\r\n            this.update(delta, 0);\r\n        }\r\n        this.frameTime = performance.now() - this.performance;\r\n    }\r\n    private loop(time:number){\r\n        const delta = (time - this.lastTime)/(1000/this.targetFps);\r\n        this.step(delta);\r\n        this.lastTime = time;\r\n        window.requestAnimationFrame((time)=>{this.loop(time)});\r\n    }\r\n    start():number{\r\n        if (this.starters.length > 0){\r\n            console.log(\"starting game custom\");\r\n            this.starters.forEach((starter)=>{\r\n                starter(this);\r\n            });\r\n            return;\r\n        }\r\n        console.log(\"starting game loop with requestAnimationFrame\");\r\n        window.requestAnimationFrame(()=>{\r\n            this.loop(this.lastTime);\r\n        });\r\n        return 0;\r\n    }\r\n\r\n    stop(){\r\n        clearInterval(this.intervalId);\r\n    }\r\n\r\n    addStarter(starterFunc:(game:Game)=>void){\r\n        this.starters.push(starterFunc);\r\n    }\r\n\r\n    addEntity(entityName:string){\r\n        var entity:Entity = this.entityFactory.create(entityName);\r\n        this.entities.push(entity);\r\n        //this.entitiesX.push(entity);\r\n        return entity;\r\n    }\r\n\r\n    getById(entityId:number):Entity{\r\n        var entity:Entity;\r\n        for(var i=0;i<this.entities.length;i++){\r\n            entity = this.entities[i];\r\n            if(entityId == entity.id)return entity\r\n        }\r\n        return null;\r\n    }\r\n\r\n    destroy(entity:Entity){\r\n        entity.destroyed = true;\r\n    }\r\n\r\n    cleanDestroyedEntities(){\r\n        if(this.entities.filter((entity)=>entity.destroyed).length == 0)return;\r\n        let newEntities:Entity[] = [];\r\n        for(let i:number=0;i<this.entities.length;i++){\r\n            if(!this.entities[i].destroyed){\r\n                newEntities.push(this.entities[i]);\r\n            } else {\r\n                delete this.entities[i];\r\n            }\r\n        }\r\n        delete this.entities;\r\n        this.entities = newEntities;\r\n    }\r\n\r\n    addSystem(system:EntitySystem):void{\r\n        this.systems.push(system);\r\n        if (system.oncePerLoop == null)return;\r\n        this.systemsWithOncePerTurnUpdate.push(system);\r\n    }\r\n\r\n    registerEntity(entityName:string, EntityClass:EntityRegistration):void{\r\n        this.entityFactory.registerEntity(entityName, EntityClass);\r\n    }\r\n\r\n    registerComponent(EntityClass:any):void{\r\n        this.entityFactory.registerComponent(EntityClass);\r\n    }\r\n}", "import { Component } from \"../engine/component/component\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\n\r\nexport class ClickableComponent extends Component{\r\n    constructor(){\r\n        super(\"click\");\r\n    }\r\n    update(entity: Entity): void {}\r\n    private callback:(()=>void)[] = [];\r\n    addListener(callback:()=>void) {\r\n        this.callback.push(callback);\r\n    }\r\n    click(){\r\n        this.callback.forEach((callback)=>{\r\n            callback();\r\n        });\r\n    }\r\n    \r\n    static create():ClickableComponent{\r\n        return new ClickableComponent();\r\n    };\r\n}", "import { Component } from '../engine/component/component';\r\nexport class CropComponent extends Component {\r\n    constructor(){\r\n        super(\"crop\");\r\n        this.growthLengths = [5,5,5];\r\n        this.growthStage = 0;\r\n        this.cropName = \"turnip\"\r\n        this.setCrop(this.cropName)\r\n    }\r\n    //growth sprites for each stage\r\n    growthSprites:string[];\r\n    //index of current growthSprite in growthSprites\r\n    //also index of growthLength in growth lengths\r\n    growthStage:number;\r\n    growthLengths:number[];\r\n    timeSinceGrowth:number=0;\r\n    cropName:string;\r\n    \r\n    setSprites(sprites:string[]){\r\n        this.growthSprites = sprites;\r\n        this.growthStage = 0;\r\n    }\r\n\r\n    isGrown():boolean{\r\n        return this.growthStage == this.growthSprites.length-1;\r\n    }\r\n\r\n    setCrop(cropName:string){\r\n        var cropLength:number = 300;\r\n        this.growthLengths = [cropLength, cropLength, cropLength];\r\n        switch(cropName){\r\n            case \"turnip\":\r\n                this.growthSprites = [\"turnip0\", \"turnip1\", \"turnip2\"];\r\n                this.growthLengths = [cropLength, cropLength, cropLength];\r\n                break;\r\n            case \"corn\":\r\n                this.growthSprites = [\"corn0\", \"corn1\", \"corn2\"];\r\n                this.growthLengths = [cropLength, cropLength, cropLength];\r\n                break;\r\n            case \"wheat\":\r\n                this.growthSprites = [\"wheat0\", \"wheat1\", \"wheat2\"];\r\n                this.growthLengths = [cropLength, cropLength, cropLength];\r\n                break;\r\n            case \"pumpkin\":\r\n                this.growthSprites = [\"pumpkin0\", \"pumpkin1\", \"pumpkin2\"];\r\n                this.growthLengths = [cropLength, cropLength, cropLength];\r\n                break;\r\n            case \"onion\":\r\n                this.growthSprites = [\"onion0\", \"onion1\", \"onion2\", \"onion3\", \"onion4\", \"onion5\"];\r\n                this.growthLengths = [cropLength, cropLength, cropLength, cropLength, cropLength, cropLength];\r\n                break;\r\n            case \"tomato\":\r\n                this.growthSprites = [\"tomato0\", \"tomato1\", \"tomato2\", \"tomato3\"];\r\n                this.growthLengths = [cropLength, cropLength, cropLength, cropLength];\r\n                break;\r\n        }\r\n        this.growthStage = 0;\r\n        this.cropName = cropName;\r\n    }\r\n\r\n    update(){\r\n        if(this.isGrown()){\r\n            return;\r\n        }\r\n        this.timeSinceGrowth++;\r\n        var gs:number = this.growthStage;\r\n        var gl:number = this.growthLengths[gs];\r\n        if (this.timeSinceGrowth > gl){\r\n            this.growthStage = (this.growthStage+1)%this.growthLengths.length;\r\n            this.timeSinceGrowth = 0;\r\n        }\r\n    };\r\n\r\n    static create():CropComponent{\r\n        return new CropComponent();\r\n    };\r\n}", "import { Component } from '../engine/component/component';\r\nimport { Entity } from '../engine/entity/entity';\r\n\r\nexport class FightComponent extends Component{\r\n    constructor(){\r\n        super(\"fight\");\r\n    }\r\n    target:Entity;\r\n    attack:boolean=false;\r\n    maxSpeed:number=5;\r\n    range:number=300;\r\n    reloadTime:number=30;\r\n    reloadTimer:number=30;\r\n\r\n    attackTarget(){\r\n    }\r\n    \r\n    canFire(){\r\n        return this.reloadTime === this.reloadTimer;\r\n    }\r\n\r\n    update(){\r\n        if (this.reloadTimer <= this.reloadTime){\r\n            this.reloadTimer--;\r\n        }\r\n        if(this.reloadTimer <= 0){\r\n            this.reloadTimer = this.reloadTime;\r\n        }\r\n    }\r\n\r\n    static create():FightComponent{\r\n        return new FightComponent();\r\n    }\r\n}", "import { Component } from \"../engine/component/component\";\r\n\r\n\r\nexport class HealthComponent extends Component {\r\n    constructor(){\r\n        super(\"health\");\r\n    }\r\n    health:number=100;\r\n\r\n    update(){}\r\n\r\n    static create():HealthComponent{\r\n        return new HealthComponent();\r\n    }\r\n}", "import { InventoryItemType } from \"./inventory-item-type\";\r\n\r\nexport class InventoryItem {\r\n    constructor(){}\r\n    itemQuantity:number = 0;\r\n    itemName:string = \"no name\";\r\n    itemDescription:string = \"no description\";\r\n    itemSlot:number = -1;\r\n\r\n    static create(itemType:InventoryItemType):InventoryItem{\r\n        let item = new InventoryItem();\r\n        item.itemName = itemType.itemName;\r\n        item.itemDescription = itemType.itemDescription;\r\n        return item;\r\n    }\r\n}", "export class InventoryItemType {\r\n    constructor(itemName:string, itemDescription:string, itemSpriteName:string){\r\n        InventoryItemType.largestItemId += 1;\r\n        this.itemId = InventoryItemType.largestItemId;\r\n        this.itemName = itemName;\r\n        this.itemDescription = itemDescription;\r\n        this.itemSpriteName = itemSpriteName;\r\n    }\r\n    static largestItemId:number = -1;\r\n    itemId:number = -1;\r\n    itemName:string = \"no name\";\r\n    itemDescription:string = \"no description\";\r\n    itemSpriteName:string;\r\n\r\n    static create(itemName:string, itemSpriteName:string, itemDescription:string)\r\n    :InventoryItemType{\r\n        let newItemType:InventoryItemType;\r\n        newItemType = new InventoryItemType(itemName, itemDescription, itemSpriteName);\r\n        return newItemType;\r\n    }\r\n}", "import { InventoryItemType } from \"./inventory-item-type\";\r\n\r\n\r\nexport class InventoryItemRegistry {\r\n    constructor(){}\r\n    itemTypes:{[key:string]:InventoryItemType}={};\r\n    registerItemType(itemName:string, itemSpriteName:string, description:string){\r\n        let newItemType:InventoryItemType;\r\n        newItemType = new InventoryItemType(itemName, description, itemSpriteName);\r\n        if (itemName in this.itemTypes){\r\n            throw \"error: item type: \" + itemName+ \" already exists\";\r\n        }\r\n        this.itemTypes[itemName] = newItemType;\r\n    }\r\n\r\n    private static singletonRegistry:InventoryItemRegistry;\r\n\r\n    static singletonCreate():InventoryItemRegistry{\r\n        if(this.singletonRegistry)return this.singletonRegistry;\r\n        let itemRegistry:InventoryItemRegistry = new InventoryItemRegistry();\r\n        this.singletonRegistry = itemRegistry;\r\n        this.singletonRegistry.populateItems();\r\n        return this.singletonRegistry;\r\n    }\r\n\r\n    private populateItems():void{\r\n        this.registerItemType(\"wheat\", \"wheat2\", \"its a wheat\");\r\n        this.registerItemType(\"onion\", \"onion5\", \"its an onion\");\r\n        this.registerItemType(\"corn\", \"corn2\", \"its corn\");\r\n        this.registerItemType(\"pumpkin\", \"pumpkin2\", \"its a pumpkin\");\r\n        this.registerItemType(\"turnip\", \"turnip2\", \"its a turnip\");\r\n        this.registerItemType(\"nothing\", \"nothing\", \"nothing\");\r\n    }\r\n}", "import { Component } from \"../../engine/component/component\";\r\nimport { InventoryItem } from \"./inventory-item\";\r\nimport { InventoryItemRegistry } from \"./item-registry\";\r\nimport { Entity } from \"../../engine/entity/entity\";\r\nimport { GiveItemEventData } from \"./give-item-event-data\";\r\nimport { InventoryItemType } from \"./inventory-item-type\";\r\nimport { GameEvent } from \"../../engine/events/game-event\";\r\nimport { EventType } from \"../../engine/events/EventType\";\r\nimport { InventoryItemEntity } from \"../../entities/inventory-item-entity\";\r\nimport { AnimationComponent2 } from \"../animation-component\";\r\nimport { TextComponent } from \"../text-component/text-component\";\r\n\r\nexport class InventoryComponent extends Component {\r\n    constructor(itemRegistry:InventoryItemRegistry){\r\n        super(\"inventory\");\r\n        this.itemRegistry = itemRegistry;\r\n        this.itemSlots = new Array<InventoryItem>(10);\r\n        for(let i:number=0;i<this.itemSlots.length;i++){\r\n            let itemType:InventoryItemType = this.itemRegistry.itemTypes[\"nothing\"];\r\n            this.itemSlots[i] = InventoryItem.create(itemType);\r\n        }\r\n\r\n    }\r\n    private inventory:{[key:string]:InventoryItem} = {};\r\n    private itemSlots:InventoryItem[] = [];\r\n    private selectedItemSlot:number=0;\r\n    private itemRegistry:InventoryItemRegistry;\r\n    inventoryItemEntities:Entity[] = [];//inventory item entities that appear on screen\r\n\r\n    hashInventoryToString():void{\r\n        let inventoryString:string = \"Inventory:\";\r\n        for(let i:number=0;i<this.itemSlots.length;i++){\r\n            let item:InventoryItem;\r\n            item = this.itemSlots[i];\r\n            inventoryString += `\\n${item.itemName}: ${item.itemQuantity}`;\r\n        }\r\n        inventoryString += \"\\n<---------->\";\r\n        console.log(inventoryString);\r\n    }\r\n\r\n    inventoryToString():void{\r\n        let inventoryString:string = \"Inventory:\";\r\n        for(let i:number=0;i<this.itemSlots.length;i++){\r\n            let item:InventoryItem;\r\n            item = this.itemSlots[i];\r\n            inventoryString += `\\n${item.itemName}: ${item.itemQuantity}`;\r\n\r\n        }\r\n        inventoryString += \"\\n<---------->\";\r\n        console.log(inventoryString);\r\n    }\r\n \r\n    selectItemSlot(itemSlotNumber:number) {\r\n        this.selectedItemSlot = itemSlotNumber % this.itemSlots.length;\r\n    }\r\n\r\n    getSelectedItem():InventoryItem{\r\n        return this.itemSlots[this.selectedItemSlot];\r\n    }\r\n\r\n    addItemToHashTable(itemName:string, quantity:number=1):boolean{\r\n        if(! (itemName in this.itemRegistry.itemTypes)){\r\n            console.log(`Warning: itemName ${itemName} is not in the itemRegistry`);\r\n            return false;\r\n        }\r\n        let itemType:InventoryItemType = this.itemRegistry.itemTypes[itemName];\r\n        if(!(itemName in this.inventory)){\r\n            this.inventory[itemName] = InventoryItem.create(itemType);\r\n        }\r\n        this.inventory[itemName].itemQuantity += quantity;\r\n        return true;\r\n    }\r\n\r\n    getItems():InventoryItem[]{\r\n        return this.itemSlots;\r\n    }\r\n\r\n    addItem(itemName:string, quantity:number=1):boolean {\r\n        if(! (itemName in this.itemRegistry.itemTypes)){\r\n            console.log(`Warning: itemName ${itemName} is not in the itemRegistry`);\r\n            return false;\r\n        }\r\n        for(let i:number=0;i<this.itemSlots.length;i++) {\r\n            let itemSlot:InventoryItem = this.itemSlots[i];\r\n            if (itemSlot.itemName == itemName) {\r\n                itemSlot.itemQuantity += quantity;\r\n                return true;\r\n            }\r\n        }\r\n        for(let i:number=0;i<this.itemSlots.length;i++) {\r\n            let itemSlot:InventoryItem = this.itemSlots[i];\r\n            if (itemSlot.itemName == \"nothing\") {\r\n                let itemType:InventoryItemType = this.itemRegistry.itemTypes[itemName]\r\n                this.itemSlots[i] = InventoryItem.create(itemType);\r\n                this.itemSlots[i].itemQuantity = 1;\r\n                return;\r\n            }\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    update(entity:Entity):void{\r\n        for(let i:number=0;i<this.inventoryItemEntities.length;i++){\r\n            let inventoryItemEntity = this.inventoryItemEntities[i];\r\n            let spriteComponent:AnimationComponent2;\r\n            spriteComponent = <AnimationComponent2>inventoryItemEntity.getComponent(\"animation\");\r\n            let item:InventoryItem = this.itemSlots[i];\r\n            let itemType:InventoryItemType = this.itemRegistry.itemTypes[item.itemName];\r\n            spriteComponent.setSprite(itemType.itemSpriteName);\r\n        }\r\n    }\r\n\r\n    private handleEvents(event:GameEvent):void{\r\n    }\r\n\r\n    static create():InventoryComponent{\r\n        let inventory:InventoryComponent;\r\n        inventory = new InventoryComponent(InventoryItemRegistry.singletonCreate());\r\n        return inventory;\r\n    }\r\n}", "import { Component } from \"../engine/component/component\";\r\n\r\nexport class NeuralFightComponent extends Component {\r\n    constructor(){\r\n        super(\"neural\");\r\n    }\r\n\r\n    update(){}\r\n\r\n    static create(){\r\n        return new NeuralFightComponent();\r\n    }\r\n}", "import { Component } from \"../engine/component/component\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\nimport { ParticleEntity } from \"../entities/particles/particle-entity\";\r\nimport { PositionComponent } from \"../engine/component/components/position/position-component\";\r\n\r\nexport class ParticleComponent extends Component{\r\n    constructor(){\r\n        super(\"particles\");\r\n    }\r\n    particles: Entity[] = []\r\n    targetParticles: number = 10;\r\n    time: number = 0;\r\n    maxSpeed: number = 50;\r\n    paths = [\r\n        /*(center: PositionComponent, position: PositionComponent) => {\r\n            let dx = center.x - position.x;\r\n            let dy = center.y - position.y;\r\n            if (Math.abs(position.vx) < this.maxSpeed) position.vx += dx/Math.abs(dx) * .1;\r\n            if (Math.abs(position.vy) < this.maxSpeed) position.vy += dy/Math.abs(dy) * .1;\r\n        },*/\r\n        /*(center: PositionComponent, position: PositionComponent) => {\r\n            let dx = center.x - position.x;\r\n            let dy = center.y - position.y;\r\n            if (Math.abs(position.vx) < this.maxSpeed) position.vx += dx/Math.abs(dx) * .2;\r\n            if (dy > 50)position.vy = 1\r\n            if (dy < -50)position.vy = -1\r\n        }*/\r\n        /*(center: PositionComponent, position: PositionComponent) => {\r\n            let dx = center.x - position.x;\r\n            let dy = center.y - position.y;\r\n            position.vx += dx/Math.abs(dx) * .2;\r\n            position.vy += dy/Math.abs(dy) * .2;\r\n            // position.x += 1;\r\n            // center.x += 1;\r\n        }*/\r\n        /*(center:PositionComponent, position: PositionComponent, time: number) => {\r\n            let f = ()=>10 * Math.sin(.05 * time);\r\n            let f2 = ()=>40 * Math.cos(.2 * time);\r\n            position.y = center.y +  10*f();\r\n            position.x = center.x + f2();\r\n        },*/\r\n        /*(center:PositionComponent, position: PositionComponent, time: number) => {\r\n            let f = ()=>Math.sin(.05 * time/3);\r\n            let f2 = ()=>40 * Math.cos(.2 * time/2);\r\n            position.h = -2 + center.h - 2*center.width/3 +  30*f();\r\n            position.x = center.x + f2();\r\n            position.y = center.y - 1\r\n        },\r\n        (center:PositionComponent, position: PositionComponent, time: number) => {\r\n            let f = ()=>Math.sin(.05 * time/3);\r\n            let f2 = ()=>40 * Math.cos(.2 * time/2);\r\n            position.h = -2 + center.h - 2*center.width/3 +  30*f();\r\n            position.x = center.x - f2();\r\n            position.y = center.y + 1\r\n        },*/\r\n        (center:PositionComponent, position: PositionComponent, time: number) => {\r\n            let f = ()=>40 * Math.sin(.2 * time/2);\r\n            let f2 = ()=>40 * Math.cos(.2 * time/2);\r\n            position.h = -2 + center.h - 2*center.width/3 +  f();\r\n            position.x = center.x - f2();\r\n            position.y = center.y + 1\r\n        }\r\n    ]\r\n    addParticle(particle: Entity){\r\n        this.particles.push(particle);\r\n    }\r\n    update(entity: Entity): void {\r\n        for(let i:number=0;i<this.particles.length;i++){\r\n            let particle = this.particles[i];\r\n            let path = this.paths[i%this.paths.length];\r\n            let center = <PositionComponent>entity.getComponent(\"position\");\r\n            let particlePosition = <PositionComponent>particle.getComponent(\"position\");\r\n            path(center, particlePosition, -(this.time + i * 10));\r\n        }\r\n    }\r\n    public static create(): ParticleComponent {\r\n        return new ParticleComponent();\r\n    }\r\n}", "import { Component } from \"../engine/component/component\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\n\r\nexport class PrimitiveComponent extends Component {\r\n    update(entity: Entity): void {\r\n    }\r\n    public static create(): PrimitiveComponent {\r\n        return new PrimitiveComponent(\"primitive\");\r\n    }\r\n}", "import { Component } from \"../engine/component/component\";\r\n\r\nexport class ProjectileComponent extends Component {\r\n    constructor(){\r\n        super(\"projectile\");\r\n    }\r\n    lifeSpan:number=90;\r\n    shooterId:number;\r\n\r\n    update(){\r\n    }\r\n\r\n    static create():ProjectileComponent{\r\n        return new ProjectileComponent();\r\n    }\r\n}", "import { SpriteId } from \"./sprite-id\";\r\n\r\nexport class Tile{\r\n    spriteIds:SpriteId[]=[];\r\n    tileX: number;\r\n    tileY: number;\r\n    public static create(spriteName: string, spriteNumber: number, tileX:number, tileY:number): Tile{\r\n        let tile = new Tile();\r\n        tile.spriteIds.push(SpriteId.create(\r\n            spriteName,\r\n            spriteNumber\r\n        ));\r\n        tile.tileX = tileX;\r\n        tile.tileY = tileY;\r\n        return tile;\r\n    }\r\n}", "import { Component } from \"../../engine/component/component\";\r\nimport { Entity } from \"../../engine/entity/entity\";\r\nimport { HtmlCanvas } from \"../../engine/renderers/implementations/html/html-canvas\";\r\nimport { Tile } from \"./tile\";\r\n\r\nexport class TileComponent extends Component{\r\n    constructor(){\r\n        super(\"tile\");\r\n    }\r\n    update(entity: Entity): void {\r\n    }\r\n\r\n    tileWidth: number = 64;\r\n    tiles: Tile[] = [];\r\n    private tilesByCoords:{[key:number]:{[key:number]:Tile}} = {};\r\n    tileSpriteNames: string[] = [\"grass\", \"soil\"]\r\n    addTile(tile:Tile){\r\n        this.tiles.push(tile);\r\n        const yToTile = this.tilesByCoords[tile.tileX];\r\n        if (yToTile == null){\r\n            this.tilesByCoords[tile.tileX] = {}\r\n        }\r\n        this.tilesByCoords[tile.tileX][tile.tileY] = tile;\r\n    }\r\n    public static create(): TileComponent{\r\n        let tc = new TileComponent();\r\n        let spriteName = \"grass\";\r\n        let mapWidth = 200;\r\n        let centerOffset = mapWidth/2-5;\r\n        let xlow = 4;\r\n        let xhigh = xlow + 6\r\n        let ylow = 3;\r\n        let yhigh = ylow + 6;\r\n        for(let i=0;i<mapWidth*mapWidth;i++){\r\n            let x = i%mapWidth-centerOffset;\r\n            let y = Math.floor(i/mapWidth)-centerOffset;\r\n            if (x >= xlow && x <= xhigh && y >= ylow && y <= yhigh) {\r\n                if (x==xlow && y == ylow) tc.addTile(Tile.create(\"soil\", 6, x, y));\r\n                else if (x==xhigh && y == ylow) tc.addTile(Tile.create(\"soil\", 8, x, y));\r\n                else if (x==xlow && y == yhigh) tc.addTile(Tile.create(\"soil\", 12, x, y));\r\n                else if (x==xhigh && y == yhigh) tc.addTile(Tile.create(\"soil\", 14, x, y));\r\n                else if (x==xlow) tc.addTile(Tile.create(\"soil\", 9, x, y));\r\n                else if (x==xhigh) tc.addTile(Tile.create(\"soil\", 11, x, y));\r\n                else if (y==ylow) tc.addTile(Tile.create(\"soil\", 7, x, y));\r\n                else if (y==yhigh) tc.addTile(Tile.create(\"soil\", 13, x, y));\r\n                else\r\n                tc.addTile(Tile.create(\"soil\", 10, x, y));\r\n                continue;\r\n            }\r\n            tc.addTile(Tile.create(spriteName, 14+Math.ceil(Math.random()*3), x, y));\r\n        }\r\n        return tc;\r\n    }\r\n    createBuilder():void{\r\n        let tileSetSpriteNames = [\"grass\", \"soil\"];\r\n    }\r\n\r\n    removeTiles(){\r\n        this.tiles = [];\r\n        this.tilesByCoords = {};\r\n    }\r\n    \r\n    coordToTile(x:number, y:number):Tile[]{\r\n        let tileX = Math.floor((x+.5*this.tileWidth)/this.tileWidth);\r\n        let tileY = Math.ceil(y/this.tileWidth);\r\n        const yToTile = this.tilesByCoords[tileX]\r\n        if (yToTile == null) return [];\r\n        const tile = yToTile[tileY];\r\n        if (tile == null){\r\n            return [];\r\n        }\r\n        return [tile];\r\n    }\r\n    tileCoordToReal(coord:number){\r\n        return coord * this.tileWidth;        \r\n    }\r\n}", "import { Component } from \"../../engine/component/component\";\r\nimport { Entity } from \"../../engine/entity/entity\";\r\nimport {AnimationComponent2} from \"../animation-component\";\r\nexport class TransitionComponent extends Component{\r\n    constructor(){\r\n        super(\"transition\");\r\n    }\r\n    time: number=0;\r\n    reference: ImageData = null;\r\n    current: ImageData = null;\r\n    targetAnimationName: string = \"fireball\";\r\n    targetSpriteNumber: number = 0;\r\n    target: ImageData;\r\n    running: boolean = false;\r\n    speed: number = 15;\r\n    update(entity: Entity): void {\r\n        if (!this.running) return;\r\n        let animation = <AnimationComponent2>entity.getComponent(\"animation\", true);\r\n        if (animation == null) return;\r\n        this.reference = animation.getRGBs();\r\n        this.target = animation.getRGBs(this.targetAnimationName, this.targetSpriteNumber, this.reference.width, this.reference.height);\r\n        if (this.targetAnimationName == null){\r\n            let newTarget = new ImageData(this.reference.width, this.reference.height);\r\n            for (let i=0;i<this.target.data.length;i++){\r\n                newTarget.data[i] = 0;\r\n            }\r\n            this.target = newTarget;\r\n        }\r\n        if (this.current == null){\r\n            // check if sprites are loaded length == 4 means it's a place holder of 1 pixel\r\n            if (this.reference.data.length == 4 || this.target.data.length == 4) return;\r\n            this.current = new ImageData(this.reference.width, this.reference.height);\r\n            for(let i=0;i<this.reference.data.length;i++){\r\n                this.current.data[i] = this.reference.data[i];\r\n            }\r\n        }\r\n        let noChanges = true;\r\n        for(let i=0;i<this.reference.data.length;i++){\r\n            let target = this.target.data[i];\r\n            if (this.current.data[i] < target){\r\n                this.current.data[i] += this.speed;\r\n            } else if (this.current.data[i] > target){\r\n                this.current.data[i] -= this.speed;\r\n            }\r\n            let distance = Math.abs(this.current.data[i] - target);\r\n            if (distance < this.speed){\r\n                this.current.data[i] = target;\r\n            } else {\r\n                noChanges = false;\r\n            }\r\n        }\r\n        animation.setFilter(this.current);\r\n        if (noChanges){\r\n            animation.isFiltered = false;\r\n            this.running = false;\r\n        }\r\n    }\r\n    public start(targetAnimationName:string = \"fireball\", targetSpriteNumber:number, resetCurrent:boolean=true):void{\r\n        this.running = true;\r\n        this.time = 300;\r\n        this.targetAnimationName = targetAnimationName;\r\n        if (resetCurrent) this.current = null;\r\n        this.targetSpriteNumber = targetSpriteNumber;\r\n    }\r\n    public static create(): TransitionComponent{\r\n        return new TransitionComponent();\r\n    }\r\n}", "import { Component } from \"../engine/component/component\";\r\n\r\nexport class WasdComponent extends Component {\r\n    constructor(){\r\n        super(\"wasd\");\r\n    }\r\n    speed:number=5;\r\n    dashSpeed: number = 15;\r\n    dashingTime: number = 0;\r\n    maxDashingTime: number = 20;\r\n    dashing: boolean = false;\r\n    dashWidth: number = 0;\r\n    dashHeight: number = 0;\r\n    dashSprite: string = \"\";\r\n    dashSpriteNumber: number = 0;\r\n    sprite:string=\"grey\";\r\n    walkSprite:string=\"greyWalk\";\r\n    startDashing(){\r\n        this.dashing = true;\r\n        this.dashingTime = this.maxDashingTime;\r\n    }\r\n    update(){\r\n    }\r\n    static create(){\r\n        return new WasdComponent();\r\n    }\r\n}", "import { Entity } from \"../../engine/entity/entity\";\r\n\r\nexport class PlaceItemRequest {\r\n    constructor(entityName:string, coordinates:number[], quantity:number=1,\r\n                successCallback:(entity:Entity)=>void, relative:boolean=true){\r\n        this.entityName = entityName;\r\n        this.coordinates = coordinates;\r\n        this.quantity = quantity;\r\n        this.successCallback = successCallback;\r\n        this.relative = relative;\r\n    }\r\n    entityName:string;\r\n    coordinates:number[];\r\n    quantity:number;\r\n    successCallback: (entity: Entity) => void;\r\n    relative:boolean;\r\n}", "import { Component } from \"../../engine/component/component\";\r\nimport { Entity } from \"../../engine/entity/entity\";\r\nimport { InventoryComponent } from \"../inventory-component/inventory-component\";\r\nimport { PlaceItemRequest } from \"./place-item-request\";\r\n/**\r\n * Allows the user to place items. Items can only be placed on tiles.\r\n * Tiles are squares of side length this.tileSize. Place item requests\r\n * describe what item to place and where to place it.\r\n * PlaceItemSystem will read the requests and do the actual placing\r\n */\r\nexport class PlaceItemComponent extends Component {\r\n    constructor(){\r\n        super(\"placeItem\");\r\n    }\r\n    public placeItemRequests:PlaceItemRequest[]=[];\r\n    placeItem(  entityName:string, coordinates:number[]=[0, 0],\r\n                successCallback:(entity:Entity)=>void, relative:boolean=true):void {\r\n        let placeItemRequest:PlaceItemRequest;\r\n        placeItemRequest = new PlaceItemRequest(entityName, coordinates, 1, successCallback, relative=true);\r\n        this.placeItemRequests.push(placeItemRequest);\r\n    }\r\n    \r\n    update(entity: Entity): void {\r\n        \r\n    }\r\n\r\n    static create():PlaceItemComponent {\r\n        return new PlaceItemComponent();\r\n    }\r\n\r\n}", "import { Component } from \"../engine/component/component\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\n\r\nexport class CropHarvesterComponent extends Component{\r\n    harvesting:boolean = false;\r\n    private harvestTime:number = 0;\r\n    private timeItTakesToHarvest:number = 10;\r\n\r\n    public startHarvest():void {\r\n        this.harvesting = true;\r\n        this.harvestTime = this.timeItTakesToHarvest;\r\n    }\r\n\r\n    update(entity: Entity): void {\r\n        if (this.harvestTime > 0){\r\n            this.harvestTime -= 1;\r\n        } else {\r\n            this.harvesting = false;\r\n        }\r\n    }\r\n\r\n    static create():CropHarvesterComponent{\r\n        return new CropHarvesterComponent(\"cropHarvester\");\r\n    }\r\n}", "export class TextPlacement{\r\n    constructor(textValue:string, offsetX:number, offsetY:number){\r\n        this.textValue = textValue;\r\n        this.offsetX = offsetX;\r\n        this.offsetY = offsetY;\r\n    }\r\n    offsetX:number;\r\n    offsetY:number;\r\n    textValue:string;\r\n}", "import { Component } from \"../../engine/component/component\";\r\nimport { TextPlacement } from \"./text-placement\";\r\n\r\nexport class TextComponent extends Component {\r\n    constructor(){\r\n        super(\"text\");\r\n    }\r\n    textPlacements:TextPlacement[]=[];\r\n    addTextPlacement(text:string, offsetX:number=0, offsetY:number=0){\r\n        this.textPlacements.push(new TextPlacement(text, offsetX, offsetY));\r\n    }\r\n\r\n    setText(value:string, index:number=0){\r\n        if(index >= 0 && index < this.textPlacements.length){\r\n            this.textPlacements[index].textValue = value;\r\n        }\r\n    }\r\n\r\n    update(){}\r\n    static create(){\r\n        return new TextComponent();\r\n    }\r\n}", "import * as Phaser from \"phaser\";\r\nimport { MainScene } from \"./main-scene\";\r\n\r\n\r\nexport class PhaserGame {\r\n    constructor(){\r\n        this.config = {\r\n            type: Phaser.WEBGL,\r\n            width:window.innerWidth,\r\n            height:window.innerHeight,\r\n            scene: MainScene,\r\n            fps: {\r\n                target:60,\r\n                forceSetTimeOut: true\r\n            },\r\n            physics: {\r\n                default:\"arcade\",\r\n                arcade: {\r\n                },\r\n                matter:{\r\n                    gravity:false,\r\n                    debug: {\r\n                        showBody: true,\r\n                        showStaticBody: true\r\n                    }\r\n                },\r\n            }\r\n        }\r\n    }\r\n    config:Phaser.Types.Core.GameConfig;\r\n    game: Phaser.Game;\r\n    mainScene: MainScene = new MainScene();\r\n\r\n    public start(){\r\n        this.game = new Phaser.Game(this.config);\r\n        this.mainScene.addCreator((scene)=>{\r\n            console.log(\"creator for canvas\");\r\n            const canvas:HTMLCanvasElement = <HTMLCanvasElement>this.game.canvas;\r\n            canvas.style.margin = \"0\";\r\n            canvas.style.padding = \"0\";\r\n            canvas.style.overflow = \"hidden\";\r\n            canvas.style.position = \"fixed\";\r\n            canvas.style.top = \"0px\";\r\n            canvas.style.left = \"0px\";\r\n        });\r\n        this.game.scene.add(\"mainReal\", this.mainScene);\r\n        this.game.scene.switch(\"main\", \"mainReal\");\r\n    }\r\n\r\n    setUpdater(updater:(delta:number)=>void){\r\n        this.mainScene.setUpdater(updater);\r\n    }\r\n\r\n    private static phaserGame:PhaserGame = null; \r\n\r\n    public static createSingleton(){\r\n        if (PhaserGame.phaserGame == null){\r\n            PhaserGame.phaserGame = new PhaserGame();\r\n        }\r\n        return PhaserGame.phaserGame;\r\n    }\r\n}", "import { Scene } from \"phaser\";\r\nexport class MainScene extends Scene {\r\n    constructor(){\r\n        super({key:\"main\"})\r\n    }\r\n    private updater: (delta:number)=>void = ()=>{};\r\n    private creators: ((scene:Scene)=>void)[] = [];\r\n    private loaders: ((scene:Scene)=>void)[] = [];\r\n    setUpdater(updateFunction:(delta:number)=>void){\r\n        this.updater = updateFunction;\r\n    }\r\n    addCreator(creator:(scene:Phaser.Scene)=>void){\r\n        this.creators.push(creator);\r\n    }\r\n    addPreloader(loader:(scene:Phaser.Scene)=>void){\r\n        this.loaders.push(loader);\r\n    }\r\n    preload(){\r\n        console.log(\"loading \" + this.loaders.length);\r\n        this.loaders.forEach((loader)=>{\r\n            loader(this)}\r\n        );\r\n    }\r\n    create(){\r\n        console.log(`creating main scene with ${this.creators.length} creators`);\r\n        this.creators.forEach((creator)=>{creator(this)});\r\n    }\r\n    update(time: number, delta: number): void {\r\n        this.updater(delta);\r\n    }\r\n}", "export const metadata:any = {\"sprites/arm.png\":{\"height\":32,\"width\":32,\"type\":\"png\"},\"sprites/BearSprites.webp\":{\"height\":384,\"width\":384,\"type\":\"webp\"},\"sprites/blond.png\":{\"height\":259,\"width\":64,\"type\":\"png\"},\"sprites/blondWalk.png\":{\"height\":336,\"width\":317,\"type\":\"png\"},\"sprites/crops.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/deer/deer female calciumtrice.png\":{\"height\":160,\"width\":160,\"type\":\"png\"},\"sprites/deer/deer male calciumtrice.png\":{\"height\":160,\"width\":160,\"type\":\"png\"},\"sprites/fantasysprites.png\":{\"height\":512,\"width\":384,\"type\":\"png\"},\"sprites/fantasysprites/CompSpriteC.png\":{\"height\":166,\"width\":96,\"type\":\"png\"},\"sprites/fantasysprites/DwarfSprites.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/fantasysprites/DwarfSprites2.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/fantasysprites/EnemySpriteSheet1.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/fantasysprites/FDwarfSheet.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/fantasysprites/PeopleSpriteSheet2.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/fantasysprites/PeopleSpriteSheet3.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/fantasysprites/SpriteCompD.png\":{\"height\":188,\"width\":96,\"type\":\"png\"},\"sprites/fireball.png\":{\"height\":512,\"width\":512,\"type\":\"png\"},\"sprites/greg.png\":{\"height\":96,\"width\":64,\"type\":\"png\"},\"sprites/greyactions.png\":{\"height\":96,\"width\":64,\"type\":\"png\"},\"sprites/scrops.png\":{\"height\":672,\"width\":391,\"type\":\"png\"},\"sprites/sword-7Soul1.png\":{\"height\":192,\"width\":256,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/character/grab_sheet.png\":{\"height\":256,\"width\":384,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/character/sword_sheet_128.png\":{\"height\":504,\"width\":768,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magic/magic_firelion_big.png\":{\"height\":512,\"width\":512,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magic/magic_firelion_sheet.png\":{\"height\":256,\"width\":256,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magic/magic_iceshield_sheet.png\":{\"height\":512,\"width\":512,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magic/magic_snakebite_sheet.png\":{\"height\":512,\"width\":512,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magic/magic_torrentacle.png\":{\"height\":512,\"width\":512,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magic/turtleshell_front.png\":{\"height\":512,\"width\":512,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magic/turtleshell_side.png\":{\"height\":512,\"width\":512,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/magics_preview.gif\":{\"height\":128,\"width\":128,\"type\":\"gif\"},\"sprites/tilesets/submission_daneeklu/tileset_preview.png\":{\"height\":576,\"width\":768,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/farming_fishing.png\":{\"height\":640,\"width\":640,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/fence_alt.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/fence.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/grass.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/grassalt.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/hole.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/plants.png\":{\"height\":384,\"width\":288,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/plowed_soil.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/reed.png\":{\"height\":320,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/sand.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/sandwater.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/tallgrass.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/wheat.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/tilesets/youngwheat.png\":{\"height\":192,\"width\":96,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/ui_preview.png\":{\"height\":192,\"width\":224,\"type\":\"png\"},\"sprites/tilesets/submission_daneeklu/ui/scrollsandblocks.png\":{\"height\":320,\"width\":544,\"type\":\"png\"},\"sprites/victoriansprites.png\":{\"height\":384,\"width\":384,\"type\":\"png\"}}", "import { HtmlRectSprite } from \"../renderers/implementations/html/html-rect-sprite\";\r\nimport { HtmlSprite } from \"../renderers/implementations/html/html-sprite\";\r\nimport { ISpriteLoader } from \"../renderers/isprite-loader\";\r\nimport { Sprite } from \"../renderers/sprite\";\r\nimport { SpriteAnimation } from \"../renderers/sprite-animation\";\r\nimport { PhaserGame } from \"./phaser-game\";\r\nimport { metadata } from \"../../metadata\";\r\n\r\nexport class PhaserSpriteManager implements ISpriteLoader{\r\n    constructor(spriteDir:string=\"../sprites/\"){\r\n        this.phaserGame = PhaserGame.createSingleton();\r\n        this.spriteDir = spriteDir;\r\n    }\r\n    onLoad(callback?: () => void): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    private spriteDir: string;\r\n    private phaserGame: PhaserGame;\r\n    private spriteNameToPath:{[index:string]: string} = {};\r\n    private path(fileName:string){\r\n        return this.spriteDir + fileName;\r\n    }\r\n    \r\n    loadSprite(spriteName:string, fileName:string, widthImgs:number, heightImgs:number, offsetx:number=0, offsety:number=0){\r\n        this.phaserGame.mainScene.addPreloader(()=>{\r\n            const path: string = this.path(fileName)\r\n            const width:number = metadata[path.replace(\"../\", \"\")].width;\r\n            const height:number = metadata[path.replace(\"../\", \"\")].height;\r\n            const frameWidth = width/widthImgs;\r\n            const frameHeight = height/heightImgs;\r\n            this.phaserGame.mainScene.load.spritesheet(spriteName, path, {\r\n                frameWidth:frameWidth,\r\n                frameHeight:frameHeight\r\n            });\r\n            // this.spriteNameToPath[spriteName] = path;\r\n        });\r\n    }\r\n\r\n    loadSpriteWithDimensions(spriteName:string, fileName:string, frameWidth:number, frameHeight:number, offsetx:number=0, offsety:number=0){\r\n    }\r\n\r\n    loadSpriteOverlapping(spriteName:string, fileName:string){\r\n    }\r\n\r\n    addAnimation(spriteName:string, animationName:string, spriteNumbers:Array<number>, delay=1){\r\n        this.phaserGame.mainScene.addCreator(()=>{\r\n            const anims = this.phaserGame.mainScene.anims;\r\n            anims.create(\r\n                {\r\n                    key:animationName,\r\n                    frames: anims.generateFrameNumbers(spriteName, {\r\n                        frames: spriteNumbers                    \r\n                    }),\r\n                    frameRate: Math.floor(30 / delay),\r\n                    repeat:-1 \r\n                }\r\n            )\r\n        });\r\n    }\r\n\r\n    getAnimation(animationName:string):SpriteAnimation{\r\n        // to remove\r\n        return SpriteAnimation.create(animationName, \"\", [], 0);\r\n    }\r\n\r\n    getRGBs(animationName:string=null, spriteNumber:number = 0, width:number=null, height:number=null):ImageData{\r\n        return new ImageData(0, 0);\r\n    }\r\n\r\n    static create():PhaserSpriteManager{\r\n        return new PhaserSpriteManager();\r\n    }\r\n    private static spriteManager:PhaserSpriteManager = null;\r\n    static singeltonCreate():PhaserSpriteManager{\r\n        if (PhaserSpriteManager.spriteManager != null) return PhaserSpriteManager.spriteManager;\r\n        PhaserSpriteManager.spriteManager = new PhaserSpriteManager();\r\n        return PhaserSpriteManager.spriteManager;\r\n    }\r\n}", "import { Component } from \"../../component/component\";\r\nimport { IAnimationComponent } from \"../../component/components/animation/ianimation-component\";\r\nimport { GameDependencies } from \"../../dependencies/game-dependencies\";\r\nimport { Entity } from \"../../entity/entity\";\r\nimport { EntityUpdateArgs } from \"../../entity/entity-update-args\";\r\nimport { Game } from \"../../game\";\r\nimport { IEngineSprite } from \"../sprite-dependency/iengine-sprite\";\r\n\r\nexport class GenericAnimationComponent extends Component implements IAnimationComponent {\r\n    engineSprite: IEngineSprite;\r\n    spriteName: string;\r\n    public static fakeImageData: ImageData = new ImageData(1,1);\r\n    public static componentName:string = \"animation\"\r\n    constructor(game:GameDependencies, entityId:string){\r\n        super(\"animation\");\r\n        game.checkDependency(game.engineCreator);\r\n        this.engineSprite = game.engineCreator.createEngineSprite(entityId);\r\n    }\r\n    update(entity: Entity, args: EntityUpdateArgs): void {\r\n    }\r\n    getSpriteNumber(): void {\r\n    }\r\n    getRGBs(animationName?: string, spriteNumber?: number, width?: number, height?: number): ImageData {\r\n        return GenericAnimationComponent.fakeImageData;\r\n    }\r\n    setFilter(pixelData: ImageData): void {\r\n    }\r\n    setSprite(animationName: string): void {\r\n        if (animationName == this.spriteName)return;\r\n        this.spriteName = animationName;\r\n        this.engineSprite.setSprite(animationName);\r\n    }\r\n    setSpriteNumber(spriteName: string, spriteNumber: number): void {\r\n    }\r\n    public static create(game: GameDependencies, entityId:string): GenericAnimationComponent {\r\n        return new GenericAnimationComponent(game, entityId);\r\n    }\r\n}", "import { Component } from \"../../component/component\";\r\nimport { IPositionComponent } from \"../../component/components/position/iposition-component\";\r\nimport { GameDependencies } from \"../../dependencies/game-dependencies\";\r\nimport { GenericCameras } from \"../../dependencies/generic-cameras\";\r\nimport { ICameras } from \"../../dependencies/icameras\";\r\nimport { Entity } from \"../../entity/entity\";\r\nimport { EntityUpdateArgs } from \"../../entity/entity-update-args\";\r\nimport { EventType } from \"../../events/EventType\";\r\nimport { EventManager } from \"../../events/event-manager\";\r\nimport { Game } from \"../../game\";\r\nimport { IEngineSprite } from \"../sprite-dependency/iengine-sprite\";\r\n\r\n\r\nexport class GenericPositionComponent extends Component implements IPositionComponent{\r\n    // public phaserObject: Phaser.Physics.Matter.Sprite\r\n    public engineSprite: IEngineSprite;\r\n    public static componentName=\"position\";\r\n    events: EventManager;\r\n    entityId: string;\r\n    constructor(game:GameDependencies, entityId:string){\r\n        super(\"position\");\r\n        this.engineSprite = game.engineCreator.createEngineSprite(entityId);\r\n        this.engineSprite.setSprite(\"greyWalk\");\r\n        this.engineSprite.width = this.width;\r\n        this.engineSprite.height = this.height;\r\n        game.checkDependency(game.eventManager);\r\n        this.events = game.eventManager;\r\n        this.entityId = entityId;\r\n    }\r\n    private speedMultiplier:number=50;\r\n    private _vx:number=0;\r\n    get vx():number{\r\n        return this._vx;\r\n    }\r\n    set vx(vx:number){\r\n        this.engineSprite.faceRight = this.faceRight;\r\n        this.engineSprite.vx = vx*this.speedMultiplier;\r\n        this._vx = vx;\r\n        if(vx == 0){\r\n            if(this.faceY !== 0){\r\n                this.faceX = vx;\r\n            }\r\n        } else {\r\n            this.faceX = vx;\r\n            if(this.faceY !== 0 && this.vy == 0){\r\n                this.faceY = 0;\r\n            }\r\n        }\r\n    }\r\n    private _vy:number=0;\r\n    get vy():number{\r\n        return this._vy;\r\n    }\r\n    set vy(vy:number){\r\n        this.engineSprite.vy = vy;\r\n        this._vy = vy;\r\n        if(vy == 0){\r\n            if(this.faceX !== 0){\r\n                this.faceY = vy;\r\n            }\r\n        } else {\r\n            this.faceY = vy;\r\n            if(this.faceX !== 0 && this.vx == 0){\r\n                this.faceX = 0;\r\n            }\r\n        }\r\n    }\r\n    private _rotate:number=0;\r\n    get rotate():number{\r\n        return this._rotate;\r\n    }\r\n    set rotate(radiansToRotate:number){\r\n        this._rotate = radiansToRotate%(2*Math.PI);\r\n        this.engineSprite.rotate = radiansToRotate;\r\n    }\r\n    get x():number{\r\n        return this._x;\r\n    }\r\n    get y():number{\r\n        return this._y;\r\n    }\r\n    set x(newX:number){\r\n        this._x = newX;\r\n        this.events.emit(EventType.entityMoved, {\r\n            entityId: this.entityId,\r\n            x: this._x,\r\n            y: this._y\r\n        });\r\n    }\r\n    set y(newY:number){\r\n        this._y = newY;\r\n        this.events.emit(EventType.entityMoved, {\r\n            entityId: this.entityId,\r\n            x: this._x,\r\n            y: this._y\r\n        });\r\n    }\r\n    get width(){\r\n        return this.engineSprite.width;\r\n    }\r\n    set width(w:number){\r\n        this._width = w;\r\n        this.engineSprite.width = w;\r\n    }\r\n    get height(){\r\n        return this.engineSprite.height;\r\n    }\r\n    set height(h:number){\r\n        this.engineSprite.height = h;\r\n        this._height = h;\r\n    }\r\n    _x:number=0;\r\n    _y:number=0;\r\n    h: number=0;\r\n    private _width:number=100;\r\n    private _height:number=100;\r\n    flip:boolean = false;\r\n    _faceRight:boolean = true;\r\n    get faceRight(){\r\n        return this._faceRight;\r\n    }\r\n    set faceRight(value:boolean){\r\n        this._faceRight = value;\r\n        this.engineSprite.faceRight = value;\r\n    }\r\n    faceX:number=0;\r\n    faceY:number=0;\r\n    moved:boolean=false;\r\n    applyOffsets:boolean=true;\r\n\r\n    get pivotX(){\r\n        return this.engineSprite.pivotX;\r\n    }\r\n    get pivotY(){\r\n        return this.engineSprite.pivotY;\r\n    }\r\n    get anchorX(){\r\n        return this.engineSprite.anchorX;\r\n    }\r\n    get anchorY(){\r\n        return this.engineSprite.anchorY\r\n    }\r\n    set pivotX(value:number){\r\n        this.engineSprite.pivotX = value;\r\n    }\r\n    set pivotY(value:number){\r\n        this.engineSprite.pivotY = value;\r\n    }\r\n    set anchorX(value:number){\r\n        this.engineSprite.anchorX = value;\r\n    }\r\n    set anchorY(value:number){\r\n        this.engineSprite.anchorY = value;\r\n    }\r\n\r\n\r\n    update(entity:Entity, args:EntityUpdateArgs):void{\r\n        const delta = args.delta;\r\n        this.x += this.vx * delta;\r\n        this.y += this.vy * delta;\r\n        this.moved = !(this.vx == 0 && this.vy == 0);\r\n    }\r\n\r\n    static create(game:GameDependencies, entityId:string):GenericPositionComponent{\r\n        return new GenericPositionComponent(game, entityId);\r\n    }\r\n}", "import { GameDependencies } from \"../dependencies/game-dependencies\";\r\nimport { PixiGame } from \"./pixi-game\";\r\n\r\nexport class PixiDependencies extends GameDependencies{\r\n    pixiGame:PixiGame;\r\n}", "import { Application, Sprite, IApplicationOptions, Container, Assets, AssetsClass, AnimatedSprite, Spritesheet, BaseTexture, IAutoDetectOptions, IBaseTextureOptions, ISize, Resource, ISpritesheetData, ISpritesheetFrameData, spritesheetAsset, Texture, FrameObject} from 'pixi.js';\r\nimport { metadata } from '../../metadata';\r\nimport { TileComponent } from '../../components/tile-component/tile-component';\r\nimport { Tile } from '../../components/tile-component/tile';\r\nimport { GenericCameras } from '../dependencies/generic-cameras';\r\nimport { GameDependencies } from '../dependencies/game-dependencies';\r\n\r\ntype Dict<T> = {\r\n    [key: string]: T;\r\n}\r\ntype SpriteType = Sprite;\r\nexport class PixiGame {\r\n    tileSprites: {[key:string]:SpriteType} = {};\r\n    width:number;\r\n    height:number;\r\n    xBound:number = 64;//how far left of 0 should we render tiles\r\n    yBound:number = 64;//how far above 0 should we render tiles\r\n    spriteNameToAnimationName: {[key:string]: string[]} = {};\r\n    outViewSprites: SpriteType[] = [];\r\n    ptime: number;\r\n    metadata: {[key:string]: {width:number, height:number}};\r\n    private tileKey(tile:Tile){\r\n        return `${tile.tileX}:${tile.tileY}`\r\n    }\r\n    private getInViewTiles(tiles:TileComponent, cameras:GenericCameras){\r\n        const inViewTiles:{[key:string]:Tile} = {};\r\n        const xBound = this.xBound;\r\n        const yBound = this.yBound;\r\n        // const t = performance.now();\r\n        for (let x=-xBound;x<this.width+xBound;x+=tiles.tileWidth){\r\n            const dataX = cameras.untransformX(x);\r\n            for (let y=-yBound;y<this.height+yBound;y+=tiles.tileWidth){\r\n                const dataY = cameras.untransformY(y);\r\n                const tilesAtCoord = tiles.coordToTile(dataX, dataY);\r\n                if (tilesAtCoord.length == 0) continue;\r\n                const tileAtCoord = tilesAtCoord[0];\r\n                const key = this.tileKey(tileAtCoord);\r\n                inViewTiles[key] = tileAtCoord;\r\n            }\r\n        }\r\n        // console.log(performance.now() - t);\r\n        return inViewTiles;\r\n    }\r\n    private arrangeTilesInView(tiles:TileComponent, cameras:GenericCameras, outViewSprites:SpriteType[] = []){\r\n        const width = this.width;\r\n        const height = this.height;\r\n        const xBound = this.xBound;\r\n        const yBound = this.yBound;\r\n        let dataX;\r\n        let dataY;\r\n        for (let x=-xBound;x<width+xBound;x+=tiles.tileWidth){\r\n            dataX = cameras.untransformX(x);\r\n            for (let y=-yBound;y<height+yBound;y+=tiles.tileWidth){\r\n                dataY = cameras.untransformY(y);\r\n                const tilesAtCoord = tiles.coordToTile(dataX, dataY);\r\n                if (tilesAtCoord.length == 0) continue;\r\n                const tileAtCoord = tilesAtCoord[0];\r\n                const spriteName = tileAtCoord.spriteIds[0].spriteName;\r\n                const spriteNum = tileAtCoord.spriteIds[0].spriteNumber;\r\n                const spriteSheet = this.spriteNameToSpriteSheet[spriteName];\r\n                const key = this.tileKey(tileAtCoord);\r\n                let tileSprite = this.tileSprites[key];\r\n                if (tileSprite == null && this.outViewSprites.length == 0){\r\n                    tileSprite = new Sprite(spriteSheet.textures[spriteNum]);\r\n                    tileSprite.width = tiles.tileWidth + 2;\r\n                    tileSprite.height = tiles.tileWidth + 2;\r\n                    this.tileSprites[key] = tileSprite;\r\n                    this.container.addChild(tileSprite);\r\n                }\r\n                if (tileSprite == null && this.outViewSprites.length > 0){\r\n                    tileSprite = this.outViewSprites.pop();\r\n                    tileSprite.texture = spriteSheet.textures[spriteNum];\r\n                    this.tileSprites[key] = tileSprite;\r\n                }\r\n                tileSprite.x = cameras.transformX(tiles.tileCoordToReal(tileAtCoord.tileX));\r\n                tileSprite.y = cameras.transformY(tiles.tileCoordToReal(tileAtCoord.tileY));\r\n            }\r\n        }\r\n    }\r\n    private removeExisitingSpriteById(spriteKey:string){\r\n        const tileSprite = this.tileSprites[spriteKey];\r\n        delete this.tileSprites[spriteKey];\r\n        this.outViewSprites.push(tileSprite);\r\n        return tileSprite;\r\n    }\r\n    private removeOutOfViewSprites(inViewTiles:{[key:string]:Tile}){\r\n        for(let key in this.tileSprites){\r\n            const existingSprite = this.tileSprites[key];\r\n            if (!(key in inViewTiles)){\r\n                const sprite = this.removeExisitingSpriteById(key);\r\n            }\r\n        }\r\n    }\r\n    async renderTiles(tiles: TileComponent, cameras:GenericCameras) {\r\n        const inViewTiles = this.getInViewTiles(tiles, cameras);\r\n        this.removeOutOfViewSprites(inViewTiles);\r\n        this.arrangeTilesInView(tiles, cameras, this.outViewSprites);\r\n    }\r\n    private loader: AssetsClass;\r\n    spriteNameToTexturePromise: {[key:string]:Promise<Texture>} = {};\r\n    spriteNameToTexture: {[key:string]:Texture} = {};\r\n    spriteNameToAtlas: {[key:string]:ISpritesheetData} = {};\r\n    animationNameToSpriteSheet: {[key:string]:Spritesheet} = {};\r\n    spriteNameToSpriteSheet: {[key:string]:Spritesheet} = {};\r\n    animationNameToParsed: {[key:string]:boolean} = {};\r\n    constructor(imgMetaData:{[key:string]:{width:number, height:number}}){\r\n        this.metadata = imgMetaData ?? metadata;\r\n        this.app = new Application({\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        });\r\n        this.loader = Assets;\r\n        document.body.appendChild(this.app.view as any);//I think not taking ICanvas is a bug.\r\n        const canvas = this.app.renderer.view;\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n        //@ts-ignore\r\n        canvas.style.margin = \"0\";\r\n        //@ts-ignore\r\n        canvas.style.padding = \"0\";\r\n        //@ts-ignore\r\n        canvas.style.overflow = \"hidden\";\r\n        //@ts-ignore\r\n        canvas.style.position = \"fixed\";\r\n        //@ts-ignore\r\n        canvas.style.top = \"0px\";\r\n        //@ts-ignore\r\n        canvas.style.left = \"0px\";\r\n        this.container = new Container();\r\n        this.app.stage.addChild(this.container);\r\n        this.width = this.app.view.width;\r\n        this.height = this.app.view.height;\r\n    }\r\n    app: Application;\r\n    container: Container;\r\n    private spriteDir: string = \"../sprites/\"\r\n    private path(fileName:string){\r\n        return this.spriteDir + fileName;\r\n    }\r\n    start(){\r\n    }\r\n    private getAtlasFrames(sheetWidth:number, sheetHeight:number, widthImgs:number, heightImgs:number){\r\n        const frameWidth = sheetWidth/widthImgs;\r\n        const frameHeight = sheetHeight/heightImgs;\r\n        const frames: Dict<ISpritesheetFrameData> = {};\r\n        let frameNumber = 0;\r\n        for (let y=0;y<sheetHeight;y+=frameHeight){\r\n            for(let x=0;x<sheetWidth;x+=frameWidth){\r\n                const frameKey = `${frameNumber}`;\r\n                frames[frameKey] = {\r\n                    frame:{x:x, y:y, w:frameWidth, h:frameHeight},\r\n                    sourceSize: {w:frameWidth, h:frameHeight},\r\n                    spriteSourceSize: {x:0,y:0}\r\n                };\r\n                frameNumber++;\r\n            }\r\n        }\r\n        return frames;\r\n    }\r\n    loadSprite(spriteName:string, fileName:string, widthImgs:number, heightImgs:number, offsetx:number=0, offsety:number=0){\r\n        this.spriteNameToAnimationName[spriteName] = [];\r\n        const path: string = this.path(fileName);\r\n        const texturePromise = this.loader.load(path);\r\n        this.spriteNameToTexturePromise[spriteName] = texturePromise;\r\n        texturePromise.then((texture)=>{\r\n            this.spriteNameToTexture[spriteName] = texture;\r\n        });\r\n        const width:number = this.metadata[path.replace(\"../\", \"\")].width;\r\n        const height:number = this.metadata[path.replace(\"../\", \"\")].height;\r\n        const frames = this.getAtlasFrames(width, height, widthImgs, heightImgs);\r\n        const atlas: ISpritesheetData = {\r\n            frames:frames,\r\n            meta:{\r\n                // image: 'images/spritesheet.png',\r\n                // format:\"RGBA8888\",\r\n                // size: { w: 128, h: 32 },\r\n                scale: \"1\"\r\n            },\r\n            animations: {}\r\n        };\r\n        this.spriteNameToAtlas[spriteName] = atlas;\r\n    }\r\n    async addAnimation(spriteName: string, animationName: string, spriteNumbers: number[], delay?: number){\r\n        // load sprite must be loaded by this.loadSprite\r\n        if (!(spriteName in this.spriteNameToAnimationName)){\r\n            console.log(`Skipped Animation: ${spriteName}`);\r\n            return;\r\n        }\r\n        this.spriteNameToAnimationName[spriteName].push(animationName);\r\n        const texture = await this.spriteNameToTexturePromise[spriteName];\r\n        const atlas = this.spriteNameToAtlas[spriteName];\r\n        if (atlas == null) return;// temporarily skip.\r\n        const allFrames = atlas.frames;\r\n        const animationFrames:Dict<ISpritesheetFrameData> = {};\r\n        spriteNumbers.forEach(num => {\r\n            const frameKey = num.toString();\r\n            animationFrames[frameKey] = allFrames[frameKey];\r\n        });\r\n        atlas.animations[animationName] = spriteNumbers.map((n)=>n.toString());\r\n    }\r\n\r\n    getSpriteAnimation(animationName:string){\r\n        const spriteSheet = this.animationNameToSpriteSheet[animationName];\r\n        if (!(animationName in this.animationNameToParsed)){\r\n            this.animationNameToParsed[animationName] = true;\r\n        }\r\n        if (spriteSheet == null || !(animationName in spriteSheet.animations)){\r\n            // console.log(`Animation not found: ${animationName}`);\r\n            return;\r\n        }\r\n        const animationFrames = spriteSheet.animations[animationName];\r\n        const animation = new AnimatedSprite(animationFrames);\r\n        animation.animationSpeed = 0.1666;\r\n        animation.play();\r\n        this.container.addChild(animation);\r\n        this.container.sortableChildren = true;\r\n        return animation;\r\n    }\r\n\r\n    async finishLoading(){\r\n        const textures = this.spriteNameToTexturePromise;\r\n        for(let i in textures){\r\n            const texture = textures[i];\r\n            await texture;\r\n        }\r\n        this.finishSpriteSheetGeneration();\r\n        const spriteSheets = this.spriteNameToSpriteSheet;\r\n        for (let i in spriteSheets){\r\n            const spriteSheet = spriteSheets[i];\r\n            spriteSheet.parse();\r\n        }\r\n    }\r\n\r\n    private finishSpriteSheetGeneration(){\r\n        // Create SpriteSheets\r\n        const spriteToAnimation = this.spriteNameToAnimationName\r\n        for (let spriteName in spriteToAnimation){\r\n            const animationNames = spriteToAnimation[spriteName];\r\n            const texture = this.spriteNameToTexture[spriteName];\r\n            const atlas = this.spriteNameToAtlas[spriteName];\r\n            const spriteSheet = new Spritesheet(texture, atlas);\r\n            this.spriteNameToSpriteSheet[spriteName] = spriteSheet;\r\n            animationNames.forEach((animationName)=>{\r\n                this.animationNameToSpriteSheet\r\n                this.animationNameToSpriteSheet[animationName] = spriteSheet;\r\n            });\r\n        }\r\n    }\r\n\r\n    private static pixiGame:PixiGame = null;\r\n    public static createSingleton(deps:GameDependencies){\r\n        if (this.pixiGame != null) return PixiGame.pixiGame;\r\n        const metadata = deps.imgMetaData;\r\n        PixiGame.pixiGame = new PixiGame(metadata);\r\n        return PixiGame.pixiGame;\r\n    }\r\n}", "import { Spritesheet } from \"pixi.js\";\r\nimport { GameDependencies } from \"../dependencies/game-dependencies\";\r\nimport { ISpriteLoader } from \"../renderers/isprite-loader\";\r\nimport { PixiDependencies } from \"./pixi-dependencies\";\r\nimport { PixiGame } from \"./pixi-game\";\r\n\r\nexport class PixiSpriteManager implements ISpriteLoader {\r\n    pixiGame: PixiGame;\r\n    constructor(pixiGame:PixiGame){\r\n        this.pixiGame = pixiGame;\r\n    }\r\n    async onLoad(callback?: () => void): Promise<any> {\r\n        await this.pixiGame.finishLoading();\r\n        if (callback == null)return;\r\n        callback();\r\n    }\r\n    loadSprite(spriteName: string, fileName: string, widthImgs: number, heightImgs: number, offsetx?: number, offsety?: number): void {\r\n        this.pixiGame.loadSprite(spriteName, fileName, widthImgs, heightImgs, offsetx, offsety);\r\n    }\r\n    loadSpriteWithDimensions(spriteName: string, fileName: string, frameWidth: number, frameHeight: number, offsetx: number, offsety: number): void {\r\n    }\r\n    loadSpriteOverlapping(spriteName: string, fileName: string): void {\r\n    }\r\n    addAnimation(spriteName: string, animationName: string, spriteNumbers: number[], delay?: number): void {\r\n        this.pixiGame.addAnimation(spriteName, animationName, spriteNumbers, delay)\r\n    }\r\n    public static create(gameDependencies:PixiDependencies){\r\n        gameDependencies.checkDependency(gameDependencies.pixiGame);\r\n        return new PixiSpriteManager(gameDependencies.pixiGame);\r\n    };\r\n}", "import { IEngineSprite } from \"./iengine-sprite\";\r\nimport { GameDependencies } from \"../../dependencies/game-dependencies\";\r\nimport { IEngineCreator } from \"./iengine-creator\";\r\nimport { PixieEngineCreator } from \"./pixie-engine-creator\";\r\nimport { PixiDependencies } from \"../pixi-dependencies\";\r\nimport { PixiGame } from \"../pixi-game\";\r\nimport { AnimatedSprite } from \"pixi.js\";\r\n\r\nexport class PixieEngineSprite implements IEngineSprite {\r\n    pixieGame: PixiGame;\r\n    sprite: AnimatedSprite;\r\n    constructor(gameDependencies:PixiDependencies){\r\n        gameDependencies.checkDependency(gameDependencies.pixiGame);\r\n        this.pixieGame = gameDependencies.pixiGame;\r\n        this.sprite = this.pixieGame.getSpriteAnimation(\"greyWalk\");\r\n        this.pivotX = .5;\r\n        this.pivotY = 1;\r\n        this.anchorX = .5;\r\n        this.anchorY = 1;\r\n    }\r\n    private _width: number;\r\n    private _height: number;\r\n    private _faceRight: boolean;\r\n    private _x: number;\r\n    private _y: number;\r\n    private _vx: number;\r\n    private _rotate:number=0;\r\n\r\n    public get rotate(){\r\n        return this._rotate;\r\n    }\r\n\r\n    public set rotate(newRotate:number){\r\n        this._rotate = newRotate;\r\n        this.sprite.rotation = newRotate;\r\n    }\r\n\r\n    /**\r\n     * Getter width\r\n     * @return {number}\r\n     */\r\n\tpublic get width(): number {\r\n\t\treturn this.sprite.width;\r\n\t}\r\n\r\n    /**\r\n     * Getter height\r\n     * @return {number}\r\n     */\r\n\tpublic get height(): number {\r\n\t\treturn this.sprite.height;\r\n\t}\r\n\r\n    /**\r\n     * Getter faceRight\r\n     * @return {boolean}\r\n     */\r\n\tpublic get faceRight(): boolean {\r\n\t\treturn this._faceRight;\r\n\t}\r\n\r\n    /**\r\n     * Getter x\r\n     * @return {number}\r\n     */\r\n\tpublic get x(): number {\r\n\t\treturn this.sprite.x;\r\n\t}\r\n\r\n    /**\r\n     * Getter y\r\n     * @return {number}\r\n     */\r\n\tpublic get y(): number {\r\n\t\treturn this.sprite.y;\r\n\t}\r\n\r\n    /**\r\n     * Getter vx\r\n     * @return {number}\r\n     */\r\n\tpublic get vx(): number {\r\n\t\treturn this._vx;\r\n\t}\r\n\r\n    /**\r\n     * Getter vy\r\n     * @return {number}\r\n     */\r\n\tpublic get vy(): number {\r\n\t\treturn this._vy;\r\n\t}\r\n\r\n    /**\r\n     * Setter width\r\n     * @param {number} value\r\n     */\r\n\tpublic set width(value: number) {\r\n\t\tthis.sprite.width = value;\r\n\t}\r\n\r\n    /**\r\n     * Setter height\r\n     * @param {number} value\r\n     */\r\n\tpublic set height(value: number) {\r\n        this.sprite.height = value;\r\n\t}\r\n\r\n    /**\r\n     * Setter faceRight\r\n     * @param {boolean} value\r\n     */\r\n\tpublic set faceRight(value: boolean) {\r\n        if (value != this._faceRight){\r\n            if (value){\r\n                this.sprite.scale.x = Math.abs(this.sprite.scale.x);\r\n            } else {\r\n                this.sprite.scale.x = Math.abs(this.sprite.scale.x) * -1;\r\n            }\r\n        }\r\n\t\tthis._faceRight = value;\r\n\t}\r\n\r\n    /**\r\n     * Setter x\r\n     * @param {number} value\r\n     */\r\n\tpublic set x(value: number) {\r\n        this.sprite.x = value;\r\n\t}\r\n\r\n    /**\r\n     * Setter y\r\n     * @param {number} value\r\n     */\r\n\tpublic set y(value: number) {\r\n        this.sprite.y = value;\r\n        this.sprite.zIndex = value;\r\n\t}\r\n\r\n    /**\r\n     * Setter vx\r\n     * @param {number} value\r\n     */\r\n\tpublic set vx(value: number) {\r\n\t\tthis._vx = value;\r\n\t}\r\n\r\n    /**\r\n     * Setter vy\r\n     * @param {number} value\r\n     */\r\n\tpublic set vy(value: number) {\r\n\t\tthis._vy = value;\r\n\t}\r\n    private _vy: number;\r\n    \r\n    get pivotX(){\r\n        return this.sprite.pivot.x;\r\n    }\r\n    get pivotY(){\r\n        return this.sprite.pivot.y;\r\n    }\r\n    get anchorX(){\r\n        return this.sprite.anchor.x;\r\n    }\r\n    get anchorY(){\r\n        return this.sprite.anchor.y;\r\n    }\r\n    set pivotX(value:number){\r\n        this.sprite.anchor.x = value;\r\n    }\r\n    set pivotY(value:number){\r\n        this.sprite.pivot.y = value;\r\n    }\r\n    set anchorX(value:number){\r\n        this.sprite.pivot.x = value;\r\n    }\r\n    set anchorY(value:number){\r\n        this.sprite.anchor.y = value;\r\n    }\r\n    setSprite(animationName: string): void {\r\n        // console.log(`setSprite to ${animationName}`)\r\n        const newSprite = this.pixieGame.getSpriteAnimation(animationName);\r\n        newSprite.x = this.sprite.x;\r\n        newSprite.y = this.sprite.y;\r\n        newSprite.width = this.sprite.width;\r\n        newSprite.height = this.sprite.height;\r\n        newSprite.scale.x = this.sprite.scale.x;\r\n        newSprite.pivot.x = this.pivotX;\r\n        newSprite.pivot.y = this.pivotY;\r\n        newSprite.anchor.x = this.anchorX;\r\n        newSprite.anchor.y = this.anchorY;\r\n        this.pixieGame.container.removeChild(this.sprite);\r\n        this.sprite = newSprite;\r\n    }\r\n    public static create(gameDependencies:PixiDependencies){\r\n        return new PixieEngineSprite(gameDependencies);\r\n    }\r\n}", "import { GameDependencies } from \"../../dependencies/game-dependencies\";\r\nimport { PixiDependencies } from \"../pixi-dependencies\";\r\nimport { IEngineCreator } from \"./iengine-creator\";\r\nimport { IEngineSprite } from \"./iengine-sprite\";\r\nimport { PixieEngineSprite } from \"./pixi-engine-sprite\";\r\n\r\nexport class PixieEngineCreator implements IEngineCreator {\r\n    gameDependencies: PixiDependencies;\r\n    idToEngineSprite: {[key:string]:PixieEngineSprite} = {};\r\n    constructor(gameDependencies:PixiDependencies){\r\n        this.gameDependencies = gameDependencies;\r\n    }\r\n    createEngineSprite(entityId: string): PixieEngineSprite{\r\n        if (entityId in this.idToEngineSprite) return this.idToEngineSprite[entityId];\r\n        const entity = PixieEngineSprite.create(this.gameDependencies);\r\n        this.idToEngineSprite[entityId] = entity;\r\n        return entity;\r\n    }\r\n    public static create(gameDependencies:PixiDependencies){\r\n        return new PixieEngineCreator(gameDependencies);\r\n    }\r\n}", "import { FirstEntity } from \"../../entities/first-entity\";\r\nimport { Entity } from \"../entity/entity\";\r\nimport { Game } from \"../game\";\r\nimport { Renderer } from \"../renderers/render\";\r\nimport { RenderOptions } from \"../renderers/render-options\";\r\nimport { SpriteManager } from \"../renderers/sprite-manager\";\r\nimport { SystemArgs } from \"../system/system-args\";\r\n\r\nexport class GenericRenderer implements Renderer{\r\n    constructor(){}\r\n    offset: number[];\r\n    spriteFilter(filter: ImageData, x: number, y: number, width: number, height: number, spriteNumber: number, options: RenderOptions): void {\r\n    }\r\n    cbox(): void {\r\n    }\r\n    getOffset(): number[] {\r\n        return [0,0];\r\n    }\r\n    setOffset(offset: number[]): void {\r\n    }\r\n    sprite(spriteName: string, x: number, y: number, width: number, height: number, spriteNumber: number, options: RenderOptions): void {\r\n    }\r\n    text(text: string, x: number, y: number, size: number): void {\r\n    }\r\n    circle(x: number, y: number, r: number): void {\r\n    }\r\n    line(x1: number, y1: number, x2: number, y2: number): void {\r\n    }\r\n    spriteManager: SpriteManager;\r\n    static create():GenericRenderer{\r\n        return new GenericRenderer();\r\n    }\r\n}", "import { AnimationComponent2 } from \"../../../components/animation-component\";\r\nimport { Component } from \"../../component/component\";\r\nimport { IPositionComponent } from \"../../component/components/position/iposition-component\";\r\nimport { PositionComponent } from \"../../component/components/position/position-component\";\r\nimport { GenericCameras } from \"../../dependencies/generic-cameras\";\r\nimport { ICameras } from \"../../dependencies/icameras\";\r\nimport { Entity } from \"../../entity/entity\";\r\nimport { EntityUpdateArgs } from \"../../entity/entity-update-args\";\r\nimport { EventType } from \"../../events/EventType\";\r\nimport { EventManager } from \"../../events/event-manager\";\r\nimport { Game } from \"../../game\";\r\nimport { EntitySystem } from \"../../system/system\";\r\nimport { SystemArgs } from \"../../system/system-args\";\r\nimport { IEngineCreator } from \"../sprite-dependency/iengine-creator\";\r\nimport { PixiGame } from \"../pixi-game\";\r\nimport { TileComponent } from \"../../../components/tile-component/tile-component\";\r\n\r\nexport class GenericRenderSystem extends EntitySystem {\r\n    creator: IEngineCreator;\r\n    cameras: GenericCameras;\r\n    pixieGame: PixiGame;\r\n    constructor(game:Game, entityId:string){\r\n        super(game);\r\n        const deps = this.game.gameDependencies;\r\n        deps.checkDependency(deps.engineCreator);\r\n        this.creator = deps.engineCreator;\r\n        deps.checkDependency(deps.cameras);\r\n        this.cameras = <GenericCameras>deps.cameras;\r\n        game.eventManager.addListener(EventType.entityMoved, (event)=>{\r\n            const newX:number = event.eventData.x;\r\n            const newY:number = event.eventData.y;\r\n            const entityId:number = event.eventData.entityId;\r\n            const sprite = this.creator.createEngineSprite(entityId.toString());\r\n            sprite.x = this.cameras.transformX(newX);\r\n            sprite.y = this.cameras.transformY(newY);\r\n        })\r\n        this.pixieGame = PixiGame.createSingleton(game.gameDependencies);\r\n    }\r\n    oncePerLoop = (args:SystemArgs) => {\r\n        const first = args.entity;\r\n        const tiles = <TileComponent>first.getComponent(\"tile\");\r\n        this.pixieGame.renderTiles(tiles, this.cameras);\r\n    };\r\n    targetComponents:Component[];\r\n\r\n    apply(args:SystemArgs):void{\r\n        // const entity = args.entity;\r\n        // const position = <PositionComponent>entity.getComponent(\"position\");\r\n        // const animation = <AnimationComponent>entity.getComponent(\"animation\");\r\n\r\n    };\r\n    applyEvents(entity:Entity, eventManager:EventManager):void{\r\n    }\r\n    static create(game:Game, entityId?:string):GenericRenderSystem{\r\n    return new GenericRenderSystem(game, entityId);\r\n    };\r\n    \r\n}", "import { ComponentFactory } from \"../component/component-factory\";\r\nimport { GenericCameras } from \"../dependencies/generic-cameras\";\r\nimport { EntityFactory } from \"../entity/entity-factory\";\r\nimport { EventManager } from \"../events/event-manager\";\r\nimport { Game } from \"../game\";\r\nimport { GenericAnimationComponent } from \"./pixi-components/generic-animation-component\";\r\nimport { GenericPositionComponent } from \"./pixi-components/generic-position-component\";\r\nimport { PixiDependencies } from \"./pixi-dependencies\";\r\nimport { PixiGame } from \"./pixi-game\";\r\nimport { PixiSpriteManager } from \"./pixi-sprite-manager\";\r\nimport { PixieEngineCreator } from \"./sprite-dependency/pixie-engine-creator\";\r\nimport { GenericRenderer } from \"./generic-render\";\r\nimport { GenericRenderSystem } from \"./systems/generic-render-system\";\r\n\r\nexport function pixiGameBuilder(metadata:{[key:string]: {width:number, height:number}} = null):Game{\r\n    const deps = new PixiDependencies()\r\n    deps.imgMetaData = metadata;\r\n    deps.pixiGame = PixiGame.createSingleton(deps); \r\n    deps.spriteManager = PixiSpriteManager.create(deps);\r\n    // deps.cameras = \r\n    // deps.renderer = HtmlRenderer.create();\r\n    deps.renderer = GenericRenderer.create();\r\n    deps.cameras = GenericCameras.create();\r\n    deps.engineCreator = PixieEngineCreator.create(deps);\r\n    deps.eventManager = EventManager.create();\r\n    deps.componentFactory = ComponentFactory.create(deps);\r\n    deps.entityFactory = EntityFactory.create(deps);\r\n\r\n    const game = Game.createCustom(deps)\r\n    game.registerComponent(GenericPositionComponent);\r\n    game.registerComponent(GenericAnimationComponent);\r\n    game.addSystem(GenericRenderSystem.create(game));\r\n    game.addStarter(()=>{\r\n        setTimeout(()=>deps.pixiGame.start(), 5000);\r\n    });\r\n    game.addStarter(()=>{\r\n        deps.pixiGame.app.ticker.add((delta)=>{\r\n            game.step(delta*15);\r\n        });\r\n    });\r\n    return game;\r\n}", "import { Component } from \"../engine/component/component\";\r\nimport { IPositionComponent } from \"../engine/component/components/position/iposition-component\";\r\nimport { PositionComponent } from \"../engine/component/components/position/position-component\";\r\nimport { GameDependencies } from \"../engine/dependencies/game-dependencies\";\r\nimport { Entity } from \"../engine/entity/entity\";\r\nimport { EntityUpdateArgs } from \"../engine/entity/entity-update-args\";\r\nimport { Game } from \"../engine/game\";\r\nimport { GenericPositionComponent } from \"../engine/pixi-integration/pixi-components/generic-position-component\";\r\nimport { WeaponEntity } from \"../entities/weapon-entity\";\r\n\r\nexport class WeaponComponent extends Component {\r\n    constructor(gameDependencies:GameDependencies, entityId:string){\r\n        super(\"weapon\");\r\n        this.game = gameDependencies.game;\r\n    }\r\n    weaponEntity: Entity = null;\r\n    weaponPosition: GenericPositionComponent = null;\r\n    weaponOffsetX: number = 0;\r\n    weaponOffsetY: number = -.5;\r\n    game: Game;\r\n    wobble:number=0;\r\n    rotationSpeed:number = .1;\r\n    holdWeapon(){\r\n        this.weaponOffsetX = .1;\r\n        this.weaponOffsetY = -.45\r\n        this.weaponPosition.rotate = 2;\r\n    }\r\n    sheatheWeapon(){\r\n        this.weaponOffsetX = .5;\r\n        this.weaponOffsetY = -.5;\r\n        this.weaponPosition.rotate = 5;\r\n    }\r\n    sheatheBack(){\r\n        this.weaponOffsetX = -.6;\r\n        this.weaponOffsetY = -.75;\r\n        this.weaponPosition.rotate = 3.2;\r\n        this.rotationSpeed = 0;\r\n    }\r\n    flip(faceRight:boolean){\r\n        if (faceRight == this.weaponPosition.faceRight)return;\r\n        this.weaponPosition.faceRight = faceRight;\r\n        this.weaponOffsetX = faceRight ? -Math.abs(this.weaponOffsetX):Math.abs(this.weaponOffsetX);\r\n    }\r\n    spin(){\r\n        this.weaponOffsetX = 0;\r\n        this.weaponOffsetY = -.5;\r\n        this.weaponPosition.rotate = 5;\r\n        this.rotationSpeed = .1;\r\n    }\r\n    zeroOut(){\r\n        this.weaponOffsetX = 0;\r\n        this.weaponOffsetY = 0;\r\n        this.weaponPosition.rotate = 0;\r\n        this.rotationSpeed = .0;\r\n    }\r\n    update(entity:Entity, args:EntityUpdateArgs){\r\n        if (this.weaponEntity == null){\r\n            this.weaponEntity = this.game.addEntity(\"weapon\");\r\n            this.weaponPosition = <GenericPositionComponent>this.weaponEntity.getComponent(\"position\");\r\n        }\r\n        const wielderPosition = <GenericPositionComponent>entity.getComponent(\"position\");\r\n        this.flip(wielderPosition.faceRight);\r\n        this.weaponPosition.x = wielderPosition.x + this.weaponOffsetX * wielderPosition.width + Math.ceil(Math.sin(this.wobble))*5;\r\n        this.weaponPosition.y = wielderPosition.y + this.weaponOffsetY * wielderPosition.height;\r\n        this.wobble += 0;\r\n        this.weaponPosition.rotate+=this.rotationSpeed;\r\n    }\r\n    static create(gameDependencies:GameDependencies, entityId:string):WeaponComponent{\r\n        return new WeaponComponent(gameDependencies, entityId);\r\n    }\r\n}", "import { buildEntities } from \"./builders/entity-builder\";\r\nimport { buildSprites } from \"./builders/sprite-builder\";\r\nimport { ClickSystem } from \"./systems/click-system\";\r\nimport { CollisionSystem } from \"./systems/collision-system\";\r\nimport { CropSystem } from \"./systems/crop-system\";\r\nimport { HealthSystem } from \"./systems/health-system\";\r\nimport { InventorySystem } from \"./systems/inventory-system\";\r\nimport { MapBuilderSystem } from \"./systems/map-builder-system\";\r\nimport { NeuralFightSystem } from \"./systems/neural-fight-system\";\r\nimport { ParticleSystem } from \"./systems/particle-system\";\r\nimport { PlaceItemSystem } from \"./systems/place-item-system\";\r\nimport { PositionSystem } from \"./systems/position-system\";\r\nimport { ProjectileSystem } from \"./systems/projectile-system\";\r\nimport { WasdSystem } from \"./systems/wasd-system\";\r\nimport { Game } from './engine/game';\r\nimport { ClickableComponent } from \"./components/clickable-component\";\r\nimport { CropComponent } from \"./components/crop-component\";\r\nimport { FightComponent } from \"./components/fight-component\";\r\nimport { HealthComponent } from \"./components/health-component\";\r\nimport { InventoryComponent } from \"./components/inventory-component/inventory-component\";\r\nimport { NeuralFightComponent } from \"./components/neural-fight-component\";\r\nimport { ParticleComponent } from \"./components/particle-componet\";\r\nimport { PositionComponent } from \"./engine/component/components/position/position-component\";\r\nimport { PrimitiveComponent } from \"./components/primitive-component\";\r\nimport { ProjectileComponent } from \"./components/projectile-component\";\r\nimport { TileComponent } from \"./components/tile-component/tile-component\";\r\nimport { TransitionComponent } from \"./components/transitions/transition-component\";\r\nimport { WasdComponent } from \"./components/wasd-component\";\r\nimport { AnimationComponent } from \"./engine/component/components/animation/animation-component\";\r\nimport { PlaceItemComponent } from \"./components/place-item/place-item-component\";\r\nimport { CropHarvesterComponent } from \"./components/crop-harvester-component\";\r\nimport { TextComponent } from \"./components/text-component/text-component\";\r\nimport { createPhaserGame } from \"./engine/phaser-integration/phaser-builder\";\r\nimport { RenderSystem } from \"./systems/render-system\";\r\nimport { pixiGameBuilder } from \"./engine/pixi-integration/pixi-builder\";\r\nimport { GenericAnimationComponent } from \"./engine/pixi-integration/pixi-components/generic-animation-component\";\r\nimport { WeaponComponent } from \"./components/weapon-component\";\r\nfunction sharedComponents(game:Game){\r\n    game.registerComponent(WasdComponent);\r\n    game.registerComponent(CropComponent);\r\n    game.registerComponent(ProjectileComponent);\r\n    game.registerComponent(FightComponent);\r\n    game.registerComponent(HealthComponent);\r\n    game.registerComponent(NeuralFightComponent);\r\n    game.registerComponent(InventoryComponent);\r\n    game.registerComponent(ParticleComponent);\r\n    game.registerComponent(PrimitiveComponent);\r\n    game.registerComponent(TransitionComponent);\r\n    game.registerComponent(TileComponent);\r\n    game.registerComponent(ClickableComponent);\r\n    game.registerComponent(PlaceItemComponent);\r\n    game.registerComponent(CropHarvesterComponent);\r\n    game.registerComponent(TextComponent);\r\n    game.registerComponent(WeaponComponent);\r\n\r\n}\r\n\r\nfunction sharedSystems(game:Game){\r\n    game.addSystem(WasdSystem.create(game));\r\n    game.addSystem(CropSystem.create(game));\r\n    game.addSystem(CollisionSystem.create(game));\r\n    game.addSystem(ProjectileSystem.create(game));\r\n    // game.addSystem(FightSystem.create(game));\r\n    game.addSystem(HealthSystem.create(game));\r\n    game.addSystem(NeuralFightSystem.create(game));\r\n    game.addSystem(PlaceItemSystem.create(game));\r\n    game.addSystem(InventorySystem.create(game));\r\n    game.addSystem(ParticleSystem.create(game));\r\n    game.addSystem(MapBuilderSystem.create(game));\r\n    game.addSystem(ClickSystem.create(game));\r\n}\r\n\r\nfunction buildComponents(game:Game){\r\n    console.log(\"building game components\");\r\n    game.registerComponent(AnimationComponent);\r\n    game.registerComponent(PositionComponent);\r\n    sharedComponents(game);\r\n}\r\nexport function createPixiGame(){\r\n    console.log(\"creating pixi game\");\r\n    const game = pixiGameBuilder();\r\n    sharedSystems(game);\r\n    buildSprites(game);\r\n    buildEntities(game);\r\n    sharedComponents(game);\r\n    return game;\r\n}\r\n\r\nexport function createPhaserGameGeneric():Game{\r\n    console.log(\"creating phaser game\");\r\n    let game:Game = createPhaserGame();\r\n    sharedSystems(game);\r\n    buildSprites(game);\r\n    buildEntities(game);\r\n    sharedComponents(game);\r\n    return game;\r\n}\r\n\r\n\r\nexport function createGame(game:Game=null):Game{\r\n    if (game == null){\r\n        game = Game.create()\r\n    }\r\n    game.addSystem(PositionSystem.create(game));\r\n    game.addSystem(RenderSystem.create(game));\r\n    sharedSystems(game);\r\n    buildSprites(game)\r\n    buildEntities(game);\r\n    buildComponents(game);\r\n    return game;\r\n}", "import { PositionComponent } from './engine/component/components/position/position-component';\r\nimport { CropComponent } from './components/crop-component';\r\n\r\nimport { Game } from './engine/game';\r\nimport { ParticleComponent } from './components/particle-componet';\r\nimport { createPixiGame } from './game-builders';\r\nimport { AnimationComponent } from './engine/component/components/animation/animation-component';\r\nimport { Entity } from './engine/entity/entity';\r\nimport { PixiDependencies } from './engine/pixi-integration/pixi-dependencies';\r\nimport { GenericPositionComponent } from './engine/pixi-integration/pixi-components/generic-position-component';\r\nimport { WeaponComponent } from './components/weapon-component';\r\n\r\ndeclare var synaptic:any;\r\nexport declare var g:Game;\r\n\r\n\r\nfunction startGame(){\r\n    // let game:Game = createGame();\r\n    // let game:Game = createPhaserGameGeneric();\r\n    let game:Game = createPixiGame();\r\n    // game.entityFactory.componentFactory.createComponent(\"animation\");\r\n    game.gameDependencies.spriteManager.onLoad(()=>{\r\n\r\n    game.addEntity(\"first\");\r\n    const player = makePlayer();\r\n    const playerPosition = <PositionComponent>player.getComponent(\"position\");\r\n    const playerSword = <WeaponComponent> player.getComponent(\"weapon\");\r\n    setTimeout(()=>playerSword.holdWeapon(), 100);\r\n    game.gameDependencies.cameras.setMainCamera(playerPosition);\r\n\r\n    var villager = game.addEntity(\"villager\");\r\n    var component = <PositionComponent>villager.getComponent(\"position\");\r\n    let ac = <AnimationComponent>villager.getComponent(\"animation\");\r\n    ac.setSprite(\"arrowsword\");\r\n    component.x = 150;\r\n    component.y = 300;\r\n    component.vx = 0;\r\n    // component.height/=2\r\n    // component.width/=2\r\n    // ac.setSprite(\"grey\");\r\n    // component.height = 60\r\n\r\n    let sword = game.addEntity(\"weapon\");\r\n    const pos = <GenericPositionComponent>sword.getComponent(\"position\");\r\n    pos.x = 100;\r\n    pos.y = 100;\r\n    setInterval(()=>{\r\n        pos.rotate+=.1;\r\n    },1000/30);\r\n    \r\n    var deer = game.addEntity(\"deer\");\r\n    let deerPos = <PositionComponent>deer.getComponent(\"position\");\r\n    let deerAC = <AnimationComponent>deer.getComponent(\"animation\");\r\n    deerPos.x = 500;\r\n    deerPos.y = 100;\r\n\r\n    let particle: Entity = game.addEntity(\"particles\");\r\n    let particleC = <ParticleComponent>particle.getComponent(\"particles\");\r\n    particleC.targetParticles = 4;\r\n    let pPos = <PositionComponent>particle.getComponent(\"position\");\r\n    pPos.x = 150;\r\n    pPos.y = 400;\r\n    \r\n    const tileWidth = 64;\r\n    placeField(tileWidth*5, tileWidth*5, \"wheat\", tileWidth, 6);\r\n    placeField(tileWidth*12, tileWidth*5, \"corn\", tileWidth);\r\n    placeField(tileWidth*5, tileWidth*12, \"turnip\", tileWidth);\r\n    placeField(tileWidth*12, tileWidth*12, \"onion\", tileWidth);\r\n    // setTimeout(makePlayer, 1000);\r\n    function placeField(x:number,y:number, cropName:string, d:number=64, width:number=5){\r\n        var crop:Entity;\r\n        var cc:CropComponent;\r\n\r\n        for(var i:number=0;i<width;i++){\r\n            for(var i2:number=0;i2<width;i2++){\r\n                crop = addCrop(x+i*d, y+i2*d);\r\n                cc = <CropComponent>crop.getComponent(\"crop\");\r\n                cc.setCrop(cropName);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addCrop(x:number,y:number){\r\n        var crop = game.addEntity(\"crop\");\r\n        var component = <PositionComponent>crop.getComponent(\"position\");\r\n        component.x = x;\r\n        component.y = y;\r\n        return crop\r\n    }\r\n\r\n    function makePlayer(){\r\n        var player = game.addEntity(\"player\");\r\n        var pc= <PositionComponent>player.getComponent(\"position\");\r\n        var ac = <AnimationComponent>player.getComponent(\"animation\");\r\n        pc.x = 0;\r\n        pc.y = 0;\r\n        return player;\r\n    }\r\n    game.start();\r\n    //@ts-ignore\r\n    window.game = game;\r\n    return game;\r\n    });\r\n}\r\nif (typeof window !== 'undefined')\r\n{\r\n    const game = startGame();\r\n    /*\r\n    let game = createPixiGame();\r\n    let g = game.gameDependencies as PixiDependencies;\r\n    g.pixiGame.start();\r\n    g.spriteManager.onLoad(()=>{\r\n        console.log(\"hi\");\r\n    });\r\n    setTimeout(()=>{\r\n        const anim = g.pixiGame.getSpriteAnimation(\"greyWalk\");\r\n        g.pixiGame.container.addChild(anim);\r\n        anim.play();\r\n    }, 4000)*/\r\n}"],
  "mappings": "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",
  "names": ["EventType", "position", "average", "i", "args", "time", "metadata", "entityId", "metadata", "component", "player", "ac"]
}
